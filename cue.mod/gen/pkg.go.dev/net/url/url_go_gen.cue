// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go net/url

// Package url parses URLs and implements query escaping.
package url

// Error reports an error and the operation and URL that caused it.
#Error: {
	Op:  string
	URL: string
	Err: _ @go(,error)
}

_#upperhex: "0123456789ABCDEF"

_#encoding: int

_#encodePath:           _#encoding & 1
_#encodePathSegment:    _#encoding & 2
_#encodeHost:           _#encoding & 3
_#encodeZone:           _#encoding & 4
_#encodeUserPassword:   _#encoding & 5
_#encodeQueryComponent: _#encoding & 6
_#encodeFragment:       _#encoding & 7

#EscapeError: string

#InvalidHostError: string

// A URL represents a parsed URL (technically, a URI reference).
//
// The general form represented is:
//
//	[scheme:][//[userinfo@]host][/]path[?query][#fragment]
//
// URLs that do not start with a slash after the scheme are interpreted as:
//
//	scheme:opaque[?query][#fragment]
//
// Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.
// A consequence is that it is impossible to tell which slashes in the Path were
// slashes in the raw URL and which were %2f. This distinction is rarely important,
// but when it is, the code should use the EscapedPath method, which preserves
// the original encoding of Path.
//
// The RawPath field is an optional field which is only set when the default
// encoding of Path is different from the escaped path. See the EscapedPath method
// for more details.
//
// URL's String method uses the EscapedPath method to obtain the path.
#URL: {
	Scheme:      string
	Opaque:      string
	Host:        string
	Path:        string
	RawPath:     string
	OmitHost:    bool
	ForceQuery:  bool
	RawQuery:    string
	Fragment:    string
	RawFragment: string
}

// Values maps a string key to a list of values.
// It is typically used for query parameters and form values.
// Unlike in the http.Header map, the keys in a Values map
// are case-sensitive.
#Values: {[string]: [...string]}
