// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// MetaVMAlertDeduplicateRulesKey - controls behavior for vmalert rules deduplication
// its useful for migration from prometheus.
#MetaVMAlertDeduplicateRulesKey: "operator.victoriametrics.com/vmalert-deduplicate-rules"

// VMAlertSpec defines the desired state of VMAlert
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version",description="The version of VMAlert"
// +kubebuilder:printcolumn:name="ReplicaCount",type="integer",JSONPath=".spec.replicas",description="The desired replicas number of VmAlerts"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#VMAlertSpec: _

// VMAlertDatasourceSpec defines the remote storage configuration for VmAlert to read alerts from
// +k8s:openapi-gen=true
#VMAlertDatasourceSpec: {
	// Victoria Metrics or VMSelect url. Required parameter. E.g. http://127.0.0.1:8428
	url: string @go(URL)

	#HTTPAuth
}

// VMAlertNotifierSpec defines the notifier url for sending information about alerts
// +k8s:openapi-gen=true
#VMAlertNotifierSpec: {
	// AlertManager url.  E.g. http://127.0.0.1:9093
	// +optional
	url?: string @go(URL)

	// Selector allows service discovery for alertmanager
	// in this case all matched vmalertmanager replicas will be added into vmalert notifier.url
	// as statefulset pod.fqdn
	// +optional
	selector?: null | #DiscoverySelector @go(Selector,*DiscoverySelector)

	#HTTPAuth
}

// VMAlertRemoteReadSpec defines the remote storage configuration for VmAlert to read alerts from
// +k8s:openapi-gen=true
#VMAlertRemoteReadSpec: {
	// URL of the endpoint to send samples to.
	url: string @go(URL)

	// Lookback defines how far to look into past for alerts timeseries. For example, if lookback=1h then range from now() to now()-1h will be scanned. (default 1h0m0s)
	// Applied only to RemoteReadSpec
	// +optional
	lookback?: null | string @go(Lookback,*string)

	#HTTPAuth
}

// VMAlertRemoteWriteSpec defines the remote storage configuration for VmAlert
// +k8s:openapi-gen=true
#VMAlertRemoteWriteSpec: {
	// URL of the endpoint to send samples to.
	url: string @go(URL)

	// Defines number of readers that concurrently write into remote storage (default 1)
	// +optional
	concurrency?: null | int32 @go(Concurrency,*int32)

	// Defines interval of flushes to remote write endpoint (default 5s)
	// +optional
	// +kubebuilder:validation:Pattern:="[0-9]+(ms|s|m|h)"
	flushInterval?: null | string @go(FlushInterval,*string)

	// Defines defines max number of timeseries to be flushed at once (default 1000)
	// +optional
	maxBatchSize?: null | int32 @go(MaxBatchSize,*int32)

	// Defines the max number of pending datapoints to remote write endpoint (default 100000)
	// +optional
	maxQueueSize?: null | int32 @go(MaxQueueSize,*int32)

	#HTTPAuth
}

// VMAlertStatus defines the observed state of VMAlert
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
#VMAlertStatus: {
	// ReplicaCount Total number of non-terminated pods targeted by this VMAlert
	// cluster (their labels match the selector).
	replicas: int32 @go(Replicas)

	// UpdatedReplicas Total number of non-terminated pods targeted by this VMAlert
	// cluster that have the desired version spec.
	updatedReplicas: int32 @go(UpdatedReplicas)

	// AvailableReplicas Total number of available pods (ready for at least minReadySeconds)
	// targeted by this VMAlert cluster.
	availableReplicas: int32 @go(AvailableReplicas)

	// UnavailableReplicas Total number of unavailable pods targeted by this VMAlert cluster.
	unavailableReplicas: int32 @go(UnavailableReplicas)
}

// VMAlert  executes a list of given alerting or recording rules against configured address.
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMAlert App"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Deployment,v1"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Service,v1"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Secret,v1"
// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=vmalerts,scope=Namespaced
#VMAlert: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #VMAlertSpec       @go(Spec)
	status?:   #VMAlertStatus     @go(Status)
}

// VMAlertList contains a list of VMAlert
#VMAlertList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMAlert] @go(Items,[]VMAlert)
}
