// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/v1beta1

package v1beta1

import (
	v12 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VMAuthSpec defines the desired state of VMAuth
#VMAuthSpec: _

// VMAuthUnauthorizedPath defines url_map for unauthorized access
#VMAuthUnauthorizedPath: {
	// Paths src request paths
	// +optional
	src_paths?: [...string] @go(Paths,[]string)

	// URLs defines url_prefix for dst routing
	// +optional
	url_prefix?: [...string] @go(URLs,[]string)

	// IPFilters defines filter for src ip address
	// enterprise only
	ip_filters?: #VMUserIPFilters @go(IPFilters)

	// SrcHosts is the list of regular expressions, which match the request hostname.
	src_hosts?: [...string] @go(Hosts,[]string)

	// Headers represent additional http headers, that vmauth uses
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.68.0 version of vmauth
	// +optional
	headers?: [...string] @go(Headers,[]string)

	// ResponseHeaders represent additional http headers, that vmauth adds for request response
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.93.0 version of vmauth
	// +optional
	response_headers?: [...string] @go(ResponseHeaders,[]string)

	// RetryStatusCodes defines http status codes in numeric format for request retries
	// e.g. [429,503]
	// +optional
	retry_status_codes?: [...int] @go(RetryStatusCodes,[]int)

	// LoadBalancingPolicy defines load balancing policy to use for backend urls.
	// Supported policies: least_loaded, first_available.
	// See https://docs.victoriametrics.com/vmauth.html#load-balancing for more details (default "least_loaded")
	// +optional
	// +kubebuilder:validation:Enum=least_loaded;first_available
	load_balancing_policy?: null | string @go(LoadBalancingPolicy,*string)

	// DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
	// See https://docs.victoriametrics.com/vmauth.html#dropping-request-path-prefix for more details.
	// +optional
	drop_src_path_prefix_parts?: null | int @go(DropSrcPathPrefixParts,*int)
}

// EmbeddedIngress describes ingress configuration options.
#EmbeddedIngress: {
	// ClassName defines ingress class name for VMAuth
	// +optional
	class_name?: null | string @go(ClassName,*string)

	#EmbeddedObjectMetadata

	// TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.
	tlsHosts?: [...string] @go(TlsHosts,[]string)

	// TlsSecretName defines secretname at the VMAuth namespace with cert and key
	// https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
	// +optional
	tlsSecretName?: string @go(TlsSecretName)

	// ExtraRules - additional rules for ingress,
	// must be checked for correctness by user.
	// +optional
	extraRules?: [...v12.#IngressRule] @go(ExtraRules,[]v12.IngressRule)

	// ExtraTLS - additional TLS configuration for ingress
	// must be checked for correctness by user.
	// +optional
	extraTls?: [...v12.#IngressTLS] @go(ExtraTLS,[]v12.IngressTLS)

	// Host defines ingress host parameter for default rule
	// It will be used, only if TlsHosts is empty
	// +optional
	host?: string @go(Host)
}

// VMAuthStatus defines the observed state of VMAuth
#VMAuthStatus: {
}

// VMAuth is the Schema for the vmauths API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +genclient
// +k8s:openapi-gen=true
#VMAuth: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #VMAuthSpec        @go(Spec)
	status?:   #VMAuthStatus      @go(Status)
}

// VMAuthList contains a list of VMAuth
#VMAuthList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMAuth] @go(Items,[]VMAuth)
}
