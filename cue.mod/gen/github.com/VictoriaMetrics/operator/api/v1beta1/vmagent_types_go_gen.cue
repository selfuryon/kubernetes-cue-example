// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/v1beta1

package v1beta1

import (
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VMAgentSpec defines the desired state of VMAgent
// +k8s:openapi-gen=true
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version",description="The version of VMAgent"
// +kubebuilder:printcolumn:name="ReplicaCount",type="integer",JSONPath=".spec.replicas",description="The desired replicas number of VMAgent"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#VMAgentSpec: _

// VMAgentRemoteWriteSettings - defines global settings for all remoteWrite urls.
#VMAgentRemoteWriteSettings: {
	// The maximum size in bytes of unpacked request to send to remote storage
	// +optional
	maxBlockSize?: null | int32 @go(MaxBlockSize,*int32)

	// The maximum file-based buffer size in bytes at -remoteWrite.tmpDataPath
	// +optional
	maxDiskUsagePerURL?: null | int64 @go(MaxDiskUsagePerURL,*int64)

	// The number of concurrent queues
	// +optional
	queues?: null | int32 @go(Queues,*int32)

	// Whether to show -remoteWrite.url in the exported metrics. It is hidden by default, since it can contain sensitive auth info
	// +optional
	showURL?: null | bool @go(ShowURL,*bool)

	// Path to directory where temporary data for remote write component is stored (default vmagent-remotewrite-data)
	// +optional
	tmpDataPath?: null | string @go(TmpDataPath,*string)

	// Interval for flushing the data to remote storage. (default 1s)
	// +optional
	// +kubebuilder:validation:Pattern:="[0-9]+(ms|s|m|h)"
	flushInterval?: null | string @go(FlushInterval,*string)

	// Labels in the form 'name=value' to add to all the metrics before sending them. This overrides the label if it already exists.
	// +optional
	label?: {[string]: string} @go(Labels,map[string]string)

	// Configures vmagent in multi-tenant mode with direct cluster support
	// docs https://docs.victoriametrics.com/vmagent.html#multitenancy
	// it's global setting and affects all remote storage configurations
	// +optional
	useMultiTenantMode?: bool @go(UseMultiTenantMode)
}

// VMAgentRemoteWriteSpec defines the remote storage configuration for VmAgent
// +k8s:openapi-gen=true
#VMAgentRemoteWriteSpec: {
	// URL of the endpoint to send samples to.
	url: string @go(URL)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Optional bearer auth token to use for -remoteWrite.url
	// +optional
	bearerTokenSecret?: null | v1.#SecretKeySelector @go(BearerTokenSecret,*v1.SecretKeySelector)

	// ConfigMap with relabeling config which is applied to metrics before sending them to the corresponding -remoteWrite.url
	// +optional
	// +operator-sdk:csv:customresourcedefinitions:type=spec,displayName="Key at Configmap with relabelConfig for remoteWrite",xDescriptors="urn:alm:descriptor:io.kubernetes:ConfigMapKeySelector"
	urlRelabelConfig?: null | v1.#ConfigMapKeySelector @go(UrlRelabelConfig,*v1.ConfigMapKeySelector)

	// InlineUrlRelabelConfig defines relabeling config for remoteWriteURL, it can be defined at crd spec.
	// +optional
	inlineUrlRelabelConfig?: [...#RelabelConfig] @go(InlineUrlRelabelConfig,[]RelabelConfig)

	// OAuth2 defines auth configuration
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// TLSConfig describes tls configuration for remote write target
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// Timeout for sending a single block of data to -remoteWrite.url (default 1m0s)
	// +optional
	// +kubebuilder:validation:Pattern:="[0-9]+(ms|s|m|h)"
	sendTimeout?: null | string @go(SendTimeout,*string)

	// Headers allow configuring custom http headers
	// Must be in form of semicolon separated header with value
	// e.g.
	// headerName: headerValue
	// vmagent supports since 1.79.0 version
	// +optional
	headers?: [...string] @go(Headers,[]string)

	// StreamAggrConfig defines stream aggregation configuration for VMAgent for -remoteWrite.url
	// +optional
	streamAggrConfig?: null | #StreamAggrConfig @go(StreamAggrConfig,*StreamAggrConfig)
}

// VMAgentStatus defines the observed state of VMAgent
// +k8s:openapi-gen=true
#VMAgentStatus: {
	// Shards represents total number of vmagent deployments with uniq scrape targets
	shards: int32 @go(Shards)

	// Selector string form of label value set for autoscaling
	selector: string @go(Selector)

	// ReplicaCount Total number of pods targeted by this VMAgent
	replicas: int32 @go(Replicas)

	// UpdatedReplicas Total number of non-terminated pods targeted by this VMAgent
	// cluster that have the desired version spec.
	updatedReplicas: int32 @go(UpdatedReplicas)

	// AvailableReplicas Total number of available pods (ready for at least minReadySeconds)
	// targeted by this VMAlert cluster.
	availableReplicas: int32 @go(AvailableReplicas)

	// UnavailableReplicas Total number of unavailable pods targeted by this VMAgent cluster.
	unavailableReplicas: int32 @go(UnavailableReplicas)
}

// VMAgent - is a tiny but brave agent, which helps you collect metrics from various sources and stores them in VictoriaMetrics
// or any other Prometheus-compatible storage system that supports the remote_write protocol.
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMAgent App"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Deployment,apps"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Service,v1"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Secret,v1"
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=vmagents,scope=Namespaced
// +kubebuilder:subresource:scale:specpath=.spec.shardCount,statuspath=.status.shards,selectorpath=.status.selector
// +kubebuilder:printcolumn:name="Shards Count",type="integer",JSONPath=".status.shards",description="current number of shards"
// +kubebuilder:printcolumn:name="Replica Count",type="integer",JSONPath=".status.replicas",description="current number of replicas"
#VMAgent: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #VMAgentSpec       @go(Spec)
	status?:   #VMAgentStatus     @go(Status)
}

// VMAgentList contains a list of VMAgent
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VMAgentList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMAgent] @go(Items,[]VMAgent)
}
