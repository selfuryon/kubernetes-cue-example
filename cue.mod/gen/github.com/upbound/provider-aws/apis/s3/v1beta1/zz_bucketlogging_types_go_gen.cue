// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketLoggingInitParameters: {
	// Name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Account ID of the expected bucket owner.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Name of the bucket where you want Amazon S3 to store server access logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	targetBucket?: null | string @go(TargetBucket,*string)

	// Reference to a Bucket in s3 to populate targetBucket.
	// +kubebuilder:validation:Optional
	targetBucketRef?: null | v1.#Reference @go(TargetBucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate targetBucket.
	// +kubebuilder:validation:Optional
	targetBucketSelector?: null | v1.#Selector @go(TargetBucketSelector,*v1.Selector)

	// Set of configuration blocks with information for granting permissions. See below.
	targetGrant?: [...#TargetGrantInitParameters] @go(TargetGrant,[]TargetGrantInitParameters)

	// Amazon S3 key format for log objects. See below.
	targetObjectKeyFormat?: [...#TargetObjectKeyFormatInitParameters] @go(TargetObjectKeyFormat,[]TargetObjectKeyFormatInitParameters)

	// Prefix for all log object keys.
	targetPrefix?: null | string @go(TargetPrefix,*string)
}

#BucketLoggingObservation: {
	// Name of the bucket.
	bucket?: null | string @go(Bucket,*string)

	// Account ID of the expected bucket owner.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// The bucket or bucket and expected_bucket_owner separated by a comma (,) if the latter is provided.
	id?: null | string @go(ID,*string)

	// Name of the bucket where you want Amazon S3 to store server access logs.
	targetBucket?: null | string @go(TargetBucket,*string)

	// Set of configuration blocks with information for granting permissions. See below.
	targetGrant?: [...#TargetGrantObservation] @go(TargetGrant,[]TargetGrantObservation)

	// Amazon S3 key format for log objects. See below.
	targetObjectKeyFormat?: [...#TargetObjectKeyFormatObservation] @go(TargetObjectKeyFormat,[]TargetObjectKeyFormatObservation)

	// Prefix for all log object keys.
	targetPrefix?: null | string @go(TargetPrefix,*string)
}

#BucketLoggingParameters: {
	// Name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Account ID of the expected bucket owner.
	// +kubebuilder:validation:Optional
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Name of the bucket where you want Amazon S3 to store server access logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	targetBucket?: null | string @go(TargetBucket,*string)

	// Reference to a Bucket in s3 to populate targetBucket.
	// +kubebuilder:validation:Optional
	targetBucketRef?: null | v1.#Reference @go(TargetBucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate targetBucket.
	// +kubebuilder:validation:Optional
	targetBucketSelector?: null | v1.#Selector @go(TargetBucketSelector,*v1.Selector)

	// Set of configuration blocks with information for granting permissions. See below.
	// +kubebuilder:validation:Optional
	targetGrant?: [...#TargetGrantParameters] @go(TargetGrant,[]TargetGrantParameters)

	// Amazon S3 key format for log objects. See below.
	// +kubebuilder:validation:Optional
	targetObjectKeyFormat?: [...#TargetObjectKeyFormatParameters] @go(TargetObjectKeyFormat,[]TargetObjectKeyFormatParameters)

	// Prefix for all log object keys.
	// +kubebuilder:validation:Optional
	targetPrefix?: null | string @go(TargetPrefix,*string)
}

#PartitionedPrefixInitParameters: {
	// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
	partitionDateSource?: null | string @go(PartitionDateSource,*string)
}

#PartitionedPrefixObservation: {
	// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
	partitionDateSource?: null | string @go(PartitionDateSource,*string)
}

#PartitionedPrefixParameters: {
	// Specifies the partition date source for the partitioned prefix. Valid values: EventTime, DeliveryTime.
	// +kubebuilder:validation:Optional
	partitionDateSource?: null | string @go(PartitionDateSource,*string)
}

#SimplePrefixInitParameters: {
}

#SimplePrefixObservation: {
}

#SimplePrefixParameters: {
}

#TargetGrantGranteeInitParameters: {
	// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
	emailAddress?: null | string @go(EmailAddress,*string)

	// Canonical user ID of the grantee.
	id?: null | string @go(ID,*string)

	// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
	type?: null | string @go(Type,*string)

	// URI of the grantee group.
	uri?: null | string @go(URI,*string)
}

#TargetGrantGranteeObservation: {
	displayName?: null | string @go(DisplayName,*string)

	// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
	emailAddress?: null | string @go(EmailAddress,*string)

	// Canonical user ID of the grantee.
	id?: null | string @go(ID,*string)

	// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
	type?: null | string @go(Type,*string)

	// URI of the grantee group.
	uri?: null | string @go(URI,*string)
}

#TargetGrantGranteeParameters: {
	// Email address of the grantee. See Regions and Endpoints for supported AWS regions where this argument can be specified.
	// +kubebuilder:validation:Optional
	emailAddress?: null | string @go(EmailAddress,*string)

	// Canonical user ID of the grantee.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Type of grantee. Valid values: CanonicalUser, AmazonCustomerByEmail, Group.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// URI of the grantee group.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#TargetGrantInitParameters: {
	// Configuration block for the person being granted permissions. See below.
	grantee?: [...#TargetGrantGranteeInitParameters] @go(Grantee,[]TargetGrantGranteeInitParameters)

	// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
	permission?: null | string @go(Permission,*string)
}

#TargetGrantObservation: {
	// Configuration block for the person being granted permissions. See below.
	grantee?: [...#TargetGrantGranteeObservation] @go(Grantee,[]TargetGrantGranteeObservation)

	// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
	permission?: null | string @go(Permission,*string)
}

#TargetGrantParameters: {
	// Configuration block for the person being granted permissions. See below.
	// +kubebuilder:validation:Optional
	grantee: [...#TargetGrantGranteeParameters] @go(Grantee,[]TargetGrantGranteeParameters)

	// Logging permissions assigned to the grantee for the bucket. Valid values: FULL_CONTROL, READ, WRITE.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

#TargetObjectKeyFormatInitParameters: {
	// Partitioned S3 key for log objects. See below.
	partitionedPrefix?: [...#PartitionedPrefixInitParameters] @go(PartitionedPrefix,[]PartitionedPrefixInitParameters)

	// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
	simplePrefix?: [...#SimplePrefixInitParameters] @go(SimplePrefix,[]SimplePrefixInitParameters)
}

#TargetObjectKeyFormatObservation: {
	// Partitioned S3 key for log objects. See below.
	partitionedPrefix?: [...#PartitionedPrefixObservation] @go(PartitionedPrefix,[]PartitionedPrefixObservation)

	// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
	simplePrefix?: [...#SimplePrefixParameters] @go(SimplePrefix,[]SimplePrefixParameters)
}

#TargetObjectKeyFormatParameters: {
	// Partitioned S3 key for log objects. See below.
	// +kubebuilder:validation:Optional
	partitionedPrefix?: [...#PartitionedPrefixParameters] @go(PartitionedPrefix,[]PartitionedPrefixParameters)

	// Use the simple format for S3 keys for log objects. To use, set simple_prefix {}.
	// +kubebuilder:validation:Optional
	simplePrefix?: [...#SimplePrefixParameters] @go(SimplePrefix,[]SimplePrefixParameters)
}

// BucketLoggingSpec defines the desired state of BucketLogging
#BucketLoggingSpec: {
	v1.#ResourceSpec
	forProvider: #BucketLoggingParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketLoggingInitParameters @go(InitProvider)
}

// BucketLoggingStatus defines the observed state of BucketLogging.
#BucketLoggingStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketLoggingObservation @go(AtProvider)
}

// BucketLogging is the Schema for the BucketLoggings API. Provides an S3 bucket (server access) logging resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketLogging: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetPrefix) || (has(self.initProvider) && has(self.initProvider.targetPrefix))",message="spec.forProvider.targetPrefix is a required parameter"
	spec:    #BucketLoggingSpec   @go(Spec)
	status?: #BucketLoggingStatus @go(Status)
}

// BucketLoggingList contains a list of BucketLoggings
#BucketLoggingList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketLogging] @go(Items,[]BucketLogging)
}
