// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketInventoryDestinationInitParameters: {
	// Name of the source bucket that inventory lists the objects for.
	bucket?: [...#DestinationBucketInitParameters] @go(Bucket,[]DestinationBucketInitParameters)
}

#BucketInventoryDestinationObservation: {
	// Name of the source bucket that inventory lists the objects for.
	bucket?: [...#DestinationBucketObservation] @go(Bucket,[]DestinationBucketObservation)
}

#BucketInventoryDestinationParameters: {
	// Name of the source bucket that inventory lists the objects for.
	// +kubebuilder:validation:Optional
	bucket: [...#DestinationBucketParameters] @go(Bucket,[]DestinationBucketParameters)
}

#BucketInventoryFilterInitParameters: {
	// Prefix that an object must have to be included in the inventory results.
	prefix?: null | string @go(Prefix,*string)
}

#BucketInventoryFilterObservation: {
	// Prefix that an object must have to be included in the inventory results.
	prefix?: null | string @go(Prefix,*string)
}

#BucketInventoryFilterParameters: {
	// Prefix that an object must have to be included in the inventory results.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)
}

#BucketInventoryInitParameters: {
	// Name of the source bucket that inventory lists the objects for.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Contains information about where to publish the inventory results (documented below).
	destination?: [...#BucketInventoryDestinationInitParameters] @go(Destination,[]BucketInventoryDestinationInitParameters)

	// Specifies whether the inventory is enabled or disabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
	filter?: [...#BucketInventoryFilterInitParameters] @go(Filter,[]BucketInventoryFilterInitParameters)

	// Object versions to include in the inventory list. Valid values: All, Current.
	includedObjectVersions?: null | string @go(IncludedObjectVersions,*string)

	// Unique identifier of the inventory configuration for the bucket.
	name?: null | string @go(Name,*string)

	// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
	// +listType=set
	optionalFields?: [...null | string] @go(OptionalFields,[]*string)

	// Specifies the schedule for generating inventory results (documented below).
	schedule?: [...#ScheduleInitParameters] @go(Schedule,[]ScheduleInitParameters)
}

#BucketInventoryObservation: {
	// Name of the source bucket that inventory lists the objects for.
	bucket?: null | string @go(Bucket,*string)

	// Contains information about where to publish the inventory results (documented below).
	destination?: [...#BucketInventoryDestinationObservation] @go(Destination,[]BucketInventoryDestinationObservation)

	// Specifies whether the inventory is enabled or disabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
	filter?: [...#BucketInventoryFilterObservation] @go(Filter,[]BucketInventoryFilterObservation)
	id?: null | string @go(ID,*string)

	// Object versions to include in the inventory list. Valid values: All, Current.
	includedObjectVersions?: null | string @go(IncludedObjectVersions,*string)

	// Unique identifier of the inventory configuration for the bucket.
	name?: null | string @go(Name,*string)

	// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
	// +listType=set
	optionalFields?: [...null | string] @go(OptionalFields,[]*string)

	// Specifies the schedule for generating inventory results (documented below).
	schedule?: [...#ScheduleObservation] @go(Schedule,[]ScheduleObservation)
}

#BucketInventoryParameters: {
	// Name of the source bucket that inventory lists the objects for.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Contains information about where to publish the inventory results (documented below).
	// +kubebuilder:validation:Optional
	destination?: [...#BucketInventoryDestinationParameters] @go(Destination,[]BucketInventoryDestinationParameters)

	// Specifies whether the inventory is enabled or disabled.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
	// +kubebuilder:validation:Optional
	filter?: [...#BucketInventoryFilterParameters] @go(Filter,[]BucketInventoryFilterParameters)

	// Object versions to include in the inventory list. Valid values: All, Current.
	// +kubebuilder:validation:Optional
	includedObjectVersions?: null | string @go(IncludedObjectVersions,*string)

	// Unique identifier of the inventory configuration for the bucket.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
	// +kubebuilder:validation:Optional
	// +listType=set
	optionalFields?: [...null | string] @go(OptionalFields,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the schedule for generating inventory results (documented below).
	// +kubebuilder:validation:Optional
	schedule?: [...#ScheduleParameters] @go(Schedule,[]ScheduleParameters)
}

#DestinationBucketInitParameters: {
	// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
	accountId?: null | string @go(AccountID,*string)

	// Amazon S3 bucket ARN of the destination.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	bucketArn?: null | string @go(BucketArn,*string)

	// Reference to a Bucket in s3 to populate bucketArn.
	// +kubebuilder:validation:Optional
	bucketArnRef?: null | v1.#Reference @go(BucketArnRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucketArn.
	// +kubebuilder:validation:Optional
	bucketArnSelector?: null | v1.#Selector @go(BucketArnSelector,*v1.Selector)

	// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
	encryption?: [...#EncryptionInitParameters] @go(Encryption,[]EncryptionInitParameters)

	// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
	format?: null | string @go(Format,*string)

	// Prefix that an object must have to be included in the inventory results.
	prefix?: null | string @go(Prefix,*string)
}

#DestinationBucketObservation: {
	// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
	accountId?: null | string @go(AccountID,*string)

	// Amazon S3 bucket ARN of the destination.
	bucketArn?: null | string @go(BucketArn,*string)

	// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
	encryption?: [...#EncryptionObservation] @go(Encryption,[]EncryptionObservation)

	// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
	format?: null | string @go(Format,*string)

	// Prefix that an object must have to be included in the inventory results.
	prefix?: null | string @go(Prefix,*string)
}

#DestinationBucketParameters: {
	// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// Amazon S3 bucket ARN of the destination.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	bucketArn?: null | string @go(BucketArn,*string)

	// Reference to a Bucket in s3 to populate bucketArn.
	// +kubebuilder:validation:Optional
	bucketArnRef?: null | v1.#Reference @go(BucketArnRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucketArn.
	// +kubebuilder:validation:Optional
	bucketArnSelector?: null | v1.#Selector @go(BucketArnSelector,*v1.Selector)

	// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
	// +kubebuilder:validation:Optional
	encryption?: [...#EncryptionParameters] @go(Encryption,[]EncryptionParameters)

	// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)

	// Prefix that an object must have to be included in the inventory results.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)
}

#EncryptionInitParameters: {
	// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
	sseKms?: [...#SseKMSInitParameters] @go(SseKMS,[]SseKMSInitParameters)

	// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
	sseS3?: [...#SseS3InitParameters] @go(SseS3,[]SseS3InitParameters)
}

#EncryptionObservation: {
	// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
	sseKms?: [...#SseKMSObservation] @go(SseKMS,[]SseKMSObservation)

	// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
	sseS3?: [...#SseS3Parameters] @go(SseS3,[]SseS3Parameters)
}

#EncryptionParameters: {
	// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
	// +kubebuilder:validation:Optional
	sseKms?: [...#SseKMSParameters] @go(SseKMS,[]SseKMSParameters)

	// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
	// +kubebuilder:validation:Optional
	sseS3?: [...#SseS3Parameters] @go(SseS3,[]SseS3Parameters)
}

#ScheduleInitParameters: {
	// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
	frequency?: null | string @go(Frequency,*string)
}

#ScheduleObservation: {
	// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
	frequency?: null | string @go(Frequency,*string)
}

#ScheduleParameters: {
	// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
	// +kubebuilder:validation:Optional
	frequency?: null | string @go(Frequency,*string)
}

#SseKMSInitParameters: {
	// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
	keyId?: null | string @go(KeyID,*string)
}

#SseKMSObservation: {
	// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
	keyId?: null | string @go(KeyID,*string)
}

#SseKMSParameters: {
	// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
	// +kubebuilder:validation:Optional
	keyId?: null | string @go(KeyID,*string)
}

#SseS3InitParameters: {
}

#SseS3Observation: {
}

#SseS3Parameters: {
}

// BucketInventorySpec defines the desired state of BucketInventory
#BucketInventorySpec: {
	v1.#ResourceSpec
	forProvider: #BucketInventoryParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketInventoryInitParameters @go(InitProvider)
}

// BucketInventoryStatus defines the observed state of BucketInventory.
#BucketInventoryStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketInventoryObservation @go(AtProvider)
}

// BucketInventory is the Schema for the BucketInventorys API. Provides a S3 bucket inventory configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketInventory: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.includedObjectVersions) || (has(self.initProvider) && has(self.initProvider.includedObjectVersions))",message="spec.forProvider.includedObjectVersions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || (has(self.initProvider) && has(self.initProvider.schedule))",message="spec.forProvider.schedule is a required parameter"
	spec:    #BucketInventorySpec   @go(Spec)
	status?: #BucketInventoryStatus @go(Status)
}

// BucketInventoryList contains a list of BucketInventorys
#BucketInventoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketInventory] @go(Items,[]BucketInventory)
}
