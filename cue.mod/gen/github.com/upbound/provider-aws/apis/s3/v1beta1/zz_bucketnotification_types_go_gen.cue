// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketNotificationInitParameters: {
	// Name of the bucket for notification configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Whether to enable Amazon EventBridge notifications. Defaults to false.
	eventbridge?: null | bool @go(Eventbridge,*bool)

	// Used to configure notifications to a Lambda Function. See below.
	lambdaFunction?: [...#LambdaFunctionInitParameters] @go(LambdaFunction,[]LambdaFunctionInitParameters)

	// Notification configuration to SQS Queue. See below.
	queue?: [...#QueueInitParameters] @go(Queue,[]QueueInitParameters)

	// Notification configuration to SNS Topic. See below.
	topic?: [...#TopicInitParameters] @go(Topic,[]TopicInitParameters)
}

#BucketNotificationObservation: {
	// Name of the bucket for notification configuration.
	bucket?: null | string @go(Bucket,*string)

	// Whether to enable Amazon EventBridge notifications. Defaults to false.
	eventbridge?: null | bool @go(Eventbridge,*bool)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// Used to configure notifications to a Lambda Function. See below.
	lambdaFunction?: [...#LambdaFunctionObservation] @go(LambdaFunction,[]LambdaFunctionObservation)

	// Notification configuration to SQS Queue. See below.
	queue?: [...#QueueObservation] @go(Queue,[]QueueObservation)

	// Notification configuration to SNS Topic. See below.
	topic?: [...#TopicObservation] @go(Topic,[]TopicObservation)
}

#BucketNotificationParameters: {
	// Name of the bucket for notification configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Whether to enable Amazon EventBridge notifications. Defaults to false.
	// +kubebuilder:validation:Optional
	eventbridge?: null | bool @go(Eventbridge,*bool)

	// Used to configure notifications to a Lambda Function. See below.
	// +kubebuilder:validation:Optional
	lambdaFunction?: [...#LambdaFunctionParameters] @go(LambdaFunction,[]LambdaFunctionParameters)

	// Notification configuration to SQS Queue. See below.
	// +kubebuilder:validation:Optional
	queue?: [...#QueueParameters] @go(Queue,[]QueueParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Notification configuration to SNS Topic. See below.
	// +kubebuilder:validation:Optional
	topic?: [...#TopicParameters] @go(Topic,[]TopicParameters)
}

#LambdaFunctionInitParameters: {
	// Event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// Lambda function ARN.
	lambdaFunctionArn?: null | string @go(LambdaFunctionArn,*string)
}

#LambdaFunctionObservation: {
	// Event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// Lambda function ARN.
	lambdaFunctionArn?: null | string @go(LambdaFunctionArn,*string)
}

#LambdaFunctionParameters: {
	// Event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType=set
	events: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Lambda function ARN.
	// +kubebuilder:validation:Optional
	lambdaFunctionArn?: null | string @go(LambdaFunctionArn,*string)
}

#QueueInitParameters: {
	// Specifies event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// SQS queue ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	queueArn?: null | string @go(QueueArn,*string)

	// Reference to a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	queueArnRef?: null | v1.#Reference @go(QueueArnRef,*v1.Reference)

	// Selector for a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	queueArnSelector?: null | v1.#Selector @go(QueueArnSelector,*v1.Selector)
}

#QueueObservation: {
	// Specifies event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// SQS queue ARN.
	queueArn?: null | string @go(QueueArn,*string)
}

#QueueParameters: {
	// Specifies event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType=set
	events: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// SQS queue ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	queueArn?: null | string @go(QueueArn,*string)

	// Reference to a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	queueArnRef?: null | v1.#Reference @go(QueueArnRef,*v1.Reference)

	// Selector for a Queue in sqs to populate queueArn.
	// +kubebuilder:validation:Optional
	queueArnSelector?: null | v1.#Selector @go(QueueArnSelector,*v1.Selector)
}

#TopicInitParameters: {
	// Event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// SNS topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	topicArn?: null | string @go(TopicArn,*string)

	// Reference to a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnRef?: null | v1.#Reference @go(TopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnSelector?: null | v1.#Selector @go(TopicArnSelector,*v1.Selector)
}

#TopicObservation: {
	// Event for which to send notifications.
	// +listType=set
	events?: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	id?: null | string @go(ID,*string)

	// SNS topic ARN.
	topicArn?: null | string @go(TopicArn,*string)
}

#TopicParameters: {
	// Event for which to send notifications.
	// +kubebuilder:validation:Optional
	// +listType=set
	events: [...null | string] @go(Events,[]*string)

	// Object key name prefix.
	// +kubebuilder:validation:Optional
	filterPrefix?: null | string @go(FilterPrefix,*string)

	// Object key name suffix.
	// +kubebuilder:validation:Optional
	filterSuffix?: null | string @go(FilterSuffix,*string)

	// Unique identifier for each of the notification configurations.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// SNS topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)

	// Reference to a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnRef?: null | v1.#Reference @go(TopicArnRef,*v1.Reference)

	// Selector for a Topic in sns to populate topicArn.
	// +kubebuilder:validation:Optional
	topicArnSelector?: null | v1.#Selector @go(TopicArnSelector,*v1.Selector)
}

// BucketNotificationSpec defines the desired state of BucketNotification
#BucketNotificationSpec: {
	v1.#ResourceSpec
	forProvider: #BucketNotificationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketNotificationInitParameters @go(InitProvider)
}

// BucketNotificationStatus defines the observed state of BucketNotification.
#BucketNotificationStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketNotificationObservation @go(AtProvider)
}

// BucketNotification is the Schema for the BucketNotifications API. Manages a S3 Bucket Notification Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketNotification: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta        @go(ObjectMeta)
	spec:      #BucketNotificationSpec   @go(Spec)
	status?:   #BucketNotificationStatus @go(Status)
}

// BucketNotificationList contains a list of BucketNotifications
#BucketNotificationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketNotification] @go(Items,[]BucketNotification)
}
