// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketIntelligentTieringConfigurationFilterInitParameters: {
	// Object key name prefix that identifies the subset of objects to which the configuration applies.
	prefix?: null | string @go(Prefix,*string)

	// Key-value map of resource tags.
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#BucketIntelligentTieringConfigurationFilterObservation: {
	// Object key name prefix that identifies the subset of objects to which the configuration applies.
	prefix?: null | string @go(Prefix,*string)

	// Key-value map of resource tags.
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#BucketIntelligentTieringConfigurationFilterParameters: {
	// Object key name prefix that identifies the subset of objects to which the configuration applies.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#BucketIntelligentTieringConfigurationInitParameters: {
	// Name of the bucket this intelligent tiering configuration is associated with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Bucket filter. The configuration only includes objects that meet the filter's criteria (documented below).
	filter?: [...#BucketIntelligentTieringConfigurationFilterInitParameters] @go(Filter,[]BucketIntelligentTieringConfigurationFilterInitParameters)

	// Unique name used to identify the S3 Intelligent-Tiering configuration for the bucket.
	name?: null | string @go(Name,*string)

	// Specifies the status of the configuration. Valid values: Enabled, Disabled.
	status?: null | string @go(Status,*string)

	// S3 Intelligent-Tiering storage class tiers of the configuration (documented below).
	tiering?: [...#TieringInitParameters] @go(Tiering,[]TieringInitParameters)
}

#BucketIntelligentTieringConfigurationObservation: {
	// Name of the bucket this intelligent tiering configuration is associated with.
	bucket?: null | string @go(Bucket,*string)

	// Bucket filter. The configuration only includes objects that meet the filter's criteria (documented below).
	filter?: [...#BucketIntelligentTieringConfigurationFilterObservation] @go(Filter,[]BucketIntelligentTieringConfigurationFilterObservation)
	id?: null | string @go(ID,*string)

	// Unique name used to identify the S3 Intelligent-Tiering configuration for the bucket.
	name?: null | string @go(Name,*string)

	// Specifies the status of the configuration. Valid values: Enabled, Disabled.
	status?: null | string @go(Status,*string)

	// S3 Intelligent-Tiering storage class tiers of the configuration (documented below).
	tiering?: [...#TieringObservation] @go(Tiering,[]TieringObservation)
}

#BucketIntelligentTieringConfigurationParameters: {
	// Name of the bucket this intelligent tiering configuration is associated with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Bucket filter. The configuration only includes objects that meet the filter's criteria (documented below).
	// +kubebuilder:validation:Optional
	filter?: [...#BucketIntelligentTieringConfigurationFilterParameters] @go(Filter,[]BucketIntelligentTieringConfigurationFilterParameters)

	// Unique name used to identify the S3 Intelligent-Tiering configuration for the bucket.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the status of the configuration. Valid values: Enabled, Disabled.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// S3 Intelligent-Tiering storage class tiers of the configuration (documented below).
	// +kubebuilder:validation:Optional
	tiering?: [...#TieringParameters] @go(Tiering,[]TieringParameters)
}

#TieringInitParameters: {
	// S3 Intelligent-Tiering access tier. Valid values: ARCHIVE_ACCESS, DEEP_ARCHIVE_ACCESS.
	accessTier?: null | string @go(AccessTier,*string)

	// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
	days?: null | float64 @go(Days,*float64)
}

#TieringObservation: {
	// S3 Intelligent-Tiering access tier. Valid values: ARCHIVE_ACCESS, DEEP_ARCHIVE_ACCESS.
	accessTier?: null | string @go(AccessTier,*string)

	// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
	days?: null | float64 @go(Days,*float64)
}

#TieringParameters: {
	// S3 Intelligent-Tiering access tier. Valid values: ARCHIVE_ACCESS, DEEP_ARCHIVE_ACCESS.
	// +kubebuilder:validation:Optional
	accessTier?: null | string @go(AccessTier,*string)

	// Number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier.
	// +kubebuilder:validation:Optional
	days?: null | float64 @go(Days,*float64)
}

// BucketIntelligentTieringConfigurationSpec defines the desired state of BucketIntelligentTieringConfiguration
#BucketIntelligentTieringConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #BucketIntelligentTieringConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketIntelligentTieringConfigurationInitParameters @go(InitProvider)
}

// BucketIntelligentTieringConfigurationStatus defines the observed state of BucketIntelligentTieringConfiguration.
#BucketIntelligentTieringConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketIntelligentTieringConfigurationObservation @go(AtProvider)
}

// BucketIntelligentTieringConfiguration is the Schema for the BucketIntelligentTieringConfigurations API. Provides an S3 Intelligent-Tiering configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketIntelligentTieringConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tiering) || (has(self.initProvider) && has(self.initProvider.tiering))",message="spec.forProvider.tiering is a required parameter"
	spec:    #BucketIntelligentTieringConfigurationSpec   @go(Spec)
	status?: #BucketIntelligentTieringConfigurationStatus @go(Status)
}

// BucketIntelligentTieringConfigurationList contains a list of BucketIntelligentTieringConfigurations
#BucketIntelligentTieringConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketIntelligentTieringConfiguration] @go(Items,[]BucketIntelligentTieringConfiguration)
}
