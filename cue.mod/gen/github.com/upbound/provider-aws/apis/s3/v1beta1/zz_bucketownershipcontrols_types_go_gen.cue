// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketOwnershipControlsInitParameters: {
	// Name of the bucket that you want to associate this access point with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Configuration block(s) with Ownership Controls rules. Detailed below.
	rule?: [...#BucketOwnershipControlsRuleInitParameters] @go(Rule,[]BucketOwnershipControlsRuleInitParameters)
}

#BucketOwnershipControlsObservation: {
	// Name of the bucket that you want to associate this access point with.
	bucket?: null | string @go(Bucket,*string)

	// S3 Bucket name.
	id?: null | string @go(ID,*string)

	// Configuration block(s) with Ownership Controls rules. Detailed below.
	rule?: [...#BucketOwnershipControlsRuleObservation] @go(Rule,[]BucketOwnershipControlsRuleObservation)
}

#BucketOwnershipControlsParameters: {
	// Name of the bucket that you want to associate this access point with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration block(s) with Ownership Controls rules. Detailed below.
	// +kubebuilder:validation:Optional
	rule?: [...#BucketOwnershipControlsRuleParameters] @go(Rule,[]BucketOwnershipControlsRuleParameters)
}

#BucketOwnershipControlsRuleInitParameters: {
	// Object ownership. Valid values: BucketOwnerPreferred, ObjectWriter or BucketOwnerEnforced
	objectOwnership?: null | string @go(ObjectOwnership,*string)
}

#BucketOwnershipControlsRuleObservation: {
	// Object ownership. Valid values: BucketOwnerPreferred, ObjectWriter or BucketOwnerEnforced
	objectOwnership?: null | string @go(ObjectOwnership,*string)
}

#BucketOwnershipControlsRuleParameters: {
	// Object ownership. Valid values: BucketOwnerPreferred, ObjectWriter or BucketOwnerEnforced
	// +kubebuilder:validation:Optional
	objectOwnership?: null | string @go(ObjectOwnership,*string)
}

// BucketOwnershipControlsSpec defines the desired state of BucketOwnershipControls
#BucketOwnershipControlsSpec: {
	v1.#ResourceSpec
	forProvider: #BucketOwnershipControlsParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketOwnershipControlsInitParameters @go(InitProvider)
}

// BucketOwnershipControlsStatus defines the observed state of BucketOwnershipControls.
#BucketOwnershipControlsStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketOwnershipControlsObservation @go(AtProvider)
}

// BucketOwnershipControls is the Schema for the BucketOwnershipControlss API. Manages S3 Bucket Ownership Controls.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketOwnershipControls: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	spec:    #BucketOwnershipControlsSpec   @go(Spec)
	status?: #BucketOwnershipControlsStatus @go(Status)
}

// BucketOwnershipControlsList contains a list of BucketOwnershipControlss
#BucketOwnershipControlsList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketOwnershipControls] @go(Items,[]BucketOwnershipControls)
}
