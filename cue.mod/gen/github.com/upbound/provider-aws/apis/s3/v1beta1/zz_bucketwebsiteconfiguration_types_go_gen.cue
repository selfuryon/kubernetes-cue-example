// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BucketWebsiteConfigurationInitParameters: {
	// Name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Name of the error document for the website. See below.
	errorDocument?: [...#ErrorDocumentInitParameters] @go(ErrorDocument,[]ErrorDocumentInitParameters)

	// Account ID of the expected bucket owner.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Name of the index document for the website. See below.
	indexDocument?: [...#IndexDocumentInitParameters] @go(IndexDocument,[]IndexDocumentInitParameters)

	// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
	redirectAllRequestsTo?: [...#RedirectAllRequestsToInitParameters] @go(RedirectAllRequestsTo,[]RedirectAllRequestsToInitParameters)

	// List of rules that define when a redirect is applied and the redirect behavior. See below.
	routingRule?: [...#RoutingRuleInitParameters] @go(RoutingRule,[]RoutingRuleInitParameters)

	// JSON array containing routing rules
	// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
	routingRules?: null | string @go(RoutingRules,*string)
}

#BucketWebsiteConfigurationObservation: {
	// Name of the bucket.
	bucket?: null | string @go(Bucket,*string)

	// Name of the error document for the website. See below.
	errorDocument?: [...#ErrorDocumentObservation] @go(ErrorDocument,[]ErrorDocumentObservation)

	// Account ID of the expected bucket owner.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// The bucket or bucket and expected_bucket_owner separated by a comma (,) if the latter is provided.
	id?: null | string @go(ID,*string)

	// Name of the index document for the website. See below.
	indexDocument?: [...#IndexDocumentObservation] @go(IndexDocument,[]IndexDocumentObservation)

	// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
	redirectAllRequestsTo?: [...#RedirectAllRequestsToObservation] @go(RedirectAllRequestsTo,[]RedirectAllRequestsToObservation)

	// List of rules that define when a redirect is applied and the redirect behavior. See below.
	routingRule?: [...#RoutingRuleObservation] @go(RoutingRule,[]RoutingRuleObservation)

	// JSON array containing routing rules
	// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
	routingRules?: null | string @go(RoutingRules,*string)

	// Domain of the website endpoint. This is used to create Route 53 alias records.
	websiteDomain?: null | string @go(WebsiteDomain,*string)

	// Website endpoint.
	websiteEndpoint?: null | string @go(WebsiteEndpoint,*string)
}

#BucketWebsiteConfigurationParameters: {
	// Name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in s3 to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// Name of the error document for the website. See below.
	// +kubebuilder:validation:Optional
	errorDocument?: [...#ErrorDocumentParameters] @go(ErrorDocument,[]ErrorDocumentParameters)

	// Account ID of the expected bucket owner.
	// +kubebuilder:validation:Optional
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Name of the index document for the website. See below.
	// +kubebuilder:validation:Optional
	indexDocument?: [...#IndexDocumentParameters] @go(IndexDocument,[]IndexDocumentParameters)

	// Redirect behavior for every request to this bucket's website endpoint. See below. Conflicts with error_document, index_document, and routing_rule.
	// +kubebuilder:validation:Optional
	redirectAllRequestsTo?: [...#RedirectAllRequestsToParameters] @go(RedirectAllRequestsTo,[]RedirectAllRequestsToParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// List of rules that define when a redirect is applied and the redirect behavior. See below.
	// +kubebuilder:validation:Optional
	routingRule?: [...#RoutingRuleParameters] @go(RoutingRule,[]RoutingRuleParameters)

	// JSON array containing routing rules
	// describing redirect behavior and when redirects are applied. Use this parameter when your routing rules contain empty String values ("") as seen in the example above.
	// +kubebuilder:validation:Optional
	routingRules?: null | string @go(RoutingRules,*string)
}

#ConditionInitParameters: {
	// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
	httpErrorCodeReturnedEquals?: null | string @go(HTTPErrorCodeReturnedEquals,*string)

	// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
	keyPrefixEquals?: null | string @go(KeyPrefixEquals,*string)
}

#ConditionObservation: {
	// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
	httpErrorCodeReturnedEquals?: null | string @go(HTTPErrorCodeReturnedEquals,*string)

	// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
	keyPrefixEquals?: null | string @go(KeyPrefixEquals,*string)
}

#ConditionParameters: {
	// HTTP error code when the redirect is applied. If specified with key_prefix_equals, then both must be true for the redirect to be applied.
	// +kubebuilder:validation:Optional
	httpErrorCodeReturnedEquals?: null | string @go(HTTPErrorCodeReturnedEquals,*string)

	// Object key name prefix when the redirect is applied. If specified with http_error_code_returned_equals, then both must be true for the redirect to be applied.
	// +kubebuilder:validation:Optional
	keyPrefixEquals?: null | string @go(KeyPrefixEquals,*string)
}

#ErrorDocumentInitParameters: {
	// Object key name to use when a 4XX class error occurs.
	key?: null | string @go(Key,*string)
}

#ErrorDocumentObservation: {
	// Object key name to use when a 4XX class error occurs.
	key?: null | string @go(Key,*string)
}

#ErrorDocumentParameters: {
	// Object key name to use when a 4XX class error occurs.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#IndexDocumentInitParameters: {
	// Suffix that is appended to a request that is for a directory on the website endpoint.
	// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
	// The suffix must not be empty and must not include a slash character.
	suffix?: null | string @go(Suffix,*string)
}

#IndexDocumentObservation: {
	// Suffix that is appended to a request that is for a directory on the website endpoint.
	// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
	// The suffix must not be empty and must not include a slash character.
	suffix?: null | string @go(Suffix,*string)
}

#IndexDocumentParameters: {
	// Suffix that is appended to a request that is for a directory on the website endpoint.
	// For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.
	// The suffix must not be empty and must not include a slash character.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#RedirectAllRequestsToInitParameters: {
	// Name of the host where requests are redirected.
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	protocol?: null | string @go(Protocol,*string)
}

#RedirectAllRequestsToObservation: {
	// Name of the host where requests are redirected.
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	protocol?: null | string @go(Protocol,*string)
}

#RedirectAllRequestsToParameters: {
	// Name of the host where requests are redirected.
	// +kubebuilder:validation:Optional
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#RedirectInitParameters: {
	// HTTP redirect code to use on the response.
	httpRedirectCode?: null | string @go(HTTPRedirectCode,*string)

	// Name of the host where requests are redirected.
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	protocol?: null | string @go(Protocol,*string)

	// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
	replaceKeyPrefixWith?: null | string @go(ReplaceKeyPrefixWith,*string)

	// Specific object key to use in the redirect request. For example, redirect request to error.html.
	replaceKeyWith?: null | string @go(ReplaceKeyWith,*string)
}

#RedirectObservation: {
	// HTTP redirect code to use on the response.
	httpRedirectCode?: null | string @go(HTTPRedirectCode,*string)

	// Name of the host where requests are redirected.
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	protocol?: null | string @go(Protocol,*string)

	// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
	replaceKeyPrefixWith?: null | string @go(ReplaceKeyPrefixWith,*string)

	// Specific object key to use in the redirect request. For example, redirect request to error.html.
	replaceKeyWith?: null | string @go(ReplaceKeyWith,*string)
}

#RedirectParameters: {
	// HTTP redirect code to use on the response.
	// +kubebuilder:validation:Optional
	httpRedirectCode?: null | string @go(HTTPRedirectCode,*string)

	// Name of the host where requests are redirected.
	// +kubebuilder:validation:Optional
	hostName?: null | string @go(HostName,*string)

	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request. Valid values: http, https.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with key_prefix_equals set to docs/ and in the redirect set replace_key_prefix_with to /documents.
	// +kubebuilder:validation:Optional
	replaceKeyPrefixWith?: null | string @go(ReplaceKeyPrefixWith,*string)

	// Specific object key to use in the redirect request. For example, redirect request to error.html.
	// +kubebuilder:validation:Optional
	replaceKeyWith?: null | string @go(ReplaceKeyWith,*string)
}

#RoutingRuleInitParameters: {
	// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
	condition?: [...#ConditionInitParameters] @go(Condition,[]ConditionInitParameters)

	// Configuration block for redirect information. See below.
	redirect?: [...#RedirectInitParameters] @go(Redirect,[]RedirectInitParameters)
}

#RoutingRuleObservation: {
	// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
	condition?: [...#ConditionObservation] @go(Condition,[]ConditionObservation)

	// Configuration block for redirect information. See below.
	redirect?: [...#RedirectObservation] @go(Redirect,[]RedirectObservation)
}

#RoutingRuleParameters: {
	// Configuration block for describing a condition that must be met for the specified redirect to apply. See below.
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// Configuration block for redirect information. See below.
	// +kubebuilder:validation:Optional
	redirect: [...#RedirectParameters] @go(Redirect,[]RedirectParameters)
}

// BucketWebsiteConfigurationSpec defines the desired state of BucketWebsiteConfiguration
#BucketWebsiteConfigurationSpec: {
	v1.#ResourceSpec
	forProvider: #BucketWebsiteConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BucketWebsiteConfigurationInitParameters @go(InitProvider)
}

// BucketWebsiteConfigurationStatus defines the observed state of BucketWebsiteConfiguration.
#BucketWebsiteConfigurationStatus: {
	v1.#ResourceStatus
	atProvider?: #BucketWebsiteConfigurationObservation @go(AtProvider)
}

// BucketWebsiteConfiguration is the Schema for the BucketWebsiteConfigurations API. Provides an S3 bucket website configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketWebsiteConfiguration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                @go(ObjectMeta)
	spec:      #BucketWebsiteConfigurationSpec   @go(Spec)
	status?:   #BucketWebsiteConfigurationStatus @go(Status)
}

// BucketWebsiteConfigurationList contains a list of BucketWebsiteConfigurations
#BucketWebsiteConfigurationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BucketWebsiteConfiguration] @go(Items,[]BucketWebsiteConfiguration)
}
