// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GroupMembershipInitParameters: {
	// –  The IAM Group name to attach the list of users to
	// +crossplane:generate:reference:type=Group
	group?: null | string @go(Group,*string)

	// Reference to a Group to populate group.
	// +kubebuilder:validation:Optional
	groupRef?: null | v1.#Reference @go(GroupRef,*v1.Reference)

	// Selector for a Group to populate group.
	// +kubebuilder:validation:Optional
	groupSelector?: null | v1.#Selector @go(GroupSelector,*v1.Selector)

	// The name to identify the Group Membership
	name?: null | string @go(Name,*string)

	// References to User to populate users.
	// +kubebuilder:validation:Optional
	userRefs?: [...v1.#Reference] @go(UserRefs,[]v1.Reference)

	// Selector for a list of User to populate users.
	// +kubebuilder:validation:Optional
	userSelector?: null | v1.#Selector @go(UserSelector,*v1.Selector)

	// A list of IAM User names to associate with the Group
	// +crossplane:generate:reference:type=User
	// +crossplane:generate:reference:refFieldName=UserRefs
	// +crossplane:generate:reference:selectorFieldName=UserSelector
	// +listType=set
	users?: [...null | string] @go(Users,[]*string)
}

#GroupMembershipObservation: {
	// –  The IAM Group name to attach the list of users to
	group?: null | string @go(Group,*string)
	id?:    null | string @go(ID,*string)

	// The name to identify the Group Membership
	name?: null | string @go(Name,*string)

	// A list of IAM User names to associate with the Group
	// +listType=set
	users?: [...null | string] @go(Users,[]*string)
}

#GroupMembershipParameters: {
	// –  The IAM Group name to attach the list of users to
	// +crossplane:generate:reference:type=Group
	// +kubebuilder:validation:Optional
	group?: null | string @go(Group,*string)

	// Reference to a Group to populate group.
	// +kubebuilder:validation:Optional
	groupRef?: null | v1.#Reference @go(GroupRef,*v1.Reference)

	// Selector for a Group to populate group.
	// +kubebuilder:validation:Optional
	groupSelector?: null | v1.#Selector @go(GroupSelector,*v1.Selector)

	// The name to identify the Group Membership
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// References to User to populate users.
	// +kubebuilder:validation:Optional
	userRefs?: [...v1.#Reference] @go(UserRefs,[]v1.Reference)

	// Selector for a list of User to populate users.
	// +kubebuilder:validation:Optional
	userSelector?: null | v1.#Selector @go(UserSelector,*v1.Selector)

	// A list of IAM User names to associate with the Group
	// +crossplane:generate:reference:type=User
	// +crossplane:generate:reference:refFieldName=UserRefs
	// +crossplane:generate:reference:selectorFieldName=UserSelector
	// +kubebuilder:validation:Optional
	// +listType=set
	users?: [...null | string] @go(Users,[]*string)
}

// GroupMembershipSpec defines the desired state of GroupMembership
#GroupMembershipSpec: {
	v1.#ResourceSpec
	forProvider: #GroupMembershipParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GroupMembershipInitParameters @go(InitProvider)
}

// GroupMembershipStatus defines the observed state of GroupMembership.
#GroupMembershipStatus: {
	v1.#ResourceStatus
	atProvider?: #GroupMembershipObservation @go(AtProvider)
}

// GroupMembership is the Schema for the GroupMemberships API. Provides a top level resource to manage IAM Group membership for IAM Users.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GroupMembership: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #GroupMembershipSpec   @go(Spec)
	status?: #GroupMembershipStatus @go(Status)
}

// GroupMembershipList contains a list of GroupMemberships
#GroupMembershipList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GroupMembership] @go(Items,[]GroupMembership)
}
