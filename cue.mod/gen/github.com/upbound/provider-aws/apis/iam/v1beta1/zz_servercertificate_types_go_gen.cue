// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ServerCertificateInitParameters: {
	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// encoded public key certificates
	// of the chain.
	certificateChain?: null | string @go(CertificateChain,*string)

	// The IAM path for the server certificate.  If it is not
	// included, it defaults to a slash (/). If this certificate is for use with
	// AWS CloudFront, the path must be in format /cloudfront/your_path_here.
	// See IAM Identifiers for more details on IAM Paths.
	path?: null | string @go(Path,*string)

	// Key-value map of resource tags.
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ServerCertificateObservation: {
	// The Amazon Resource Name (ARN) specifying the server certificate.
	arn?: null | string @go(Arn,*string)

	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// encoded public key certificates
	// of the chain.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Date and time in RFC3339 format on which the certificate is set to expire.
	expiration?: null | string @go(Expiration,*string)

	// The unique Server Certificate name
	id?: null | string @go(ID,*string)

	// The IAM path for the server certificate.  If it is not
	// included, it defaults to a slash (/). If this certificate is for use with
	// AWS CloudFront, the path must be in format /cloudfront/your_path_here.
	// See IAM Identifiers for more details on IAM Paths.
	path?: null | string @go(Path,*string)

	// Key-value map of resource tags.
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	// +mapType=granular
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Date and time in RFC3339 format when the server certificate was uploaded.
	uploadDate?: null | string @go(UploadDate,*string)
}

#ServerCertificateParameters: {
	// encoded format.
	// +kubebuilder:validation:Optional
	certificateBody?: null | string @go(CertificateBody,*string)

	// encoded public key certificates
	// of the chain.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)

	// The IAM path for the server certificate.  If it is not
	// included, it defaults to a slash (/). If this certificate is for use with
	// AWS CloudFront, the path must be in format /cloudfront/your_path_here.
	// See IAM Identifiers for more details on IAM Paths.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// encoded format.
	// +kubebuilder:validation:Optional
	privateKeySecretRef: v1.#SecretKeySelector @go(PrivateKeySecretRef)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ServerCertificateSpec defines the desired state of ServerCertificate
#ServerCertificateSpec: {
	v1.#ResourceSpec
	forProvider: #ServerCertificateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServerCertificateInitParameters @go(InitProvider)
}

// ServerCertificateStatus defines the observed state of ServerCertificate.
#ServerCertificateStatus: {
	v1.#ResourceStatus
	atProvider?: #ServerCertificateObservation @go(AtProvider)
}

// ServerCertificate is the Schema for the ServerCertificates API. Provides an IAM Server Certificate
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ServerCertificate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateBody) || (has(self.initProvider) && has(self.initProvider.certificateBody))",message="spec.forProvider.certificateBody is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateKeySecretRef)",message="spec.forProvider.privateKeySecretRef is a required parameter"
	spec:    #ServerCertificateSpec   @go(Spec)
	status?: #ServerCertificateStatus @go(Status)
}

// ServerCertificateList contains a list of ServerCertificates
#ServerCertificateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ServerCertificate] @go(Items,[]ServerCertificate)
}
