// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RolePolicyInitParameters: {
	// The inline policy document. This is a JSON formatted string
	policy?: null | string @go(Policy,*string)
}

#RolePolicyObservation: {
	// The role policy ID, in the form of role_name:role_policy_name.
	id?: null | string @go(ID,*string)

	// The inline policy document. This is a JSON formatted string
	policy?: null | string @go(Policy,*string)

	// The name of the IAM role to attach to the policy.
	role?: null | string @go(Role,*string)
}

#RolePolicyParameters: {
	// The inline policy document. This is a JSON formatted string
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// The name of the IAM role to attach to the policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// Reference to a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	roleRef?: null | v1.#Reference @go(RoleRef,*v1.Reference)

	// Selector for a Role in iam to populate role.
	// +kubebuilder:validation:Optional
	roleSelector?: null | v1.#Selector @go(RoleSelector,*v1.Selector)
}

// RolePolicySpec defines the desired state of RolePolicy
#RolePolicySpec: {
	v1.#ResourceSpec
	forProvider: #RolePolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RolePolicyInitParameters @go(InitProvider)
}

// RolePolicyStatus defines the observed state of RolePolicy.
#RolePolicyStatus: {
	v1.#ResourceStatus
	atProvider?: #RolePolicyObservation @go(AtProvider)
}

// RolePolicy is the Schema for the RolePolicys API. Provides an IAM role policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RolePolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	spec:    #RolePolicySpec   @go(Spec)
	status?: #RolePolicyStatus @go(Status)
}

// RolePolicyList contains a list of RolePolicys
#RolePolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RolePolicy] @go(Items,[]RolePolicy)
}
