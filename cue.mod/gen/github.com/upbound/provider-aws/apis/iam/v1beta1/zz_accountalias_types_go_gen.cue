// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AccountAliasInitParameters: {
}

#AccountAliasObservation: {
	id?: null | string @go(ID,*string)
}

#AccountAliasParameters: {
}

// AccountAliasSpec defines the desired state of AccountAlias
#AccountAliasSpec: {
	v1.#ResourceSpec
	forProvider: #AccountAliasParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AccountAliasInitParameters @go(InitProvider)
}

// AccountAliasStatus defines the observed state of AccountAlias.
#AccountAliasStatus: {
	v1.#ResourceStatus
	atProvider?: #AccountAliasObservation @go(AtProvider)
}

// AccountAlias is the Schema for the AccountAliass API. Manages the account alias for the AWS Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AccountAlias: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #AccountAliasSpec   @go(Spec)
	status?:   #AccountAliasStatus @go(Status)
}

// AccountAliasList contains a list of AccountAliass
#AccountAliasList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AccountAlias] @go(Items,[]AccountAlias)
}
