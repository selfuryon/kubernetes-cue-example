// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SigningCertificateInitParameters: {
	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// –   The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
	status?: null | string @go(Status,*string)

	// –  The name of the user the signing certificate is for.
	userName?: null | string @go(UserName,*string)
}

#SigningCertificateObservation: {
	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// The ID for the signing certificate.
	certificateId?: null | string @go(CertificateID,*string)

	// The certificate_id:user_name
	id?: null | string @go(ID,*string)

	// –   The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
	status?: null | string @go(Status,*string)

	// –  The name of the user the signing certificate is for.
	userName?: null | string @go(UserName,*string)
}

#SigningCertificateParameters: {
	// encoded format.
	// +kubebuilder:validation:Optional
	certificateBody?: null | string @go(CertificateBody,*string)

	// –   The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// –  The name of the user the signing certificate is for.
	// +kubebuilder:validation:Optional
	userName?: null | string @go(UserName,*string)
}

// SigningCertificateSpec defines the desired state of SigningCertificate
#SigningCertificateSpec: {
	v1.#ResourceSpec
	forProvider: #SigningCertificateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SigningCertificateInitParameters @go(InitProvider)
}

// SigningCertificateStatus defines the observed state of SigningCertificate.
#SigningCertificateStatus: {
	v1.#ResourceStatus
	atProvider?: #SigningCertificateObservation @go(AtProvider)
}

// SigningCertificate is the Schema for the SigningCertificates API. Provides an IAM Signing Certificate
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SigningCertificate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateBody) || (has(self.initProvider) && has(self.initProvider.certificateBody))",message="spec.forProvider.certificateBody is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	spec:    #SigningCertificateSpec   @go(Spec)
	status?: #SigningCertificateStatus @go(Status)
}

// SigningCertificateList contains a list of SigningCertificates
#SigningCertificateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SigningCertificate] @go(Items,[]SigningCertificate)
}
