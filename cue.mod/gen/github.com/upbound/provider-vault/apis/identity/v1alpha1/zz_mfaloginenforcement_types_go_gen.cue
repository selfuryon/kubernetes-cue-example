// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MfaLoginEnforcementInitParameters: {
	// Set of auth method accessor IDs.
	// Set of auth method accessor IDs.
	authMethodAccessors?: [...null | string] @go(AuthMethodAccessors,[]*string)

	// Set of auth method types.
	// Set of auth method types.
	authMethodTypes?: [...null | string] @go(AuthMethodTypes,[]*string)

	// Set of identity entity IDs.
	// Set of identity entity IDs.
	identityEntityIds?: [...null | string] @go(IdentityEntityIds,[]*string)

	// Set of identity group IDs.
	// Set of identity group IDs.
	identityGroupIds?: [...null | string] @go(IdentityGroupIds,[]*string)

	// Set of MFA method UUIDs.
	// Set of MFA method UUIDs.
	mfaMethodIds?: [...null | string] @go(MfaMethodIds,[]*string)

	// Login enforcement name.
	// Login enforcement name.
	name?: null | string @go(Name,*string)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)
}

#MfaLoginEnforcementObservation: {
	// Set of auth method accessor IDs.
	// Set of auth method accessor IDs.
	authMethodAccessors?: [...null | string] @go(AuthMethodAccessors,[]*string)

	// Set of auth method types.
	// Set of auth method types.
	authMethodTypes?: [...null | string] @go(AuthMethodTypes,[]*string)
	id?: null | string @go(ID,*string)

	// Set of identity entity IDs.
	// Set of identity entity IDs.
	identityEntityIds?: [...null | string] @go(IdentityEntityIds,[]*string)

	// Set of identity group IDs.
	// Set of identity group IDs.
	identityGroupIds?: [...null | string] @go(IdentityGroupIds,[]*string)

	// Set of MFA method UUIDs.
	// Set of MFA method UUIDs.
	mfaMethodIds?: [...null | string] @go(MfaMethodIds,[]*string)

	// Login enforcement name.
	// Login enforcement name.
	name?: null | string @go(Name,*string)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Method's namespace ID.
	// Method's namespace ID.
	namespaceId?: null | string @go(NamespaceID,*string)

	// Method's namespace path.
	// Method's namespace path.
	namespacePath?: null | string @go(NamespacePath,*string)

	// Resource UUID.
	// Resource UUID.
	uuid?: null | string @go(UUID,*string)
}

#MfaLoginEnforcementParameters: {
	// Set of auth method accessor IDs.
	// Set of auth method accessor IDs.
	// +kubebuilder:validation:Optional
	authMethodAccessors?: [...null | string] @go(AuthMethodAccessors,[]*string)

	// Set of auth method types.
	// Set of auth method types.
	// +kubebuilder:validation:Optional
	authMethodTypes?: [...null | string] @go(AuthMethodTypes,[]*string)

	// Set of identity entity IDs.
	// Set of identity entity IDs.
	// +kubebuilder:validation:Optional
	identityEntityIds?: [...null | string] @go(IdentityEntityIds,[]*string)

	// Set of identity group IDs.
	// Set of identity group IDs.
	// +kubebuilder:validation:Optional
	identityGroupIds?: [...null | string] @go(IdentityGroupIds,[]*string)

	// Set of MFA method UUIDs.
	// Set of MFA method UUIDs.
	// +kubebuilder:validation:Optional
	mfaMethodIds?: [...null | string] @go(MfaMethodIds,[]*string)

	// Login enforcement name.
	// Login enforcement name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)
}

// MfaLoginEnforcementSpec defines the desired state of MfaLoginEnforcement
#MfaLoginEnforcementSpec: {
	v1.#ResourceSpec
	forProvider: #MfaLoginEnforcementParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MfaLoginEnforcementInitParameters @go(InitProvider)
}

// MfaLoginEnforcementStatus defines the observed state of MfaLoginEnforcement.
#MfaLoginEnforcementStatus: {
	v1.#ResourceStatus
	atProvider?: #MfaLoginEnforcementObservation @go(AtProvider)
}

// MfaLoginEnforcement is the Schema for the MfaLoginEnforcements API. Resource for configuring MFA login-enforcement
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#MfaLoginEnforcement: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mfaMethodIds) || has(self.initProvider.mfaMethodIds)",message="mfaMethodIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #MfaLoginEnforcementSpec   @go(Spec)
	status?: #MfaLoginEnforcementStatus @go(Status)
}

// MfaLoginEnforcementList contains a list of MfaLoginEnforcements
#MfaLoginEnforcementList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MfaLoginEnforcement] @go(Items,[]MfaLoginEnforcement)
}
