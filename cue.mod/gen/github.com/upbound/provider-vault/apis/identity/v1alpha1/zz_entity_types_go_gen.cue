// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#EntityInitParameters: {
	// True/false Is this entity currently disabled. Defaults to false
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	disabled?: null | bool @go(Disabled,*bool)

	// false by default. If set to true, this resource will ignore any policies return from Vault or specified in the resource. You can use vault_identity_entity_policies to manage policies for this entity in a decoupled manner.
	// Manage policies externally through `vault_identity_entity_policies`.
	externalPolicies?: null | bool @go(ExternalPolicies,*bool)

	// A Map of additional metadata to associate with the user.
	// Metadata to be associated with the entity.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// Name of the identity entity to create.
	// Name of the entity.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// A list of policies to apply to the entity.
	// Policies to be tied to the entity.
	policies?: [...null | string] @go(Policies,[]*string)
}

#EntityObservation: {
	// True/false Is this entity currently disabled. Defaults to false
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	disabled?: null | bool @go(Disabled,*bool)

	// false by default. If set to true, this resource will ignore any policies return from Vault or specified in the resource. You can use vault_identity_entity_policies to manage policies for this entity in a decoupled manner.
	// Manage policies externally through `vault_identity_entity_policies`.
	externalPolicies?: null | bool @go(ExternalPolicies,*bool)

	// The id of the created entity.
	id?: null | string @go(ID,*string)

	// A Map of additional metadata to associate with the user.
	// Metadata to be associated with the entity.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// Name of the identity entity to create.
	// Name of the entity.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// A list of policies to apply to the entity.
	// Policies to be tied to the entity.
	policies?: [...null | string] @go(Policies,[]*string)
}

#EntityParameters: {
	// True/false Is this entity currently disabled. Defaults to false
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// false by default. If set to true, this resource will ignore any policies return from Vault or specified in the resource. You can use vault_identity_entity_policies to manage policies for this entity in a decoupled manner.
	// Manage policies externally through `vault_identity_entity_policies`.
	// +kubebuilder:validation:Optional
	externalPolicies?: null | bool @go(ExternalPolicies,*bool)

	// A Map of additional metadata to associate with the user.
	// Metadata to be associated with the entity.
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// Name of the identity entity to create.
	// Name of the entity.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// A list of policies to apply to the entity.
	// Policies to be tied to the entity.
	// +kubebuilder:validation:Optional
	policies?: [...null | string] @go(Policies,[]*string)
}

// EntitySpec defines the desired state of Entity
#EntitySpec: {
	v1.#ResourceSpec
	forProvider: #EntityParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EntityInitParameters @go(InitProvider)
}

// EntityStatus defines the observed state of Entity.
#EntityStatus: {
	v1.#ResourceStatus
	atProvider?: #EntityObservation @go(AtProvider)
}

// Entity is the Schema for the Entitys API. Creates an Identity Entity for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#Entity: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #EntitySpec        @go(Spec)
	status?:   #EntityStatus      @go(Status)
}

// EntityList contains a list of Entitys
#EntityList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Entity] @go(Items,[]Entity)
}
