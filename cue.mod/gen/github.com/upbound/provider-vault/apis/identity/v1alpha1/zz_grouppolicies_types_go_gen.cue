// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GroupPoliciesInitParameters: {
	// Defaults to true.
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	exclusive?: null | bool @go(Exclusive,*bool)

	// Group ID to assign policies to.
	// ID of the group.
	groupId?: null | string @go(GroupID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of policies to assign to the group
	// Policies to be tied to the group.
	policies?: [...null | string] @go(Policies,[]*string)
}

#GroupPoliciesObservation: {
	// Defaults to true.
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	exclusive?: null | bool @go(Exclusive,*bool)

	// Group ID to assign policies to.
	// ID of the group.
	groupId?: null | string @go(GroupID,*string)

	// The name of the group that are assigned the policies.
	// Name of the group.
	groupName?: null | string @go(GroupName,*string)
	id?:        null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of policies to assign to the group
	// Policies to be tied to the group.
	policies?: [...null | string] @go(Policies,[]*string)
}

#GroupPoliciesParameters: {
	// Defaults to true.
	// Should the resource manage policies exclusively? Beware of race conditions when disabling exclusive management
	// +kubebuilder:validation:Optional
	exclusive?: null | bool @go(Exclusive,*bool)

	// Group ID to assign policies to.
	// ID of the group.
	// +kubebuilder:validation:Optional
	groupId?: null | string @go(GroupID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// List of policies to assign to the group
	// Policies to be tied to the group.
	// +kubebuilder:validation:Optional
	policies?: [...null | string] @go(Policies,[]*string)
}

// GroupPoliciesSpec defines the desired state of GroupPolicies
#GroupPoliciesSpec: {
	v1.#ResourceSpec
	forProvider: #GroupPoliciesParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GroupPoliciesInitParameters @go(InitProvider)
}

// GroupPoliciesStatus defines the observed state of GroupPolicies.
#GroupPoliciesStatus: {
	v1.#ResourceStatus
	atProvider?: #GroupPoliciesObservation @go(AtProvider)
}

// GroupPolicies is the Schema for the GroupPoliciess API. Manages policies for an Identity Group for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#GroupPolicies: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || has(self.initProvider.groupId)",message="groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policies) || has(self.initProvider.policies)",message="policies is a required parameter"
	spec:    #GroupPoliciesSpec   @go(Spec)
	status?: #GroupPoliciesStatus @go(Status)
}

// GroupPoliciesList contains a list of GroupPoliciess
#GroupPoliciesList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GroupPolicies] @go(Items,[]GroupPolicies)
}
