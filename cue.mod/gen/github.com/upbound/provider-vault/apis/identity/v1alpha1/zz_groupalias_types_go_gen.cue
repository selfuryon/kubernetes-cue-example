// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GroupAliasInitParameters: {
	// ID of the group to which this is an alias.
	// ID of the group to which this is an alias.
	canonicalId?: null | string @go(CanonicalID,*string)

	// Mount accessor of the authentication backend to which this alias belongs to.
	// Mount accessor to which this alias belongs to.
	mountAccessor?: null | string @go(MountAccessor,*string)

	// Name of the group alias to create.
	// Name of the group alias.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)
}

#GroupAliasObservation: {
	// ID of the group to which this is an alias.
	// ID of the group to which this is an alias.
	canonicalId?: null | string @go(CanonicalID,*string)

	// The id of the created group alias.
	id?: null | string @go(ID,*string)

	// Mount accessor of the authentication backend to which this alias belongs to.
	// Mount accessor to which this alias belongs to.
	mountAccessor?: null | string @go(MountAccessor,*string)

	// Name of the group alias to create.
	// Name of the group alias.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)
}

#GroupAliasParameters: {
	// ID of the group to which this is an alias.
	// ID of the group to which this is an alias.
	// +kubebuilder:validation:Optional
	canonicalId?: null | string @go(CanonicalID,*string)

	// Mount accessor of the authentication backend to which this alias belongs to.
	// Mount accessor to which this alias belongs to.
	// +kubebuilder:validation:Optional
	mountAccessor?: null | string @go(MountAccessor,*string)

	// Name of the group alias to create.
	// Name of the group alias.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)
}

// GroupAliasSpec defines the desired state of GroupAlias
#GroupAliasSpec: {
	v1.#ResourceSpec
	forProvider: #GroupAliasParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GroupAliasInitParameters @go(InitProvider)
}

// GroupAliasStatus defines the observed state of GroupAlias.
#GroupAliasStatus: {
	v1.#ResourceStatus
	atProvider?: #GroupAliasObservation @go(AtProvider)
}

// GroupAlias is the Schema for the GroupAliass API. Creates an Identity Group Alias for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#GroupAlias: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.canonicalId) || has(self.initProvider.canonicalId)",message="canonicalId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mountAccessor) || has(self.initProvider.mountAccessor)",message="mountAccessor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #GroupAliasSpec   @go(Spec)
	status?: #GroupAliasStatus @go(Status)
}

// GroupAliasList contains a list of GroupAliass
#GroupAliasList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GroupAlias] @go(Items,[]GroupAlias)
}
