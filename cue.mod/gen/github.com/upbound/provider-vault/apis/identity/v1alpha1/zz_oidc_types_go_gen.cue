// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OidcInitParameters: {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components, but no query or fragment components.
	issuer?: null | string @go(Issuer,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)
}

#OidcObservation: {
	id?: null | string @go(ID,*string)

	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components, but no query or fragment components.
	issuer?: null | string @go(Issuer,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)
}

#OidcParameters: {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's api_addr will be used. The issuer is a case sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components, but no query or fragment components.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)
}

// OidcSpec defines the desired state of Oidc
#OidcSpec: {
	v1.#ResourceSpec
	forProvider: #OidcParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #OidcInitParameters @go(InitProvider)
}

// OidcStatus defines the observed state of Oidc.
#OidcStatus: {
	v1.#ResourceStatus
	atProvider?: #OidcObservation @go(AtProvider)
}

// Oidc is the Schema for the Oidcs API. Configure the Identity Tokens Backend for Vault
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#Oidc: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #OidcSpec          @go(Spec)
	status?:   #OidcStatus        @go(Status)
}

// OidcList contains a list of Oidcs
#OidcList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Oidc] @go(Items,[]Oidc)
}
