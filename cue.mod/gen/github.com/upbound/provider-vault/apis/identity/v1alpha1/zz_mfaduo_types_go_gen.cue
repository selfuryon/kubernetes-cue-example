// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MfaDuoInitParameters: {
	// API hostname for Duo
	// API hostname for Duo
	apiHostname?: null | string @go(APIHostname,*string)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Push information for Duo.
	// Push information for Duo.
	pushInfo?: null | string @go(PushInfo,*string)

	// Require passcode upon MFA validation.
	// Require passcode upon MFA validation.
	usePasscode?: null | bool @go(UsePasscode,*bool)

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	usernameFormat?: null | string @go(UsernameFormat,*string)
}

#MfaDuoObservation: {
	// API hostname for Duo
	// API hostname for Duo
	apiHostname?: null | string @go(APIHostname,*string)
	id?:          null | string @go(ID,*string)

	// Method ID.
	// Method ID.
	methodId?: null | string @go(MethodID,*string)

	// Mount accessor.
	// Mount accessor.
	mountAccessor?: null | string @go(MountAccessor,*string)

	// Method name.
	name?: null | string @go(Name,*string)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Method's namespace ID.
	// Method's namespace ID.
	namespaceId?: null | string @go(NamespaceID,*string)

	// Method's namespace path.
	// Method's namespace path.
	namespacePath?: null | string @go(NamespacePath,*string)

	// Push information for Duo.
	// Push information for Duo.
	pushInfo?: null | string @go(PushInfo,*string)

	// MFA type.
	// MFA type.
	type?: null | string @go(Type,*string)

	// Resource UUID.
	// Resource UUID.
	uuid?: null | string @go(UUID,*string)

	// Require passcode upon MFA validation.
	// Require passcode upon MFA validation.
	usePasscode?: null | bool @go(UsePasscode,*bool)

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	usernameFormat?: null | string @go(UsernameFormat,*string)
}

#MfaDuoParameters: {
	// API hostname for Duo
	// API hostname for Duo
	// +kubebuilder:validation:Optional
	apiHostname?: null | string @go(APIHostname,*string)

	// Integration key for Duo
	// Integration key for Duo
	// +kubebuilder:validation:Optional
	integrationKeySecretRef: v1.#SecretKeySelector @go(IntegrationKeySecretRef)

	// Target namespace. (requires Enterprise)
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Push information for Duo.
	// Push information for Duo.
	// +kubebuilder:validation:Optional
	pushInfo?: null | string @go(PushInfo,*string)

	// Secret key for Duo
	// Secret key for Duo
	// +kubebuilder:validation:Optional
	secretKeySecretRef: v1.#SecretKeySelector @go(SecretKeySecretRef)

	// Require passcode upon MFA validation.
	// Require passcode upon MFA validation.
	// +kubebuilder:validation:Optional
	usePasscode?: null | bool @go(UsePasscode,*bool)

	// A template string for mapping Identity names to MFA methods.
	// A template string for mapping Identity names to MFA methods.
	// +kubebuilder:validation:Optional
	usernameFormat?: null | string @go(UsernameFormat,*string)
}

// MfaDuoSpec defines the desired state of MfaDuo
#MfaDuoSpec: {
	v1.#ResourceSpec
	forProvider: #MfaDuoParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MfaDuoInitParameters @go(InitProvider)
}

// MfaDuoStatus defines the observed state of MfaDuo.
#MfaDuoStatus: {
	v1.#ResourceStatus
	atProvider?: #MfaDuoObservation @go(AtProvider)
}

// MfaDuo is the Schema for the MfaDuos API. Resource for configuring the duo MFA method.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#MfaDuo: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiHostname) || has(self.initProvider.apiHostname)",message="apiHostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.integrationKeySecretRef)",message="integrationKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretKeySecretRef)",message="secretKeySecretRef is a required parameter"
	spec:    #MfaDuoSpec   @go(Spec)
	status?: #MfaDuoStatus @go(Status)
}

// MfaDuoList contains a list of MfaDuos
#MfaDuoList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#MfaDuo] @go(Items,[]MfaDuo)
}
