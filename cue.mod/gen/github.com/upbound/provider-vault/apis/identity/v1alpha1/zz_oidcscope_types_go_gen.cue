// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/identity/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OidcScopeInitParameters: {
	// A description of the scope.
	// The scope's description.
	description?: null | string @go(Description,*string)

	// The name of the scope. The openid scope name is reserved.
	// The name of the scope. The openid scope name is reserved.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	template?: null | string @go(Template,*string)
}

#OidcScopeObservation: {
	// A description of the scope.
	// The scope's description.
	description?: null | string @go(Description,*string)
	id?:          null | string @go(ID,*string)

	// The name of the scope. The openid scope name is reserved.
	// The name of the scope. The openid scope name is reserved.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	template?: null | string @go(Template,*string)
}

#OidcScopeParameters: {
	// A description of the scope.
	// The scope's description.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the scope. The openid scope name is reserved.
	// The name of the scope. The openid scope name is reserved.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	// The template string for the scope. This may be provided as escaped JSON or base64 encoded JSON.
	// +kubebuilder:validation:Optional
	template?: null | string @go(Template,*string)
}

// OidcScopeSpec defines the desired state of OidcScope
#OidcScopeSpec: {
	v1.#ResourceSpec
	forProvider: #OidcScopeParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #OidcScopeInitParameters @go(InitProvider)
}

// OidcScopeStatus defines the observed state of OidcScope.
#OidcScopeStatus: {
	v1.#ResourceStatus
	atProvider?: #OidcScopeObservation @go(AtProvider)
}

// OidcScope is the Schema for the OidcScopes API. Provision OIDC Scopes in Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#OidcScope: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #OidcScopeSpec   @go(Spec)
	status?: #OidcScopeStatus @go(Status)
}

// OidcScopeList contains a list of OidcScopes
#OidcScopeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#OidcScope] @go(Items,[]OidcScope)
}
