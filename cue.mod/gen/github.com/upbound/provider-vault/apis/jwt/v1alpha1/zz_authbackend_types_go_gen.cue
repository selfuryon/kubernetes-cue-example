// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/jwt/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendInitParameters: {
	// The value against which to match the iss claim in a JWT
	// The value against which to match the iss claim in a JWT
	boundIssuer?: null | string @go(BoundIssuer,*string)

	// The default role to use if none is provided during login
	// The default role to use if none is provided during login
	defaultRole?: null | string @go(DefaultRole,*string)

	// The description of the auth backend
	// The description of the auth backend
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	jwksCaPem?: null | string @go(JwksCAPem,*string)

	// JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys".
	// JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
	jwksUrl?: null | string @go(JwksURL,*string)

	// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
	// A list of supported signing algorithms. Defaults to [RS256]
	jwtSupportedAlgs?: [...null | string] @go(JwtSupportedAlgs,[]*string)

	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url
	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
	jwtValidationPubkeys?: [...null | string] @go(JwtValidationPubkeys,[]*string)

	// Specifies if the auth method is local only.
	// Specifies if the auth method is local only
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
	namespaceInState?: null | bool @go(NamespaceInState,*bool)

	// Client ID used for OIDC backends
	// Client ID used for OIDC
	oidcClientId?: null | string @go(OidcClientID,*string)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	oidcDiscoveryCaPem?: null | string @go(OidcDiscoveryCAPem,*string)

	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys
	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
	oidcDiscoveryUrl?: null | string @go(OidcDiscoveryURL,*string)

	// The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false.
	// The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
	oidcResponseMode?: null | string @go(OidcResponseMode,*string)

	// List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post.
	// The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
	oidcResponseTypes?: [...null | string] @go(OidcResponseTypes,[]*string)

	// Path to mount the JWT/OIDC auth backend
	// path to mount the backend
	path?: null | string @go(Path,*string)

	// Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
	// Provider specific handling configuration
	providerConfig?: {[string]: null | string} @go(ProviderConfig,map[string]*string)
	tune?: [...#TuneInitParameters] @go(Tune,[]TuneInitParameters)

	// Type of auth backend. Should be one of jwt or oidc. Default - jwt
	// Type of backend. Can be either 'jwt' or 'oidc'
	type?: null | string @go(Type,*string)
}

#AuthBackendObservation: {
	// The accessor for this auth method
	// The accessor of the JWT auth backend
	accessor?: null | string @go(Accessor,*string)

	// The value against which to match the iss claim in a JWT
	// The value against which to match the iss claim in a JWT
	boundIssuer?: null | string @go(BoundIssuer,*string)

	// The default role to use if none is provided during login
	// The default role to use if none is provided during login
	defaultRole?: null | string @go(DefaultRole,*string)

	// The description of the auth backend
	// The description of the auth backend
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool   @go(DisableRemount,*bool)
	id?:             null | string @go(ID,*string)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	jwksCaPem?: null | string @go(JwksCAPem,*string)

	// JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys".
	// JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
	jwksUrl?: null | string @go(JwksURL,*string)

	// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
	// A list of supported signing algorithms. Defaults to [RS256]
	jwtSupportedAlgs?: [...null | string] @go(JwtSupportedAlgs,[]*string)

	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url
	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
	jwtValidationPubkeys?: [...null | string] @go(JwtValidationPubkeys,[]*string)

	// Specifies if the auth method is local only.
	// Specifies if the auth method is local only
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
	namespaceInState?: null | bool @go(NamespaceInState,*bool)

	// Client ID used for OIDC backends
	// Client ID used for OIDC
	oidcClientId?: null | string @go(OidcClientID,*string)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	oidcDiscoveryCaPem?: null | string @go(OidcDiscoveryCAPem,*string)

	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys
	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
	oidcDiscoveryUrl?: null | string @go(OidcDiscoveryURL,*string)

	// The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false.
	// The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
	oidcResponseMode?: null | string @go(OidcResponseMode,*string)

	// List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post.
	// The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
	oidcResponseTypes?: [...null | string] @go(OidcResponseTypes,[]*string)

	// Path to mount the JWT/OIDC auth backend
	// path to mount the backend
	path?: null | string @go(Path,*string)

	// Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
	// Provider specific handling configuration
	providerConfig?: {[string]: null | string} @go(ProviderConfig,map[string]*string)
	tune?: [...#TuneObservation] @go(Tune,[]TuneObservation)

	// Type of auth backend. Should be one of jwt or oidc. Default - jwt
	// Type of backend. Can be either 'jwt' or 'oidc'
	type?: null | string @go(Type,*string)
}

#AuthBackendParameters: {
	// The value against which to match the iss claim in a JWT
	// The value against which to match the iss claim in a JWT
	// +kubebuilder:validation:Optional
	boundIssuer?: null | string @go(BoundIssuer,*string)

	// The default role to use if none is provided during login
	// The default role to use if none is provided during login
	// +kubebuilder:validation:Optional
	defaultRole?: null | string @go(DefaultRole,*string)

	// The description of the auth backend
	// The description of the auth backend
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	// +kubebuilder:validation:Optional
	jwksCaPem?: null | string @go(JwksCAPem,*string)

	// JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys".
	// JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
	// +kubebuilder:validation:Optional
	jwksUrl?: null | string @go(JwksURL,*string)

	// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
	// A list of supported signing algorithms. Defaults to [RS256]
	// +kubebuilder:validation:Optional
	jwtSupportedAlgs?: [...null | string] @go(JwtSupportedAlgs,[]*string)

	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url
	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
	// +kubebuilder:validation:Optional
	jwtValidationPubkeys?: [...null | string] @go(JwtValidationPubkeys,[]*string)

	// Specifies if the auth method is local only.
	// Specifies if the auth method is local only
	// +kubebuilder:validation:Optional
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs
	// Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
	// +kubebuilder:validation:Optional
	namespaceInState?: null | bool @go(NamespaceInState,*bool)

	// Client ID used for OIDC backends
	// Client ID used for OIDC
	// +kubebuilder:validation:Optional
	oidcClientId?: null | string @go(OidcClientID,*string)

	// Client Secret used for OIDC backends
	// Client Secret used for OIDC
	// +kubebuilder:validation:Optional
	oidcClientSecretSecretRef?: null | v1.#SecretKeySelector @go(OidcClientSecretSecretRef,*v1.SecretKeySelector)

	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	// +kubebuilder:validation:Optional
	oidcDiscoveryCaPem?: null | string @go(OidcDiscoveryCAPem,*string)

	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys
	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
	// +kubebuilder:validation:Optional
	oidcDiscoveryUrl?: null | string @go(OidcDiscoveryURL,*string)

	// The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false.
	// The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
	// +kubebuilder:validation:Optional
	oidcResponseMode?: null | string @go(OidcResponseMode,*string)

	// List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post.
	// The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
	// +kubebuilder:validation:Optional
	oidcResponseTypes?: [...null | string] @go(OidcResponseTypes,[]*string)

	// Path to mount the JWT/OIDC auth backend
	// path to mount the backend
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault.
	// Provider specific handling configuration
	// +kubebuilder:validation:Optional
	providerConfig?: {[string]: null | string} @go(ProviderConfig,map[string]*string)

	// +kubebuilder:validation:Optional
	tune?: [...#TuneParameters] @go(Tune,[]TuneParameters)

	// Type of auth backend. Should be one of jwt or oidc. Default - jwt
	// Type of backend. Can be either 'jwt' or 'oidc'
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#TuneInitParameters: {
	// List of headers to whitelist and allowing
	// a plugin to include them in the response.
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the request data object.
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the response data object.
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Specifies the default time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	defaultLeaseTtl?: null | string @go(DefaultLeaseTTL,*string)

	// Specifies whether to show this mount in
	// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
	listingVisibility?: null | string @go(ListingVisibility,*string)

	// Specifies the maximum time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	maxLeaseTtl?: null | string @go(MaxLeaseTTL,*string)

	// List of headers to whitelist and
	// pass from the request to the backend.
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// Specifies the type of tokens that should be returned by
	// the mount. Valid values are "default-service", "default-batch", "service", "batch".
	tokenType?: null | string @go(TokenType,*string)
}

#TuneObservation: {
	// List of headers to whitelist and allowing
	// a plugin to include them in the response.
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the request data object.
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the response data object.
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Specifies the default time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	defaultLeaseTtl?: null | string @go(DefaultLeaseTTL,*string)

	// Specifies whether to show this mount in
	// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
	listingVisibility?: null | string @go(ListingVisibility,*string)

	// Specifies the maximum time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	maxLeaseTtl?: null | string @go(MaxLeaseTTL,*string)

	// List of headers to whitelist and
	// pass from the request to the backend.
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// Specifies the type of tokens that should be returned by
	// the mount. Valid values are "default-service", "default-batch", "service", "batch".
	tokenType?: null | string @go(TokenType,*string)
}

#TuneParameters: {
	// List of headers to whitelist and allowing
	// a plugin to include them in the response.
	// +kubebuilder:validation:Optional
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the request data object.
	// +kubebuilder:validation:Optional
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will
	// not be HMAC'd by audit devices in the response data object.
	// +kubebuilder:validation:Optional
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Specifies the default time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	// +kubebuilder:validation:Optional
	defaultLeaseTtl?: null | string @go(DefaultLeaseTTL,*string)

	// Specifies whether to show this mount in
	// the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
	// +kubebuilder:validation:Optional
	listingVisibility?: null | string @go(ListingVisibility,*string)

	// Specifies the maximum time-to-live.
	// If set, this overrides the global default.
	// Must be a valid duration string
	// +kubebuilder:validation:Optional
	maxLeaseTtl?: null | string @go(MaxLeaseTTL,*string)

	// List of headers to whitelist and
	// pass from the request to the backend.
	// +kubebuilder:validation:Optional
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// Specifies the type of tokens that should be returned by
	// the mount. Valid values are "default-service", "default-batch", "service", "batch".
	// +kubebuilder:validation:Optional
	tokenType?: null | string @go(TokenType,*string)
}

// AuthBackendSpec defines the desired state of AuthBackend
#AuthBackendSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendInitParameters @go(InitProvider)
}

// AuthBackendStatus defines the observed state of AuthBackend.
#AuthBackendStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendObservation @go(AtProvider)
}

// AuthBackend is the Schema for the AuthBackends API. Managing JWT/OIDC auth backends in Vault
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackend: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #AuthBackendSpec   @go(Spec)
	status?:   #AuthBackendStatus @go(Status)
}

// AuthBackendList contains a list of AuthBackends
#AuthBackendList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackend] @go(Items,[]AuthBackend)
}
