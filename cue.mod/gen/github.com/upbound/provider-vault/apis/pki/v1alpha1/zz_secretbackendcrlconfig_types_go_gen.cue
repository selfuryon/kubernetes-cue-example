// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/pki/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretBackendCrlConfigInitParameters: {
	// Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+
	// Enables or disables periodic rebuilding of the CRL upon expiry.
	autoRebuild?: null | bool @go(AutoRebuild,*bool)

	// Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+
	// Grace period before CRL expiry to attempt rebuild of CRL.
	autoRebuildGracePeriod?: null | string @go(AutoRebuildGracePeriod,*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// Enable cross-cluster revocation request queues. Vault 1.13+
	// Enable cross-cluster revocation request queues.
	crossClusterRevocation?: null | bool @go(CrossClusterRevocation,*bool)

	// Interval to check for new revocations on, to regenerate the delta CRL.
	// Interval to check for new revocations on, to regenerate the delta CRL.
	deltaRebuildInterval?: null | string @go(DeltaRebuildInterval,*string)

	// Disables or enables CRL building.
	// Disables or enables CRL building
	disable?: null | bool @go(Disable,*bool)

	// Enables building of delta CRLs with up-to-date revocation information,
	// augmenting the last complete CRL.  Vault 1.12+
	// Enables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.
	enableDelta?: null | bool @go(EnableDelta,*bool)

	// Specifies the time until expiration.
	// Specifies the time until expiration.
	expiry?: null | string @go(Expiry,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Disables the OCSP responder in Vault. Vault 1.12+
	// Disables or enables the OCSP responder in Vault.
	ocspDisable?: null | bool @go(OcspDisable,*bool)

	// The amount of time an OCSP response can be cached for, useful for OCSP stapling
	// refresh durations. Vault 1.12+
	// The amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.
	ocspExpiry?: null | string @go(OcspExpiry,*string)

	// Enables unified CRL and OCSP building. Vault 1.13+
	// Enables unified CRL and OCSP building.
	unifiedCrl?: null | bool @go(UnifiedCrl,*bool)

	// Enables serving the unified CRL and OCSP on the existing, previously
	// cluster-local paths. Vault 1.13+
	// Enables serving the unified CRL and OCSP on the existing, previously cluster-local paths.
	unifiedCrlOnExistingPaths?: null | bool @go(UnifiedCrlOnExistingPaths,*bool)
}

#SecretBackendCrlConfigObservation: {
	// Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+
	// Enables or disables periodic rebuilding of the CRL upon expiry.
	autoRebuild?: null | bool @go(AutoRebuild,*bool)

	// Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+
	// Grace period before CRL expiry to attempt rebuild of CRL.
	autoRebuildGracePeriod?: null | string @go(AutoRebuildGracePeriod,*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// Enable cross-cluster revocation request queues. Vault 1.13+
	// Enable cross-cluster revocation request queues.
	crossClusterRevocation?: null | bool @go(CrossClusterRevocation,*bool)

	// Interval to check for new revocations on, to regenerate the delta CRL.
	// Interval to check for new revocations on, to regenerate the delta CRL.
	deltaRebuildInterval?: null | string @go(DeltaRebuildInterval,*string)

	// Disables or enables CRL building.
	// Disables or enables CRL building
	disable?: null | bool @go(Disable,*bool)

	// Enables building of delta CRLs with up-to-date revocation information,
	// augmenting the last complete CRL.  Vault 1.12+
	// Enables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.
	enableDelta?: null | bool @go(EnableDelta,*bool)

	// Specifies the time until expiration.
	// Specifies the time until expiration.
	expiry?: null | string @go(Expiry,*string)
	id?:     null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Disables the OCSP responder in Vault. Vault 1.12+
	// Disables or enables the OCSP responder in Vault.
	ocspDisable?: null | bool @go(OcspDisable,*bool)

	// The amount of time an OCSP response can be cached for, useful for OCSP stapling
	// refresh durations. Vault 1.12+
	// The amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.
	ocspExpiry?: null | string @go(OcspExpiry,*string)

	// Enables unified CRL and OCSP building. Vault 1.13+
	// Enables unified CRL and OCSP building.
	unifiedCrl?: null | bool @go(UnifiedCrl,*bool)

	// Enables serving the unified CRL and OCSP on the existing, previously
	// cluster-local paths. Vault 1.13+
	// Enables serving the unified CRL and OCSP on the existing, previously cluster-local paths.
	unifiedCrlOnExistingPaths?: null | bool @go(UnifiedCrlOnExistingPaths,*bool)
}

#SecretBackendCrlConfigParameters: {
	// Enables periodic rebuilding of the CRL upon expiry. Vault 1.12+
	// Enables or disables periodic rebuilding of the CRL upon expiry.
	// +kubebuilder:validation:Optional
	autoRebuild?: null | bool @go(AutoRebuild,*bool)

	// Grace period before CRL expiry to attempt rebuild of CRL. Vault 1.12+
	// Grace period before CRL expiry to attempt rebuild of CRL.
	// +kubebuilder:validation:Optional
	autoRebuildGracePeriod?: null | string @go(AutoRebuildGracePeriod,*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// Enable cross-cluster revocation request queues. Vault 1.13+
	// Enable cross-cluster revocation request queues.
	// +kubebuilder:validation:Optional
	crossClusterRevocation?: null | bool @go(CrossClusterRevocation,*bool)

	// Interval to check for new revocations on, to regenerate the delta CRL.
	// Interval to check for new revocations on, to regenerate the delta CRL.
	// +kubebuilder:validation:Optional
	deltaRebuildInterval?: null | string @go(DeltaRebuildInterval,*string)

	// Disables or enables CRL building.
	// Disables or enables CRL building
	// +kubebuilder:validation:Optional
	disable?: null | bool @go(Disable,*bool)

	// Enables building of delta CRLs with up-to-date revocation information,
	// augmenting the last complete CRL.  Vault 1.12+
	// Enables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.
	// +kubebuilder:validation:Optional
	enableDelta?: null | bool @go(EnableDelta,*bool)

	// Specifies the time until expiration.
	// Specifies the time until expiration.
	// +kubebuilder:validation:Optional
	expiry?: null | string @go(Expiry,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Disables the OCSP responder in Vault. Vault 1.12+
	// Disables or enables the OCSP responder in Vault.
	// +kubebuilder:validation:Optional
	ocspDisable?: null | bool @go(OcspDisable,*bool)

	// The amount of time an OCSP response can be cached for, useful for OCSP stapling
	// refresh durations. Vault 1.12+
	// The amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.
	// +kubebuilder:validation:Optional
	ocspExpiry?: null | string @go(OcspExpiry,*string)

	// Enables unified CRL and OCSP building. Vault 1.13+
	// Enables unified CRL and OCSP building.
	// +kubebuilder:validation:Optional
	unifiedCrl?: null | bool @go(UnifiedCrl,*bool)

	// Enables serving the unified CRL and OCSP on the existing, previously
	// cluster-local paths. Vault 1.13+
	// Enables serving the unified CRL and OCSP on the existing, previously cluster-local paths.
	// +kubebuilder:validation:Optional
	unifiedCrlOnExistingPaths?: null | bool @go(UnifiedCrlOnExistingPaths,*bool)
}

// SecretBackendCrlConfigSpec defines the desired state of SecretBackendCrlConfig
#SecretBackendCrlConfigSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendCrlConfigParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendCrlConfigInitParameters @go(InitProvider)
}

// SecretBackendCrlConfigStatus defines the observed state of SecretBackendCrlConfig.
#SecretBackendCrlConfigStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendCrlConfigObservation @go(AtProvider)
}

// SecretBackendCrlConfig is the Schema for the SecretBackendCrlConfigs API. Sets the CRL config on an PKI Secret Backend for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackendCrlConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	spec:    #SecretBackendCrlConfigSpec   @go(Spec)
	status?: #SecretBackendCrlConfigStatus @go(Status)
}

// SecretBackendCrlConfigList contains a list of SecretBackendCrlConfigs
#SecretBackendCrlConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackendCrlConfig] @go(Items,[]SecretBackendCrlConfig)
}
