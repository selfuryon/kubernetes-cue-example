// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/pki/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretBackendSignInitParameters: {
	// List of alternative names
	// List of alternative names.
	altNames?: [...null | string] @go(AltNames,[]*string)

	// If set to true, certs will be renewed if the expiration is within min_seconds_remaining. Default false
	// If enabled, a new certificate will be generated if the expiration is within min_seconds_remaining
	autoRenew?: null | bool @go(AutoRenew,*bool)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// CN of certificate to create
	// CN of intermediate to create.
	commonName?: null | string @go(CommonName,*string)

	// The CSR
	// The CSR.
	csr?: null | string @go(Csr,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The format of data
	// The format of data.
	format?: null | string @go(Format,*string)

	// List of alternative IPs
	// List of alternative IPs.
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
	// Generate a new certificate when the expiration is within this number of seconds
	minSecondsRemaining?: null | float64 @go(MinSecondsRemaining,*float64)

	// Name of the role to create the certificate against
	// Name of the role to create the certificate against.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of other SANs
	// List of other SANs.
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// Time to live
	// Time to live.
	ttl?: null | string @go(TTL,*string)

	// List of alternative URIs
	// List of alternative URIs.
	uriSans?: [...null | string] @go(URISans,[]*string)
}

#SecretBackendSignObservation: {
	// List of alternative names
	// List of alternative names.
	altNames?: [...null | string] @go(AltNames,[]*string)

	// If set to true, certs will be renewed if the expiration is within min_seconds_remaining. Default false
	// If enabled, a new certificate will be generated if the expiration is within min_seconds_remaining
	autoRenew?: null | bool @go(AutoRenew,*bool)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// The CA chain
	// The CA chain.
	caChain?: [...null | string] @go(CAChain,[]*string)

	// The certificate
	// The certicate.
	certificate?: null | string @go(Certificate,*string)

	// CN of certificate to create
	// CN of intermediate to create.
	commonName?: null | string @go(CommonName,*string)

	// The CSR
	// The CSR.
	csr?: null | string @go(Csr,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The expiration date of the certificate in unix epoch format
	// The certificate expiration as a Unix-style timestamp.
	expiration?: null | float64 @go(Expiration,*float64)

	// The format of data
	// The format of data.
	format?: null | string @go(Format,*string)
	id?:     null | string @go(ID,*string)

	// List of alternative IPs
	// List of alternative IPs.
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// The issuing CA
	// The issuing CA.
	issuingCa?: null | string @go(IssuingCA,*string)

	// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
	// Generate a new certificate when the expiration is within this number of seconds
	minSecondsRemaining?: null | float64 @go(MinSecondsRemaining,*float64)

	// Name of the role to create the certificate against
	// Name of the role to create the certificate against.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of other SANs
	// List of other SANs.
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// true if the current time (during refresh) is after the start of the early renewal window declared by min_seconds_remaining, and false otherwise; if auto_renew is set to true then the provider will plan to replace the certificate once renewal is pending.
	// Initially false, and then set to true during refresh once the expiration is less than min_seconds_remaining in the future.
	renewPending?: null | bool @go(RenewPending,*bool)

	// Use serial_number instead.
	// The serial number.
	serial?: null | string @go(Serial,*string)

	// The certificate's serial number, hex formatted.
	// The certificate's serial number, hex formatted.
	serialNumber?: null | string @go(SerialNumber,*string)

	// Time to live
	// Time to live.
	ttl?: null | string @go(TTL,*string)

	// List of alternative URIs
	// List of alternative URIs.
	uriSans?: [...null | string] @go(URISans,[]*string)
}

#SecretBackendSignParameters: {
	// List of alternative names
	// List of alternative names.
	// +kubebuilder:validation:Optional
	altNames?: [...null | string] @go(AltNames,[]*string)

	// If set to true, certs will be renewed if the expiration is within min_seconds_remaining. Default false
	// If enabled, a new certificate will be generated if the expiration is within min_seconds_remaining
	// +kubebuilder:validation:Optional
	autoRenew?: null | bool @go(AutoRenew,*bool)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// CN of certificate to create
	// CN of intermediate to create.
	// +kubebuilder:validation:Optional
	commonName?: null | string @go(CommonName,*string)

	// The CSR
	// The CSR.
	// +kubebuilder:validation:Optional
	csr?: null | string @go(Csr,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	// +kubebuilder:validation:Optional
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The format of data
	// The format of data.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)

	// List of alternative IPs
	// List of alternative IPs.
	// +kubebuilder:validation:Optional
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
	// Generate a new certificate when the expiration is within this number of seconds
	// +kubebuilder:validation:Optional
	minSecondsRemaining?: null | float64 @go(MinSecondsRemaining,*float64)

	// Name of the role to create the certificate against
	// Name of the role to create the certificate against.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// List of other SANs
	// List of other SANs.
	// +kubebuilder:validation:Optional
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// Time to live
	// Time to live.
	// +kubebuilder:validation:Optional
	ttl?: null | string @go(TTL,*string)

	// List of alternative URIs
	// List of alternative URIs.
	// +kubebuilder:validation:Optional
	uriSans?: [...null | string] @go(URISans,[]*string)
}

// SecretBackendSignSpec defines the desired state of SecretBackendSign
#SecretBackendSignSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendSignParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendSignInitParameters @go(InitProvider)
}

// SecretBackendSignStatus defines the observed state of SecretBackendSign.
#SecretBackendSignStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendSignObservation @go(AtProvider)
}

// SecretBackendSign is the Schema for the SecretBackendSigns API. Sign a new certificate based on the CSR by the PKI.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackendSign: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || has(self.initProvider.commonName)",message="commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.csr) || has(self.initProvider.csr)",message="csr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #SecretBackendSignSpec   @go(Spec)
	status?: #SecretBackendSignStatus @go(Status)
}

// SecretBackendSignList contains a list of SecretBackendSigns
#SecretBackendSignList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackendSign] @go(Items,[]SecretBackendSign)
}
