// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/pki/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretBackendRootCertInitParameters: {
	// List of alternative names
	// List of alternative names.
	altNames?: [...null | string] @go(AltNames,[]*string)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// CN of intermediate to create
	// CN of root to create.
	commonName?: null | string @go(CommonName,*string)

	// The country
	// The country.
	country?: null | string @go(Country,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The format of data
	// The format of data.
	format?: null | string @go(Format,*string)

	// List of alternative IPs
	// List of alternative IPs.
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// The number of bits to use
	// The number of bits to use.
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The desired key type
	// The desired key type.
	keyType?: null | string @go(KeyType,*string)

	// The locality
	// The locality.
	locality?: null | string @go(Locality,*string)

	// The ID of the previously configured managed key. This field is
	// required if type is kms and it conflicts with managed_key_name
	// The ID of the previously configured managed key.
	managedKeyId?: null | string @go(ManagedKeyID,*string)

	// The name of the previously configured managed key. This field is
	// required if type is kms  and it conflicts with managed_key_id
	// The name of the previously configured managed key.
	managedKeyName?: null | string @go(ManagedKeyName,*string)

	// The maximum path length to encode in the generated certificate
	// The maximum path length to encode in the generated certificate.
	maxPathLength?: null | float64 @go(MaxPathLength,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The organization
	// The organization.
	organization?: null | string @go(Organization,*string)

	// List of other SANs
	// List of other SANs.
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// The organization unit
	// The organization unit.
	ou?: null | string @go(Ou,*string)

	// List of domains for which certificates are allowed to be issued
	// List of domains for which certificates are allowed to be issued.
	permittedDnsDomains?: [...null | string] @go(PermittedDNSDomains,[]*string)

	// The postal code
	// The postal code.
	postalCode?: null | string @go(PostalCode,*string)

	// The private key format
	// The private key format.
	privateKeyFormat?: null | string @go(PrivateKeyFormat,*string)

	// The province
	// The province.
	province?: null | string @go(Province,*string)

	// The street address
	// The street address.
	streetAddress?: null | string @go(StreetAddress,*string)

	// Time to live
	// Time to live.
	ttl?: null | string @go(TTL,*string)

	// Type of intermediate to create. Must be either "exported", "internal"
	// or "kms"
	// Type of root to create. Must be either "exported" or "internal".
	type?: null | string @go(Type,*string)

	// List of alternative URIs
	// List of alternative URIs.
	uriSans?: [...null | string] @go(URISans,[]*string)
}

#SecretBackendRootCertObservation: {
	// List of alternative names
	// List of alternative names.
	altNames?: [...null | string] @go(AltNames,[]*string)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// The certificate.
	// The certificate.
	certificate?: null | string @go(Certificate,*string)

	// CN of intermediate to create
	// CN of root to create.
	commonName?: null | string @go(CommonName,*string)

	// The country
	// The country.
	country?: null | string @go(Country,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The format of data
	// The format of data.
	format?: null | string @go(Format,*string)
	id?:     null | string @go(ID,*string)

	// List of alternative IPs
	// List of alternative IPs.
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// The issuing CA certificate.
	// The issuing CA.
	issuingCa?: null | string @go(IssuingCA,*string)

	// The number of bits to use
	// The number of bits to use.
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The desired key type
	// The desired key type.
	keyType?: null | string @go(KeyType,*string)

	// The locality
	// The locality.
	locality?: null | string @go(Locality,*string)

	// The ID of the previously configured managed key. This field is
	// required if type is kms and it conflicts with managed_key_name
	// The ID of the previously configured managed key.
	managedKeyId?: null | string @go(ManagedKeyID,*string)

	// The name of the previously configured managed key. This field is
	// required if type is kms  and it conflicts with managed_key_id
	// The name of the previously configured managed key.
	managedKeyName?: null | string @go(ManagedKeyName,*string)

	// The maximum path length to encode in the generated certificate
	// The maximum path length to encode in the generated certificate.
	maxPathLength?: null | float64 @go(MaxPathLength,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The organization
	// The organization.
	organization?: null | string @go(Organization,*string)

	// List of other SANs
	// List of other SANs.
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// The organization unit
	// The organization unit.
	ou?: null | string @go(Ou,*string)

	// List of domains for which certificates are allowed to be issued
	// List of domains for which certificates are allowed to be issued.
	permittedDnsDomains?: [...null | string] @go(PermittedDNSDomains,[]*string)

	// The postal code
	// The postal code.
	postalCode?: null | string @go(PostalCode,*string)

	// The private key format
	// The private key format.
	privateKeyFormat?: null | string @go(PrivateKeyFormat,*string)

	// The province
	// The province.
	province?: null | string @go(Province,*string)

	// Deprecated, use serial_number instead.
	// The serial number.
	serial?: null | string @go(Serial,*string)

	// The certificate's serial number, hex formatted.
	// The certificate's serial number, hex formatted.
	serialNumber?: null | string @go(SerialNumber,*string)

	// The street address
	// The street address.
	streetAddress?: null | string @go(StreetAddress,*string)

	// Time to live
	// Time to live.
	ttl?: null | string @go(TTL,*string)

	// Type of intermediate to create. Must be either "exported", "internal"
	// or "kms"
	// Type of root to create. Must be either "exported" or "internal".
	type?: null | string @go(Type,*string)

	// List of alternative URIs
	// List of alternative URIs.
	uriSans?: [...null | string] @go(URISans,[]*string)
}

#SecretBackendRootCertParameters: {
	// List of alternative names
	// List of alternative names.
	// +kubebuilder:validation:Optional
	altNames?: [...null | string] @go(AltNames,[]*string)

	// The PKI secret backend the resource belongs to.
	// The PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// CN of intermediate to create
	// CN of root to create.
	// +kubebuilder:validation:Optional
	commonName?: null | string @go(CommonName,*string)

	// The country
	// The country.
	// +kubebuilder:validation:Optional
	country?: null | string @go(Country,*string)

	// Flag to exclude CN from SANs
	// Flag to exclude CN from SANs.
	// +kubebuilder:validation:Optional
	excludeCnFromSans?: null | bool @go(ExcludeCnFromSans,*bool)

	// The format of data
	// The format of data.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)

	// List of alternative IPs
	// List of alternative IPs.
	// +kubebuilder:validation:Optional
	ipSans?: [...null | string] @go(IPSans,[]*string)

	// The number of bits to use
	// The number of bits to use.
	// +kubebuilder:validation:Optional
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The desired key type
	// The desired key type.
	// +kubebuilder:validation:Optional
	keyType?: null | string @go(KeyType,*string)

	// The locality
	// The locality.
	// +kubebuilder:validation:Optional
	locality?: null | string @go(Locality,*string)

	// The ID of the previously configured managed key. This field is
	// required if type is kms and it conflicts with managed_key_name
	// The ID of the previously configured managed key.
	// +kubebuilder:validation:Optional
	managedKeyId?: null | string @go(ManagedKeyID,*string)

	// The name of the previously configured managed key. This field is
	// required if type is kms  and it conflicts with managed_key_id
	// The name of the previously configured managed key.
	// +kubebuilder:validation:Optional
	managedKeyName?: null | string @go(ManagedKeyName,*string)

	// The maximum path length to encode in the generated certificate
	// The maximum path length to encode in the generated certificate.
	// +kubebuilder:validation:Optional
	maxPathLength?: null | float64 @go(MaxPathLength,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The organization
	// The organization.
	// +kubebuilder:validation:Optional
	organization?: null | string @go(Organization,*string)

	// List of other SANs
	// List of other SANs.
	// +kubebuilder:validation:Optional
	otherSans?: [...null | string] @go(OtherSans,[]*string)

	// The organization unit
	// The organization unit.
	// +kubebuilder:validation:Optional
	ou?: null | string @go(Ou,*string)

	// List of domains for which certificates are allowed to be issued
	// List of domains for which certificates are allowed to be issued.
	// +kubebuilder:validation:Optional
	permittedDnsDomains?: [...null | string] @go(PermittedDNSDomains,[]*string)

	// The postal code
	// The postal code.
	// +kubebuilder:validation:Optional
	postalCode?: null | string @go(PostalCode,*string)

	// The private key format
	// The private key format.
	// +kubebuilder:validation:Optional
	privateKeyFormat?: null | string @go(PrivateKeyFormat,*string)

	// The province
	// The province.
	// +kubebuilder:validation:Optional
	province?: null | string @go(Province,*string)

	// The street address
	// The street address.
	// +kubebuilder:validation:Optional
	streetAddress?: null | string @go(StreetAddress,*string)

	// Time to live
	// Time to live.
	// +kubebuilder:validation:Optional
	ttl?: null | string @go(TTL,*string)

	// Type of intermediate to create. Must be either "exported", "internal"
	// or "kms"
	// Type of root to create. Must be either "exported" or "internal".
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// List of alternative URIs
	// List of alternative URIs.
	// +kubebuilder:validation:Optional
	uriSans?: [...null | string] @go(URISans,[]*string)
}

// SecretBackendRootCertSpec defines the desired state of SecretBackendRootCert
#SecretBackendRootCertSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendRootCertParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendRootCertInitParameters @go(InitProvider)
}

// SecretBackendRootCertStatus defines the observed state of SecretBackendRootCert.
#SecretBackendRootCertStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendRootCertObservation @go(AtProvider)
}

// SecretBackendRootCert is the Schema for the SecretBackendRootCerts API. Generate root.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackendRootCert: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || has(self.initProvider.commonName)",message="commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	spec:    #SecretBackendRootCertSpec   @go(Spec)
	status?: #SecretBackendRootCertStatus @go(Status)
}

// SecretBackendRootCertList contains a list of SecretBackendRootCerts
#SecretBackendRootCertList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackendRootCert] @go(Items,[]SecretBackendRootCert)
}
