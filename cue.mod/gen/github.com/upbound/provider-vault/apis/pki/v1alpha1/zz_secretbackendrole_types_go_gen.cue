// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/pki/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#PolicyIdentifierInitParameters: {
	// The URL of the CPS for the policy identifier
	// Optional CPS URL
	cps?: null | string @go(Cps,*string)

	// A notice for the policy identifier
	// Optional notice
	notice?: null | string @go(Notice,*string)

	// The OID for the policy identifier
	// OID
	oid?: null | string @go(Oid,*string)
}

#PolicyIdentifierObservation: {
	// The URL of the CPS for the policy identifier
	// Optional CPS URL
	cps?: null | string @go(Cps,*string)

	// A notice for the policy identifier
	// Optional notice
	notice?: null | string @go(Notice,*string)

	// The OID for the policy identifier
	// OID
	oid?: null | string @go(Oid,*string)
}

#PolicyIdentifierParameters: {
	// The URL of the CPS for the policy identifier
	// Optional CPS URL
	// +kubebuilder:validation:Optional
	cps?: null | string @go(Cps,*string)

	// A notice for the policy identifier
	// Optional notice
	// +kubebuilder:validation:Optional
	notice?: null | string @go(Notice,*string)

	// The OID for the policy identifier
	// OID
	// +kubebuilder:validation:Optional
	oid?: null | string @go(Oid,*string)
}

#SecretBackendRoleInitParameters: {
	// Flag to allow any name
	// Flag to allow any name
	allowAnyName?: null | bool @go(AllowAnyName,*bool)

	// Flag to allow certificates matching the actual domain
	// Flag to allow certificates matching the actual domain.
	allowBareDomains?: null | bool @go(AllowBareDomains,*bool)

	// Flag to allow names containing glob patterns.
	// Flag to allow names containing glob patterns.
	allowGlobDomains?: null | bool @go(AllowGlobDomains,*bool)

	// Flag to allow IP SANs
	// Flag to allow IP SANs
	allowIpSans?: null | bool @go(AllowIPSans,*bool)

	// Flag to allow certificates for localhost
	// Flag to allow certificates for localhost.
	allowLocalhost?: null | bool @go(AllowLocalhost,*bool)

	// Flag to allow certificates matching subdomains
	// Flag to allow certificates matching subdomains.
	allowSubdomains?: null | bool @go(AllowSubdomains,*bool)

	// List of allowed domains for certificates
	// The domains of the role.
	allowedDomains?: [...null | string] @go(AllowedDomains,[]*string)

	// Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.<mount accessor>.name}}.
	// Flag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.<mount accessor>.name}})
	allowedDomainsTemplate?: null | bool @go(AllowedDomainsTemplate,*bool)

	// Defines allowed custom SANs
	// Defines allowed custom SANs
	allowedOtherSans?: [...null | string] @go(AllowedOtherSans,[]*string)

	// An array of allowed serial numbers to put in Subject
	// Defines allowed Subject serial numbers.
	allowedSerialNumbers?: [...null | string] @go(AllowedSerialNumbers,[]*string)

	// Defines allowed URI SANs
	// Defines allowed URI SANs
	allowedUriSans?: [...null | string] @go(AllowedURISans,[]*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// Flag to mark basic constraints valid when issuing non-CA certificates
	// Flag to mark basic constraints valid when issuing non-CA certificates.
	basicConstraintsValidForNonCa?: null | bool @go(BasicConstraintsValidForNonCA,*bool)

	// Flag to specify certificates for client use
	// Flag to specify certificates for client use.
	clientFlag?: null | bool @go(ClientFlag,*bool)

	// Flag to specify certificates for code signing use
	// Flag to specify certificates for code signing use.
	codeSigningFlag?: null | bool @go(CodeSigningFlag,*bool)

	// The country of generated certificates
	// The country of generated certificates.
	country?: [...null | string] @go(Country,[]*string)

	// Flag to specify certificates for email protection use
	// Flag to specify certificates for email protection use.
	emailProtectionFlag?: null | bool @go(EmailProtectionFlag,*bool)

	// Flag to allow only valid host names
	// Flag to allow only valid host names
	enforceHostnames?: null | bool @go(EnforceHostnames,*bool)

	// Specify the allowed extended key usage constraint on issued certificates
	// Specify the allowed extended key usage constraint on issued certificates.
	extKeyUsage?: [...null | string] @go(ExtKeyUsage,[]*string)

	// Flag to generate leases with certificates
	// Flag to generate leases with certificates.
	generateLease?: null | bool @go(GenerateLease,*bool)

	// The number of bits of generated keys
	// The number of bits of generated keys.
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The generated key type, choices: rsa, ec, ed25519, any
	// Defaults to rsa
	// The generated key type.
	keyType?: null | string @go(KeyType,*string)

	// Specify the allowed key usage constraint on issued certificates
	// Specify the allowed key usage constraint on issued certificates.
	keyUsage?: [...null | string] @go(KeyUsage,[]*string)

	// The locality of generated certificates
	// The locality of generated certificates.
	locality?: [...null | string] @go(Locality,[]*string)

	// The maximum lease TTL, in seconds, for the role.
	// The maximum TTL.
	maxTtl?: null | string @go(MaxTTL,*string)

	// The name to identify this role within the backend. Must be unique within the backend.
	// Unique name for the role.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Flag to not store certificates in the storage backend
	// Flag to not store certificates in the storage backend.
	noStore?: null | bool @go(NoStore,*bool)

	// Specifies the duration by which to backdate the NotBefore property.
	// Specifies the duration by which to backdate the NotBefore property.
	notBeforeDuration?: null | string @go(NotBeforeDuration,*string)

	// The organization of generated certificates
	// The organization of generated certificates.
	organization?: [...null | string] @go(Organization,[]*string)

	// The organization unit of generated certificates
	// The organization unit of generated certificates.
	ou?: [...null | string] @go(Ou,[]*string)

	// (Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:
	// Policy identifier block; can only be used with Vault 1.11+
	policyIdentifier?: [...#PolicyIdentifierInitParameters] @go(PolicyIdentifier,[]PolicyIdentifierInitParameters)

	// Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead
	// Specify the list of allowed policies OIDs.
	policyIdentifiers?: [...null | string] @go(PolicyIdentifiers,[]*string)

	// The postal code of generated certificates
	// The postal code of generated certificates.
	postalCode?: [...null | string] @go(PostalCode,[]*string)

	// The province of generated certificates
	// The province of generated certificates.
	province?: [...null | string] @go(Province,[]*string)

	// Flag to force CN usage
	// Flag to force CN usage.
	requireCn?: null | bool @go(RequireCn,*bool)

	// Flag to specify certificates for server use
	// Flag to specify certificates for server use.
	serverFlag?: null | bool @go(ServerFlag,*bool)

	// The street address of generated certificates
	// The street address of generated certificates.
	streetAddress?: [...null | string] @go(StreetAddress,[]*string)

	// The TTL, in seconds, for any certificate issued against this role.
	// The TTL.
	ttl?: null | string @go(TTL,*string)

	// Flag to use the CN in the CSR
	// Flag to use the CN in the CSR.
	useCsrCommonName?: null | bool @go(UseCsrCommonName,*bool)

	// Flag to use the SANs in the CSR
	// Flag to use the SANs in the CSR.
	useCsrSans?: null | bool @go(UseCsrSans,*bool)
}

#SecretBackendRoleObservation: {
	// Flag to allow any name
	// Flag to allow any name
	allowAnyName?: null | bool @go(AllowAnyName,*bool)

	// Flag to allow certificates matching the actual domain
	// Flag to allow certificates matching the actual domain.
	allowBareDomains?: null | bool @go(AllowBareDomains,*bool)

	// Flag to allow names containing glob patterns.
	// Flag to allow names containing glob patterns.
	allowGlobDomains?: null | bool @go(AllowGlobDomains,*bool)

	// Flag to allow IP SANs
	// Flag to allow IP SANs
	allowIpSans?: null | bool @go(AllowIPSans,*bool)

	// Flag to allow certificates for localhost
	// Flag to allow certificates for localhost.
	allowLocalhost?: null | bool @go(AllowLocalhost,*bool)

	// Flag to allow certificates matching subdomains
	// Flag to allow certificates matching subdomains.
	allowSubdomains?: null | bool @go(AllowSubdomains,*bool)

	// List of allowed domains for certificates
	// The domains of the role.
	allowedDomains?: [...null | string] @go(AllowedDomains,[]*string)

	// Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.<mount accessor>.name}}.
	// Flag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.<mount accessor>.name}})
	allowedDomainsTemplate?: null | bool @go(AllowedDomainsTemplate,*bool)

	// Defines allowed custom SANs
	// Defines allowed custom SANs
	allowedOtherSans?: [...null | string] @go(AllowedOtherSans,[]*string)

	// An array of allowed serial numbers to put in Subject
	// Defines allowed Subject serial numbers.
	allowedSerialNumbers?: [...null | string] @go(AllowedSerialNumbers,[]*string)

	// Defines allowed URI SANs
	// Defines allowed URI SANs
	allowedUriSans?: [...null | string] @go(AllowedURISans,[]*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	backend?: null | string @go(Backend,*string)

	// Flag to mark basic constraints valid when issuing non-CA certificates
	// Flag to mark basic constraints valid when issuing non-CA certificates.
	basicConstraintsValidForNonCa?: null | bool @go(BasicConstraintsValidForNonCA,*bool)

	// Flag to specify certificates for client use
	// Flag to specify certificates for client use.
	clientFlag?: null | bool @go(ClientFlag,*bool)

	// Flag to specify certificates for code signing use
	// Flag to specify certificates for code signing use.
	codeSigningFlag?: null | bool @go(CodeSigningFlag,*bool)

	// The country of generated certificates
	// The country of generated certificates.
	country?: [...null | string] @go(Country,[]*string)

	// Flag to specify certificates for email protection use
	// Flag to specify certificates for email protection use.
	emailProtectionFlag?: null | bool @go(EmailProtectionFlag,*bool)

	// Flag to allow only valid host names
	// Flag to allow only valid host names
	enforceHostnames?: null | bool @go(EnforceHostnames,*bool)

	// Specify the allowed extended key usage constraint on issued certificates
	// Specify the allowed extended key usage constraint on issued certificates.
	extKeyUsage?: [...null | string] @go(ExtKeyUsage,[]*string)

	// Flag to generate leases with certificates
	// Flag to generate leases with certificates.
	generateLease?: null | bool   @go(GenerateLease,*bool)
	id?:            null | string @go(ID,*string)

	// The number of bits of generated keys
	// The number of bits of generated keys.
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The generated key type, choices: rsa, ec, ed25519, any
	// Defaults to rsa
	// The generated key type.
	keyType?: null | string @go(KeyType,*string)

	// Specify the allowed key usage constraint on issued certificates
	// Specify the allowed key usage constraint on issued certificates.
	keyUsage?: [...null | string] @go(KeyUsage,[]*string)

	// The locality of generated certificates
	// The locality of generated certificates.
	locality?: [...null | string] @go(Locality,[]*string)

	// The maximum lease TTL, in seconds, for the role.
	// The maximum TTL.
	maxTtl?: null | string @go(MaxTTL,*string)

	// The name to identify this role within the backend. Must be unique within the backend.
	// Unique name for the role.
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Flag to not store certificates in the storage backend
	// Flag to not store certificates in the storage backend.
	noStore?: null | bool @go(NoStore,*bool)

	// Specifies the duration by which to backdate the NotBefore property.
	// Specifies the duration by which to backdate the NotBefore property.
	notBeforeDuration?: null | string @go(NotBeforeDuration,*string)

	// The organization of generated certificates
	// The organization of generated certificates.
	organization?: [...null | string] @go(Organization,[]*string)

	// The organization unit of generated certificates
	// The organization unit of generated certificates.
	ou?: [...null | string] @go(Ou,[]*string)

	// (Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:
	// Policy identifier block; can only be used with Vault 1.11+
	policyIdentifier?: [...#PolicyIdentifierObservation] @go(PolicyIdentifier,[]PolicyIdentifierObservation)

	// Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead
	// Specify the list of allowed policies OIDs.
	policyIdentifiers?: [...null | string] @go(PolicyIdentifiers,[]*string)

	// The postal code of generated certificates
	// The postal code of generated certificates.
	postalCode?: [...null | string] @go(PostalCode,[]*string)

	// The province of generated certificates
	// The province of generated certificates.
	province?: [...null | string] @go(Province,[]*string)

	// Flag to force CN usage
	// Flag to force CN usage.
	requireCn?: null | bool @go(RequireCn,*bool)

	// Flag to specify certificates for server use
	// Flag to specify certificates for server use.
	serverFlag?: null | bool @go(ServerFlag,*bool)

	// The street address of generated certificates
	// The street address of generated certificates.
	streetAddress?: [...null | string] @go(StreetAddress,[]*string)

	// The TTL, in seconds, for any certificate issued against this role.
	// The TTL.
	ttl?: null | string @go(TTL,*string)

	// Flag to use the CN in the CSR
	// Flag to use the CN in the CSR.
	useCsrCommonName?: null | bool @go(UseCsrCommonName,*bool)

	// Flag to use the SANs in the CSR
	// Flag to use the SANs in the CSR.
	useCsrSans?: null | bool @go(UseCsrSans,*bool)
}

#SecretBackendRoleParameters: {
	// Flag to allow any name
	// Flag to allow any name
	// +kubebuilder:validation:Optional
	allowAnyName?: null | bool @go(AllowAnyName,*bool)

	// Flag to allow certificates matching the actual domain
	// Flag to allow certificates matching the actual domain.
	// +kubebuilder:validation:Optional
	allowBareDomains?: null | bool @go(AllowBareDomains,*bool)

	// Flag to allow names containing glob patterns.
	// Flag to allow names containing glob patterns.
	// +kubebuilder:validation:Optional
	allowGlobDomains?: null | bool @go(AllowGlobDomains,*bool)

	// Flag to allow IP SANs
	// Flag to allow IP SANs
	// +kubebuilder:validation:Optional
	allowIpSans?: null | bool @go(AllowIPSans,*bool)

	// Flag to allow certificates for localhost
	// Flag to allow certificates for localhost.
	// +kubebuilder:validation:Optional
	allowLocalhost?: null | bool @go(AllowLocalhost,*bool)

	// Flag to allow certificates matching subdomains
	// Flag to allow certificates matching subdomains.
	// +kubebuilder:validation:Optional
	allowSubdomains?: null | bool @go(AllowSubdomains,*bool)

	// List of allowed domains for certificates
	// The domains of the role.
	// +kubebuilder:validation:Optional
	allowedDomains?: [...null | string] @go(AllowedDomains,[]*string)

	// Flag, if set, allowed_domains can be specified using identity template expressions such as {{identity.entity.aliases.<mount accessor>.name}}.
	// Flag to indicate that `allowed_domains` specifies a template expression (e.g. {{identity.entity.aliases.<mount accessor>.name}})
	// +kubebuilder:validation:Optional
	allowedDomainsTemplate?: null | bool @go(AllowedDomainsTemplate,*bool)

	// Defines allowed custom SANs
	// Defines allowed custom SANs
	// +kubebuilder:validation:Optional
	allowedOtherSans?: [...null | string] @go(AllowedOtherSans,[]*string)

	// An array of allowed serial numbers to put in Subject
	// Defines allowed Subject serial numbers.
	// +kubebuilder:validation:Optional
	allowedSerialNumbers?: [...null | string] @go(AllowedSerialNumbers,[]*string)

	// Defines allowed URI SANs
	// Defines allowed URI SANs
	// +kubebuilder:validation:Optional
	allowedUriSans?: [...null | string] @go(AllowedURISans,[]*string)

	// The path the PKI secret backend is mounted at, with no leading or trailing /s.
	// The path of the PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// Flag to mark basic constraints valid when issuing non-CA certificates
	// Flag to mark basic constraints valid when issuing non-CA certificates.
	// +kubebuilder:validation:Optional
	basicConstraintsValidForNonCa?: null | bool @go(BasicConstraintsValidForNonCA,*bool)

	// Flag to specify certificates for client use
	// Flag to specify certificates for client use.
	// +kubebuilder:validation:Optional
	clientFlag?: null | bool @go(ClientFlag,*bool)

	// Flag to specify certificates for code signing use
	// Flag to specify certificates for code signing use.
	// +kubebuilder:validation:Optional
	codeSigningFlag?: null | bool @go(CodeSigningFlag,*bool)

	// The country of generated certificates
	// The country of generated certificates.
	// +kubebuilder:validation:Optional
	country?: [...null | string] @go(Country,[]*string)

	// Flag to specify certificates for email protection use
	// Flag to specify certificates for email protection use.
	// +kubebuilder:validation:Optional
	emailProtectionFlag?: null | bool @go(EmailProtectionFlag,*bool)

	// Flag to allow only valid host names
	// Flag to allow only valid host names
	// +kubebuilder:validation:Optional
	enforceHostnames?: null | bool @go(EnforceHostnames,*bool)

	// Specify the allowed extended key usage constraint on issued certificates
	// Specify the allowed extended key usage constraint on issued certificates.
	// +kubebuilder:validation:Optional
	extKeyUsage?: [...null | string] @go(ExtKeyUsage,[]*string)

	// Flag to generate leases with certificates
	// Flag to generate leases with certificates.
	// +kubebuilder:validation:Optional
	generateLease?: null | bool @go(GenerateLease,*bool)

	// The number of bits of generated keys
	// The number of bits of generated keys.
	// +kubebuilder:validation:Optional
	keyBits?: null | float64 @go(KeyBits,*float64)

	// The generated key type, choices: rsa, ec, ed25519, any
	// Defaults to rsa
	// The generated key type.
	// +kubebuilder:validation:Optional
	keyType?: null | string @go(KeyType,*string)

	// Specify the allowed key usage constraint on issued certificates
	// Specify the allowed key usage constraint on issued certificates.
	// +kubebuilder:validation:Optional
	keyUsage?: [...null | string] @go(KeyUsage,[]*string)

	// The locality of generated certificates
	// The locality of generated certificates.
	// +kubebuilder:validation:Optional
	locality?: [...null | string] @go(Locality,[]*string)

	// The maximum lease TTL, in seconds, for the role.
	// The maximum TTL.
	// +kubebuilder:validation:Optional
	maxTtl?: null | string @go(MaxTTL,*string)

	// The name to identify this role within the backend. Must be unique within the backend.
	// Unique name for the role.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Flag to not store certificates in the storage backend
	// Flag to not store certificates in the storage backend.
	// +kubebuilder:validation:Optional
	noStore?: null | bool @go(NoStore,*bool)

	// Specifies the duration by which to backdate the NotBefore property.
	// Specifies the duration by which to backdate the NotBefore property.
	// +kubebuilder:validation:Optional
	notBeforeDuration?: null | string @go(NotBeforeDuration,*string)

	// The organization of generated certificates
	// The organization of generated certificates.
	// +kubebuilder:validation:Optional
	organization?: [...null | string] @go(Organization,[]*string)

	// The organization unit of generated certificates
	// The organization unit of generated certificates.
	// +kubebuilder:validation:Optional
	ou?: [...null | string] @go(Ou,[]*string)

	// (Vault 1.11+ only) A block for specifying policy identifers. The policy_identifier block can be repeated, and supports the following arguments:
	// Policy identifier block; can only be used with Vault 1.11+
	// +kubebuilder:validation:Optional
	policyIdentifier?: [...#PolicyIdentifierParameters] @go(PolicyIdentifier,[]PolicyIdentifierParameters)

	// Specify the list of allowed policies OIDs. Use with Vault 1.10 or before. For Vault 1.11+, use policy_identifier blocks instead
	// Specify the list of allowed policies OIDs.
	// +kubebuilder:validation:Optional
	policyIdentifiers?: [...null | string] @go(PolicyIdentifiers,[]*string)

	// The postal code of generated certificates
	// The postal code of generated certificates.
	// +kubebuilder:validation:Optional
	postalCode?: [...null | string] @go(PostalCode,[]*string)

	// The province of generated certificates
	// The province of generated certificates.
	// +kubebuilder:validation:Optional
	province?: [...null | string] @go(Province,[]*string)

	// Flag to force CN usage
	// Flag to force CN usage.
	// +kubebuilder:validation:Optional
	requireCn?: null | bool @go(RequireCn,*bool)

	// Flag to specify certificates for server use
	// Flag to specify certificates for server use.
	// +kubebuilder:validation:Optional
	serverFlag?: null | bool @go(ServerFlag,*bool)

	// The street address of generated certificates
	// The street address of generated certificates.
	// +kubebuilder:validation:Optional
	streetAddress?: [...null | string] @go(StreetAddress,[]*string)

	// The TTL, in seconds, for any certificate issued against this role.
	// The TTL.
	// +kubebuilder:validation:Optional
	ttl?: null | string @go(TTL,*string)

	// Flag to use the CN in the CSR
	// Flag to use the CN in the CSR.
	// +kubebuilder:validation:Optional
	useCsrCommonName?: null | bool @go(UseCsrCommonName,*bool)

	// Flag to use the SANs in the CSR
	// Flag to use the SANs in the CSR.
	// +kubebuilder:validation:Optional
	useCsrSans?: null | bool @go(UseCsrSans,*bool)
}

// SecretBackendRoleSpec defines the desired state of SecretBackendRole
#SecretBackendRoleSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendRoleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendRoleInitParameters @go(InitProvider)
}

// SecretBackendRoleStatus defines the observed state of SecretBackendRole.
#SecretBackendRoleStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendRoleObservation @go(AtProvider)
}

// SecretBackendRole is the Schema for the SecretBackendRoles API. Create a role on an PKI Secret Backend for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackendRole: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #SecretBackendRoleSpec   @go(Spec)
	status?: #SecretBackendRoleStatus @go(Status)
}

// SecretBackendRoleList contains a list of SecretBackendRoles
#SecretBackendRoleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackendRole] @go(Items,[]SecretBackendRole)
}
