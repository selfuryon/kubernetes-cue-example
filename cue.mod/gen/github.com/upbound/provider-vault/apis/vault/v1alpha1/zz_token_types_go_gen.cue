// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/vault/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#TokenInitParameters: {
	// String containing the token display name
	// The display name of the token.
	displayName?: null | string @go(DisplayName,*string)

	// The explicit max TTL of this token
	// The explicit max TTL of the token.
	explicitMaxTtl?: null | string @go(ExplicitMaxTTL,*string)

	// Metadata to be set on this token
	// Metadata to be associated with the token.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Flag to not attach the default policy to this token
	// Flag to disable the default policy.
	noDefaultPolicy?: null | bool @go(NoDefaultPolicy,*bool)

	// Flag to create a token without parent
	// Flag to create a token without parent.
	noParent?: null | bool @go(NoParent,*bool)

	// The number of allowed uses of this token
	// The number of allowed uses of the token.
	numUses?: null | float64 @go(NumUses,*float64)

	// The period of this token
	// The period of the token.
	period?: null | string @go(Period,*string)

	// List of policies to attach to this token
	// List of policies.
	policies?: [...null | string] @go(Policies,[]*string)

	// The renew increment
	// The renew increment.
	renewIncrement?: null | float64 @go(RenewIncrement,*float64)

	// The minimal lease to renew this token
	// The minimum lease to renew token.
	renewMinLease?: null | float64 @go(RenewMinLease,*float64)

	// Flag to allow to renew this token
	// Flag to allow the token to be renewed
	renewable?: null | bool @go(Renewable,*bool)

	// The token role name
	// The token role name.
	roleName?: null | string @go(RoleName,*string)

	// The TTL period of this token
	// The TTL period of the token.
	ttl?: null | string @go(TTL,*string)

	// The TTL period of this token
	// The TTL period of the wrapped token.
	wrappingTtl?: null | string @go(WrappingTTL,*string)
}

#TokenObservation: {
	// String containing the token display name
	// The display name of the token.
	displayName?: null | string @go(DisplayName,*string)

	// The explicit max TTL of this token
	// The explicit max TTL of the token.
	explicitMaxTtl?: null | string @go(ExplicitMaxTTL,*string)
	id?:             null | string @go(ID,*string)

	// String containing the token lease duration if present in state file
	// The token lease duration.
	leaseDuration?: null | float64 @go(LeaseDuration,*float64)

	// String containing the token lease started time if present in state file
	// The token lease started on.
	leaseStarted?: null | string @go(LeaseStarted,*string)

	// Metadata to be set on this token
	// Metadata to be associated with the token.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Flag to not attach the default policy to this token
	// Flag to disable the default policy.
	noDefaultPolicy?: null | bool @go(NoDefaultPolicy,*bool)

	// Flag to create a token without parent
	// Flag to create a token without parent.
	noParent?: null | bool @go(NoParent,*bool)

	// The number of allowed uses of this token
	// The number of allowed uses of the token.
	numUses?: null | float64 @go(NumUses,*float64)

	// The period of this token
	// The period of the token.
	period?: null | string @go(Period,*string)

	// List of policies to attach to this token
	// List of policies.
	policies?: [...null | string] @go(Policies,[]*string)

	// The renew increment
	// The renew increment.
	renewIncrement?: null | float64 @go(RenewIncrement,*float64)

	// The minimal lease to renew this token
	// The minimum lease to renew token.
	renewMinLease?: null | float64 @go(RenewMinLease,*float64)

	// Flag to allow to renew this token
	// Flag to allow the token to be renewed
	renewable?: null | bool @go(Renewable,*bool)

	// The token role name
	// The token role name.
	roleName?: null | string @go(RoleName,*string)

	// The TTL period of this token
	// The TTL period of the token.
	ttl?: null | string @go(TTL,*string)

	// The TTL period of this token
	// The TTL period of the wrapped token.
	wrappingTtl?: null | string @go(WrappingTTL,*string)
}

#TokenParameters: {
	// String containing the token display name
	// The display name of the token.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The explicit max TTL of this token
	// The explicit max TTL of the token.
	// +kubebuilder:validation:Optional
	explicitMaxTtl?: null | string @go(ExplicitMaxTTL,*string)

	// Metadata to be set on this token
	// Metadata to be associated with the token.
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Flag to not attach the default policy to this token
	// Flag to disable the default policy.
	// +kubebuilder:validation:Optional
	noDefaultPolicy?: null | bool @go(NoDefaultPolicy,*bool)

	// Flag to create a token without parent
	// Flag to create a token without parent.
	// +kubebuilder:validation:Optional
	noParent?: null | bool @go(NoParent,*bool)

	// The number of allowed uses of this token
	// The number of allowed uses of the token.
	// +kubebuilder:validation:Optional
	numUses?: null | float64 @go(NumUses,*float64)

	// The period of this token
	// The period of the token.
	// +kubebuilder:validation:Optional
	period?: null | string @go(Period,*string)

	// List of policies to attach to this token
	// List of policies.
	// +kubebuilder:validation:Optional
	policies?: [...null | string] @go(Policies,[]*string)

	// The renew increment
	// The renew increment.
	// +kubebuilder:validation:Optional
	renewIncrement?: null | float64 @go(RenewIncrement,*float64)

	// The minimal lease to renew this token
	// The minimum lease to renew token.
	// +kubebuilder:validation:Optional
	renewMinLease?: null | float64 @go(RenewMinLease,*float64)

	// Flag to allow to renew this token
	// Flag to allow the token to be renewed
	// +kubebuilder:validation:Optional
	renewable?: null | bool @go(Renewable,*bool)

	// The token role name
	// The token role name.
	// +kubebuilder:validation:Optional
	roleName?: null | string @go(RoleName,*string)

	// The TTL period of this token
	// The TTL period of the token.
	// +kubebuilder:validation:Optional
	ttl?: null | string @go(TTL,*string)

	// The TTL period of this token
	// The TTL period of the wrapped token.
	// +kubebuilder:validation:Optional
	wrappingTtl?: null | string @go(WrappingTTL,*string)
}

// TokenSpec defines the desired state of Token
#TokenSpec: {
	v1.#ResourceSpec
	forProvider: #TokenParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TokenInitParameters @go(InitProvider)
}

// TokenStatus defines the observed state of Token.
#TokenStatus: {
	v1.#ResourceStatus
	atProvider?: #TokenObservation @go(AtProvider)
}

// Token is the Schema for the Tokens API. Writes token for Vault
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#Token: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #TokenSpec         @go(Spec)
	status?:   #TokenStatus       @go(Status)
}

// TokenList contains a list of Tokens
#TokenList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Token] @go(Items,[]Token)
}
