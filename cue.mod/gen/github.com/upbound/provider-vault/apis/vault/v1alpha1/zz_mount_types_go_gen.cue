// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/vault/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MountInitParameters: {
	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	allowedManagedKeys?: [...null | string] @go(AllowedManagedKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	description?: null | string @go(Description,*string)

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	externalEntropyAccess?: null | bool @go(ExternalEntropyAccess,*bool)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	local?: null | bool @go(Local,*bool)

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	path?: null | string @go(Path,*string)

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	sealWrap?: null | bool @go(SealWrap,*bool)

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	type?: null | string @go(Type,*string)
}

#MountObservation: {
	// The accessor for this mount.
	// Accessor of the mount
	accessor?: null | string @go(Accessor,*string)

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	allowedManagedKeys?: [...null | string] @go(AllowedManagedKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	description?: null | string @go(Description,*string)

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	externalEntropyAccess?: null | bool   @go(ExternalEntropyAccess,*bool)
	id?:                    null | string @go(ID,*string)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	local?: null | bool @go(Local,*bool)

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	path?: null | string @go(Path,*string)

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	sealWrap?: null | bool @go(SealWrap,*bool)

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	type?: null | string @go(Type,*string)
}

#MountParameters: {
	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +kubebuilder:validation:Optional
	allowedManagedKeys?: [...null | string] @go(AllowedManagedKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// +kubebuilder:validation:Optional
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// +kubebuilder:validation:Optional
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for tokens and secrets in seconds
	// +kubebuilder:validation:Optional
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// Human-friendly description of the mount
	// Human-friendly description of the mount
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	// +kubebuilder:validation:Optional
	externalEntropyAccess?: null | bool @go(ExternalEntropyAccess,*bool)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	// +kubebuilder:validation:Optional
	local?: null | bool @go(Local,*bool)

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for tokens and secrets in seconds
	// +kubebuilder:validation:Optional
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +kubebuilder:validation:Optional
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// Where the secret backend will be mounted
	// Where the secret backend will be mounted
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// +kubebuilder:validation:Optional
	sealWrap?: null | bool @go(SealWrap,*bool)

	// Type of the backend, such as "aws"
	// Type of the backend, such as 'aws'
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// MountSpec defines the desired state of Mount
#MountSpec: {
	v1.#ResourceSpec
	forProvider: #MountParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MountInitParameters @go(InitProvider)
}

// MountStatus defines the observed state of Mount.
#MountStatus: {
	v1.#ResourceStatus
	atProvider?: #MountObservation @go(AtProvider)
}

// Mount is the Schema for the Mounts API. Managing the mounting of secret backends in Vault
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#Mount: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || has(self.initProvider.path)",message="path is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	spec:    #MountSpec   @go(Spec)
	status?: #MountStatus @go(Status)
}

// MountList contains a list of Mounts
#MountList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Mount] @go(Items,[]Mount)
}
