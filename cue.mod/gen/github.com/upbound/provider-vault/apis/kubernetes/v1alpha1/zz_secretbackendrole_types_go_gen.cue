// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/kubernetes/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretBackendRoleInitParameters: {
	// The list of Kubernetes namespaces this role
	// can generate credentials for. If set to * all namespaces are allowed.
	// The list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed.
	allowedKubernetesNamespaces?: [...null | string] @go(AllowedKubernetesNamespaces,[]*string)

	// The path of the Kubernetes Secrets Engine backend mount to create
	// the role in.
	// The mount path for the Kubernetes secrets engine.
	backend?: null | string @go(Backend,*string)

	// Additional annotations to apply to all generated
	// Kubernetes objects.
	// Additional annotations to apply to all generated Kubernetes objects.
	extraAnnotations?: {[string]: null | string} @go(ExtraAnnotations,map[string]*string)

	// Additional labels to apply to all generated Kubernetes
	// objects.
	// Additional labels to apply to all generated Kubernetes objects.
	extraLabels?: {[string]: null | string} @go(ExtraLabels,map[string]*string)

	// The Role or ClusterRole rules to use when generating
	// a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name
	// and kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated
	// when credentials are requested.
	// The Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.
	generatedRoleRules?: null | string @go(GeneratedRoleRules,*string)

	// The pre-existing Role or ClusterRole to bind a
	// generated service account to. Mutually exclusive with service_account_name and
	// generated_role_rules. If set, Kubernetes token, service account, and role
	// binding objects will be created when credentials are requested.
	// The pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.
	kubernetesRoleName?: null | string @go(KubernetesRoleName,*string)

	// Specifies whether the Kubernetes role is a Role or
	// ClusterRole.
	// Specifies whether the Kubernetes role is a Role or ClusterRole.
	kubernetesRoleType?: null | string @go(KubernetesRoleType,*string)

	// The name of the role.
	// The name of the role.
	name?: null | string @go(Name,*string)

	// The name template to use when generating service accounts,
	// roles and role bindings. If unset, a default template is used.
	// The name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.
	nameTemplate?: null | string @go(NameTemplate,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The pre-existing service account to generate tokens for.
	// Mutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a
	// Kubernetes token will be created when credentials are requested.
	// The pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.
	serviceAccountName?: null | string @go(ServiceAccountName,*string)

	// The default TTL for generated Kubernetes tokens in seconds.
	// The default TTL for generated Kubernetes tokens in seconds.
	tokenDefaultTtl?: null | float64 @go(TokenDefaultTTL,*float64)

	// The maximum TTL for generated Kubernetes tokens in seconds.
	// The maximum TTL for generated Kubernetes tokens in seconds.
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)
}

#SecretBackendRoleObservation: {
	// The list of Kubernetes namespaces this role
	// can generate credentials for. If set to * all namespaces are allowed.
	// The list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed.
	allowedKubernetesNamespaces?: [...null | string] @go(AllowedKubernetesNamespaces,[]*string)

	// The path of the Kubernetes Secrets Engine backend mount to create
	// the role in.
	// The mount path for the Kubernetes secrets engine.
	backend?: null | string @go(Backend,*string)

	// Additional annotations to apply to all generated
	// Kubernetes objects.
	// Additional annotations to apply to all generated Kubernetes objects.
	extraAnnotations?: {[string]: null | string} @go(ExtraAnnotations,map[string]*string)

	// Additional labels to apply to all generated Kubernetes
	// objects.
	// Additional labels to apply to all generated Kubernetes objects.
	extraLabels?: {[string]: null | string} @go(ExtraLabels,map[string]*string)

	// The Role or ClusterRole rules to use when generating
	// a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name
	// and kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated
	// when credentials are requested.
	// The Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.
	generatedRoleRules?: null | string @go(GeneratedRoleRules,*string)
	id?:                 null | string @go(ID,*string)

	// The pre-existing Role or ClusterRole to bind a
	// generated service account to. Mutually exclusive with service_account_name and
	// generated_role_rules. If set, Kubernetes token, service account, and role
	// binding objects will be created when credentials are requested.
	// The pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.
	kubernetesRoleName?: null | string @go(KubernetesRoleName,*string)

	// Specifies whether the Kubernetes role is a Role or
	// ClusterRole.
	// Specifies whether the Kubernetes role is a Role or ClusterRole.
	kubernetesRoleType?: null | string @go(KubernetesRoleType,*string)

	// The name of the role.
	// The name of the role.
	name?: null | string @go(Name,*string)

	// The name template to use when generating service accounts,
	// roles and role bindings. If unset, a default template is used.
	// The name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.
	nameTemplate?: null | string @go(NameTemplate,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The pre-existing service account to generate tokens for.
	// Mutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a
	// Kubernetes token will be created when credentials are requested.
	// The pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.
	serviceAccountName?: null | string @go(ServiceAccountName,*string)

	// The default TTL for generated Kubernetes tokens in seconds.
	// The default TTL for generated Kubernetes tokens in seconds.
	tokenDefaultTtl?: null | float64 @go(TokenDefaultTTL,*float64)

	// The maximum TTL for generated Kubernetes tokens in seconds.
	// The maximum TTL for generated Kubernetes tokens in seconds.
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)
}

#SecretBackendRoleParameters: {
	// The list of Kubernetes namespaces this role
	// can generate credentials for. If set to * all namespaces are allowed.
	// The list of Kubernetes namespaces this role can generate credentials for. If set to '*' all namespaces are allowed.
	// +kubebuilder:validation:Optional
	allowedKubernetesNamespaces?: [...null | string] @go(AllowedKubernetesNamespaces,[]*string)

	// The path of the Kubernetes Secrets Engine backend mount to create
	// the role in.
	// The mount path for the Kubernetes secrets engine.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// Additional annotations to apply to all generated
	// Kubernetes objects.
	// Additional annotations to apply to all generated Kubernetes objects.
	// +kubebuilder:validation:Optional
	extraAnnotations?: {[string]: null | string} @go(ExtraAnnotations,map[string]*string)

	// Additional labels to apply to all generated Kubernetes
	// objects.
	// Additional labels to apply to all generated Kubernetes objects.
	// +kubebuilder:validation:Optional
	extraLabels?: {[string]: null | string} @go(ExtraLabels,map[string]*string)

	// The Role or ClusterRole rules to use when generating
	// a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with service_account_name
	// and kubernetes_role_name. If set, the entire chain of Kubernetes objects will be generated
	// when credentials are requested.
	// The Role or ClusterRole rules to use when generating a role. Accepts either JSON or YAML formatted rules. Mutually exclusive with 'service_account_name' and 'kubernetes_role_name'. If set, the entire chain of Kubernetes objects will be generated when credentials are requested.
	// +kubebuilder:validation:Optional
	generatedRoleRules?: null | string @go(GeneratedRoleRules,*string)

	// The pre-existing Role or ClusterRole to bind a
	// generated service account to. Mutually exclusive with service_account_name and
	// generated_role_rules. If set, Kubernetes token, service account, and role
	// binding objects will be created when credentials are requested.
	// The pre-existing Role or ClusterRole to bind a generated service account to. Mutually exclusive with 'service_account_name' and 'generated_role_rules'. If set, Kubernetes token, service account, and role binding objects will be created when credentials are requested.
	// +kubebuilder:validation:Optional
	kubernetesRoleName?: null | string @go(KubernetesRoleName,*string)

	// Specifies whether the Kubernetes role is a Role or
	// ClusterRole.
	// Specifies whether the Kubernetes role is a Role or ClusterRole.
	// +kubebuilder:validation:Optional
	kubernetesRoleType?: null | string @go(KubernetesRoleType,*string)

	// The name of the role.
	// The name of the role.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name template to use when generating service accounts,
	// roles and role bindings. If unset, a default template is used.
	// The name template to use when generating service accounts, roles and role bindings. If unset, a default template is used.
	// +kubebuilder:validation:Optional
	nameTemplate?: null | string @go(NameTemplate,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The pre-existing service account to generate tokens for.
	// Mutually exclusive with kubernetes_role_name and generated_role_rules. If set, only a
	// Kubernetes token will be created when credentials are requested.
	// The pre-existing service account to generate tokens for. Mutually exclusive with 'kubernetes_role_name' and 'generated_role_rules'. If set, only a Kubernetes token will be created when credentials are requested.
	// +kubebuilder:validation:Optional
	serviceAccountName?: null | string @go(ServiceAccountName,*string)

	// The default TTL for generated Kubernetes tokens in seconds.
	// The default TTL for generated Kubernetes tokens in seconds.
	// +kubebuilder:validation:Optional
	tokenDefaultTtl?: null | float64 @go(TokenDefaultTTL,*float64)

	// The maximum TTL for generated Kubernetes tokens in seconds.
	// The maximum TTL for generated Kubernetes tokens in seconds.
	// +kubebuilder:validation:Optional
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)
}

// SecretBackendRoleSpec defines the desired state of SecretBackendRole
#SecretBackendRoleSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendRoleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendRoleInitParameters @go(InitProvider)
}

// SecretBackendRoleStatus defines the observed state of SecretBackendRole.
#SecretBackendRoleStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendRoleObservation @go(AtProvider)
}

// SecretBackendRole is the Schema for the SecretBackendRoles API. Creates a role for the Kubernetes Secrets Engine in Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackendRole: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowedKubernetesNamespaces) || has(self.initProvider.allowedKubernetesNamespaces)",message="allowedKubernetesNamespaces is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #SecretBackendRoleSpec   @go(Spec)
	status?: #SecretBackendRoleStatus @go(Status)
}

// SecretBackendRoleList contains a list of SecretBackendRoles
#SecretBackendRoleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackendRole] @go(Items,[]SecretBackendRole)
}
