// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/kubernetes/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendConfigInitParameters: {
	// Unique name of the kubernetes backend to configure.
	backend?: null | string @go(Backend,*string)

	// Disable JWT issuer validation. Allows to skip ISS validation. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable JWT issuer validation. Allows to skip ISS validation.
	disableIssValidation?: null | bool @go(DisableIssValidation,*bool)

	// Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
	disableLocalCaJwt?: null | bool @go(DisableLocalCAJwt,*bool)

	// JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	// Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	issuer?: null | string @go(Issuer,*string)

	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	kubernetesCaCert?: null | string @go(KubernetesCACert,*string)

	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	kubernetesHost?: null | string @go(KubernetesHost,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	// Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	pemKeys?: [...null | string] @go(PemKeys,[]*string)
}

#AuthBackendConfigObservation: {
	// Unique name of the kubernetes backend to configure.
	backend?: null | string @go(Backend,*string)

	// Disable JWT issuer validation. Allows to skip ISS validation. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable JWT issuer validation. Allows to skip ISS validation.
	disableIssValidation?: null | bool @go(DisableIssValidation,*bool)

	// Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
	disableLocalCaJwt?: null | bool   @go(DisableLocalCAJwt,*bool)
	id?:                null | string @go(ID,*string)

	// JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	// Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	issuer?: null | string @go(Issuer,*string)

	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	kubernetesCaCert?: null | string @go(KubernetesCACert,*string)

	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	kubernetesHost?: null | string @go(KubernetesHost,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	// Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	pemKeys?: [...null | string] @go(PemKeys,[]*string)
}

#AuthBackendConfigParameters: {
	// Unique name of the kubernetes backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// Disable JWT issuer validation. Allows to skip ISS validation. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable JWT issuer validation. Allows to skip ISS validation.
	// +kubebuilder:validation:Optional
	disableIssValidation?: null | bool @go(DisableIssValidation,*bool)

	// Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod. Requires Vault v1.5.4+ or Vault auth kubernetes plugin v0.7.1+
	// Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
	// +kubebuilder:validation:Optional
	disableLocalCaJwt?: null | bool @go(DisableLocalCAJwt,*bool)

	// JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	// Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	// +kubebuilder:validation:Optional
	kubernetesCaCert?: null | string @go(KubernetesCACert,*string)

	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	// +kubebuilder:validation:Optional
	kubernetesHost?: null | string @go(KubernetesHost,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	// Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.
	// +kubebuilder:validation:Optional
	pemKeys?: [...null | string] @go(PemKeys,[]*string)

	// A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.
	// A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.
	// +kubebuilder:validation:Optional
	tokenReviewerJwtSecretRef?: null | v1.#SecretKeySelector @go(TokenReviewerJwtSecretRef,*v1.SecretKeySelector)
}

// AuthBackendConfigSpec defines the desired state of AuthBackendConfig
#AuthBackendConfigSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendConfigParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendConfigInitParameters @go(InitProvider)
}

// AuthBackendConfigStatus defines the observed state of AuthBackendConfig.
#AuthBackendConfigStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendConfigObservation @go(AtProvider)
}

// AuthBackendConfig is the Schema for the AuthBackendConfigs API. Manages Kubernetes auth backend configs in Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kubernetesHost) || has(self.initProvider.kubernetesHost)",message="kubernetesHost is a required parameter"
	spec:    #AuthBackendConfigSpec   @go(Spec)
	status?: #AuthBackendConfigStatus @go(Status)
}

// AuthBackendConfigList contains a list of AuthBackendConfigs
#AuthBackendConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendConfig] @go(Items,[]AuthBackendConfig)
}
