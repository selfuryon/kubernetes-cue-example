// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/kubernetes/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendRoleInitParameters: {
	// Configures how identity aliases are generated.
	// Valid choices are: serviceaccount_uid, serviceaccount_name. (vault-1.9+)
	// Configures how identity aliases are generated. Valid choices are: serviceaccount_uid, serviceaccount_name
	aliasNameSource?: null | string @go(AliasNameSource,*string)

	// Audience claim to verify in the JWT.
	// Optional Audience claim to verify in the JWT.
	audience?: null | string @go(Audience,*string)

	// Unique name of the kubernetes backend to configure.
	// Unique name of the kubernetes backend to configure.
	backend?: null | string @go(Backend,*string)

	// List of service account names able to access this role. If set to ["*"] all names are allowed, both this and bound_service_account_namespaces can not be "*".
	// List of service account names able to access this role. If set to `["*"]` all names are allowed, both this and bound_service_account_namespaces can not be "*".
	boundServiceAccountNames?: [...null | string] @go(BoundServiceAccountNames,[]*string)

	// List of namespaces allowed to access this role. If set to ["*"] all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	// List of namespaces allowed to access this role. If set to `["*"]` all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	boundServiceAccountNamespaces?: [...null | string] @go(BoundServiceAccountNamespaces,[]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Name of the role.
	// Name of the role.
	roleName?: null | string @go(RoleName,*string)

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	tokenBoundCidrs?: [...null | string] @go(TokenBoundCidrs,[]*string)

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	tokenExplicitMaxTtl?: null | float64 @go(TokenExplicitMaxTTL,*float64)

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	tokenNoDefaultPolicy?: null | bool @go(TokenNoDefaultPolicy,*bool)

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	tokenNumUses?: null | float64 @go(TokenNumUses,*float64)

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	tokenPeriod?: null | float64 @go(TokenPeriod,*float64)

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	tokenPolicies?: [...null | string] @go(TokenPolicies,[]*string)

	// The initial ttl of the token to generate in seconds
	tokenTtl?: null | float64 @go(TokenTTL,*float64)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	tokenType?: null | string @go(TokenType,*string)
}

#AuthBackendRoleObservation: {
	// Configures how identity aliases are generated.
	// Valid choices are: serviceaccount_uid, serviceaccount_name. (vault-1.9+)
	// Configures how identity aliases are generated. Valid choices are: serviceaccount_uid, serviceaccount_name
	aliasNameSource?: null | string @go(AliasNameSource,*string)

	// Audience claim to verify in the JWT.
	// Optional Audience claim to verify in the JWT.
	audience?: null | string @go(Audience,*string)

	// Unique name of the kubernetes backend to configure.
	// Unique name of the kubernetes backend to configure.
	backend?: null | string @go(Backend,*string)

	// List of service account names able to access this role. If set to ["*"] all names are allowed, both this and bound_service_account_namespaces can not be "*".
	// List of service account names able to access this role. If set to `["*"]` all names are allowed, both this and bound_service_account_namespaces can not be "*".
	boundServiceAccountNames?: [...null | string] @go(BoundServiceAccountNames,[]*string)

	// List of namespaces allowed to access this role. If set to ["*"] all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	// List of namespaces allowed to access this role. If set to `["*"]` all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	boundServiceAccountNamespaces?: [...null | string] @go(BoundServiceAccountNamespaces,[]*string)
	id?: null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Name of the role.
	// Name of the role.
	roleName?: null | string @go(RoleName,*string)

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	tokenBoundCidrs?: [...null | string] @go(TokenBoundCidrs,[]*string)

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	tokenExplicitMaxTtl?: null | float64 @go(TokenExplicitMaxTTL,*float64)

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	tokenNoDefaultPolicy?: null | bool @go(TokenNoDefaultPolicy,*bool)

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	tokenNumUses?: null | float64 @go(TokenNumUses,*float64)

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	tokenPeriod?: null | float64 @go(TokenPeriod,*float64)

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	tokenPolicies?: [...null | string] @go(TokenPolicies,[]*string)

	// The initial ttl of the token to generate in seconds
	tokenTtl?: null | float64 @go(TokenTTL,*float64)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	tokenType?: null | string @go(TokenType,*string)
}

#AuthBackendRoleParameters: {
	// Configures how identity aliases are generated.
	// Valid choices are: serviceaccount_uid, serviceaccount_name. (vault-1.9+)
	// Configures how identity aliases are generated. Valid choices are: serviceaccount_uid, serviceaccount_name
	// +kubebuilder:validation:Optional
	aliasNameSource?: null | string @go(AliasNameSource,*string)

	// Audience claim to verify in the JWT.
	// Optional Audience claim to verify in the JWT.
	// +kubebuilder:validation:Optional
	audience?: null | string @go(Audience,*string)

	// Unique name of the kubernetes backend to configure.
	// Unique name of the kubernetes backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// List of service account names able to access this role. If set to ["*"] all names are allowed, both this and bound_service_account_namespaces can not be "*".
	// List of service account names able to access this role. If set to `["*"]` all names are allowed, both this and bound_service_account_namespaces can not be "*".
	// +kubebuilder:validation:Optional
	boundServiceAccountNames?: [...null | string] @go(BoundServiceAccountNames,[]*string)

	// List of namespaces allowed to access this role. If set to ["*"] all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	// List of namespaces allowed to access this role. If set to `["*"]` all namespaces are allowed, both this and bound_service_account_names can not be set to "*".
	// +kubebuilder:validation:Optional
	boundServiceAccountNamespaces?: [...null | string] @go(BoundServiceAccountNamespaces,[]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Name of the role.
	// Name of the role.
	// +kubebuilder:validation:Optional
	roleName?: null | string @go(RoleName,*string)

	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// +kubebuilder:validation:Optional
	tokenBoundCidrs?: [...null | string] @go(TokenBoundCidrs,[]*string)

	// If set, will encode an
	// explicit max TTL
	// onto the token in number of seconds. This is a hard cap even if token_ttl and
	// token_max_ttl would otherwise allow a renewal.
	// Generated Token's Explicit Maximum TTL in seconds
	// +kubebuilder:validation:Optional
	tokenExplicitMaxTtl?: null | float64 @go(TokenExplicitMaxTTL,*float64)

	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	// The maximum lifetime of the generated token
	// +kubebuilder:validation:Optional
	tokenMaxTtl?: null | float64 @go(TokenMaxTTL,*float64)

	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	// If true, the 'default' policy will not automatically be added to generated tokens
	// +kubebuilder:validation:Optional
	tokenNoDefaultPolicy?: null | bool @go(TokenNoDefaultPolicy,*bool)

	// The maximum number
	// of times a generated token may be used (within its lifetime); 0 means unlimited.
	// The maximum number of times a token may be used, a value of zero means unlimited
	// +kubebuilder:validation:Optional
	tokenNumUses?: null | float64 @go(TokenNumUses,*float64)

	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	// Generated Token's Period
	// +kubebuilder:validation:Optional
	tokenPeriod?: null | float64 @go(TokenPeriod,*float64)

	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	// Generated Token's Policies
	// +kubebuilder:validation:Optional
	tokenPolicies?: [...null | string] @go(TokenPolicies,[]*string)

	// The initial ttl of the token to generate in seconds
	// +kubebuilder:validation:Optional
	tokenTtl?: null | float64 @go(TokenTTL,*float64)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// The type of token to generate, service or batch
	// +kubebuilder:validation:Optional
	tokenType?: null | string @go(TokenType,*string)
}

// AuthBackendRoleSpec defines the desired state of AuthBackendRole
#AuthBackendRoleSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendRoleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendRoleInitParameters @go(InitProvider)
}

// AuthBackendRoleStatus defines the observed state of AuthBackendRole.
#AuthBackendRoleStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendRoleObservation @go(AtProvider)
}

// AuthBackendRole is the Schema for the AuthBackendRoles API. Manages Kubernetes auth backend roles in Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendRole: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.boundServiceAccountNames) || has(self.initProvider.boundServiceAccountNames)",message="boundServiceAccountNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.boundServiceAccountNamespaces) || has(self.initProvider.boundServiceAccountNamespaces)",message="boundServiceAccountNamespaces is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleName) || has(self.initProvider.roleName)",message="roleName is a required parameter"
	spec:    #AuthBackendRoleSpec   @go(Spec)
	status?: #AuthBackendRoleStatus @go(Status)
}

// AuthBackendRoleList contains a list of AuthBackendRoles
#AuthBackendRoleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendRole] @go(Items,[]AuthBackendRole)
}
