// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/gcp/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretBackendInitParameters: {
	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	local?: null | bool @go(Local,*bool)

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	path?: null | string @go(Path,*string)
}

#SecretBackendObservation: {
	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool   @go(DisableRemount,*bool)
	id?:             null | string @go(ID,*string)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	local?: null | bool @go(Local,*bool)

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	path?: null | string @go(Path,*string)
}

#SecretBackendParameters: {
	// The GCP service account credentials in JSON format.
	// JSON-encoded credentials to use to connect to GCP
	// +kubebuilder:validation:Optional
	credentialsSecretRef?: null | v1.#SecretKeySelector @go(CredentialsSecretRef,*v1.SecretKeySelector)

	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	defaultLeaseTtlSeconds?: null | float64 @go(DefaultLeaseTTLSeconds,*float64)

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	// +kubebuilder:validation:Optional
	local?: null | bool @go(Local,*bool)

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	maxLeaseTtlSeconds?: null | float64 @go(MaxLeaseTTLSeconds,*float64)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

// SecretBackendSpec defines the desired state of SecretBackend
#SecretBackendSpec: {
	v1.#ResourceSpec
	forProvider: #SecretBackendParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretBackendInitParameters @go(InitProvider)
}

// SecretBackendStatus defines the observed state of SecretBackend.
#SecretBackendStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretBackendObservation @go(AtProvider)
}

// SecretBackend is the Schema for the SecretBackends API. Creates an GCP secret backend for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretBackend: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec:      #SecretBackendSpec   @go(Spec)
	status?:   #SecretBackendStatus @go(Status)
}

// SecretBackendList contains a list of SecretBackends
#SecretBackendList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretBackend] @go(Items,[]SecretBackend)
}
