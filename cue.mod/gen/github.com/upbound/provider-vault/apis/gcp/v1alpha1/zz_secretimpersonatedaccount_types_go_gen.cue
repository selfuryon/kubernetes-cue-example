// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/gcp/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretImpersonatedAccountInitParameters: {
	// Path where the GCP Secrets Engine is mounted
	// Path where the GCP secrets engine is mounted.
	backend?: null | string @go(Backend,*string)

	// Name of the Impersonated Account to create
	// Name of the Impersonated Account to create
	impersonatedAccount?: null | string @go(ImpersonatedAccount,*string)

	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Email of the GCP service account to impersonate.
	// Email of the GCP service account.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// List of OAuth scopes to assign to access tokens generated under this impersonated account.
	// List of OAuth scopes to assign to `access_token` secrets generated under this impersonated account (`access_token` impersonated accounts only)
	tokenScopes?: [...null | string] @go(TokenScopes,[]*string)
}

#SecretImpersonatedAccountObservation: {
	// Path where the GCP Secrets Engine is mounted
	// Path where the GCP secrets engine is mounted.
	backend?: null | string @go(Backend,*string)
	id?:      null | string @go(ID,*string)

	// Name of the Impersonated Account to create
	// Name of the Impersonated Account to create
	impersonatedAccount?: null | string @go(ImpersonatedAccount,*string)

	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Email of the GCP service account to impersonate.
	// Email of the GCP service account.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// Project the service account belongs to.
	// Project of the GCP Service Account managed by this impersonated account
	serviceAccountProject?: null | string @go(ServiceAccountProject,*string)

	// List of OAuth scopes to assign to access tokens generated under this impersonated account.
	// List of OAuth scopes to assign to `access_token` secrets generated under this impersonated account (`access_token` impersonated accounts only)
	tokenScopes?: [...null | string] @go(TokenScopes,[]*string)
}

#SecretImpersonatedAccountParameters: {
	// Path where the GCP Secrets Engine is mounted
	// Path where the GCP secrets engine is mounted.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// Name of the Impersonated Account to create
	// Name of the Impersonated Account to create
	// +kubebuilder:validation:Optional
	impersonatedAccount?: null | string @go(ImpersonatedAccount,*string)

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Email of the GCP service account to impersonate.
	// Email of the GCP service account.
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// List of OAuth scopes to assign to access tokens generated under this impersonated account.
	// List of OAuth scopes to assign to `access_token` secrets generated under this impersonated account (`access_token` impersonated accounts only)
	// +kubebuilder:validation:Optional
	tokenScopes?: [...null | string] @go(TokenScopes,[]*string)
}

// SecretImpersonatedAccountSpec defines the desired state of SecretImpersonatedAccount
#SecretImpersonatedAccountSpec: {
	v1.#ResourceSpec
	forProvider: #SecretImpersonatedAccountParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretImpersonatedAccountInitParameters @go(InitProvider)
}

// SecretImpersonatedAccountStatus defines the observed state of SecretImpersonatedAccount.
#SecretImpersonatedAccountStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretImpersonatedAccountObservation @go(AtProvider)
}

// SecretImpersonatedAccount is the Schema for the SecretImpersonatedAccounts API. Creates a Impersonated Account for the GCP Secret Backend for Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#SecretImpersonatedAccount: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.impersonatedAccount) || has(self.initProvider.impersonatedAccount)",message="impersonatedAccount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceAccountEmail) || has(self.initProvider.serviceAccountEmail)",message="serviceAccountEmail is a required parameter"
	spec:    #SecretImpersonatedAccountSpec   @go(Spec)
	status?: #SecretImpersonatedAccountStatus @go(Status)
}

// SecretImpersonatedAccountList contains a list of SecretImpersonatedAccounts
#SecretImpersonatedAccountList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretImpersonatedAccount] @go(Items,[]SecretImpersonatedAccount)
}
