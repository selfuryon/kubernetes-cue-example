// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/auth/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BackendInitParameters: {
	// The description of the auth backend
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// Specifies if the auth method is local only
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// path to mount the backend. This defaults to the type.
	path?: null | string @go(Path,*string)
	tune?: [...#TuneInitParameters] @go(Tune,[]TuneInitParameters)

	// Name of the auth backend
	type?: null | string @go(Type,*string)
}

#BackendObservation: {
	// The accessor of the auth backend
	accessor?: null | string @go(Accessor,*string)

	// The description of the auth backend
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	disableRemount?: null | bool   @go(DisableRemount,*bool)
	id?:             null | string @go(ID,*string)

	// Specifies if the auth method is local only
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// path to mount the backend. This defaults to the type.
	path?: null | string @go(Path,*string)
	tune?: [...#TuneObservation] @go(Tune,[]TuneObservation)

	// Name of the auth backend
	type?: null | string @go(Type,*string)
}

#BackendParameters: {
	// The description of the auth backend
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	disableRemount?: null | bool @go(DisableRemount,*bool)

	// Specifies if the auth method is local only
	// +kubebuilder:validation:Optional
	local?: null | bool @go(Local,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// path to mount the backend. This defaults to the type.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// +kubebuilder:validation:Optional
	tune?: [...#TuneParameters] @go(Tune,[]TuneParameters)

	// Name of the auth backend
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#TuneInitParameters: {
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)
	defaultLeaseTtl?:   null | string @go(DefaultLeaseTTL,*string)
	listingVisibility?: null | string @go(ListingVisibility,*string)
	maxLeaseTtl?:       null | string @go(MaxLeaseTTL,*string)
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	tokenType?: null | string @go(TokenType,*string)
}

#TuneObservation: {
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)
	defaultLeaseTtl?:   null | string @go(DefaultLeaseTTL,*string)
	listingVisibility?: null | string @go(ListingVisibility,*string)
	maxLeaseTtl?:       null | string @go(MaxLeaseTTL,*string)
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	tokenType?: null | string @go(TokenType,*string)
}

#TuneParameters: {
	// +kubebuilder:validation:Optional
	allowedResponseHeaders?: [...null | string] @go(AllowedResponseHeaders,[]*string)

	// +kubebuilder:validation:Optional
	auditNonHmacRequestKeys?: [...null | string] @go(AuditNonHMACRequestKeys,[]*string)

	// +kubebuilder:validation:Optional
	auditNonHmacResponseKeys?: [...null | string] @go(AuditNonHMACResponseKeys,[]*string)

	// +kubebuilder:validation:Optional
	defaultLeaseTtl?: null | string @go(DefaultLeaseTTL,*string)

	// +kubebuilder:validation:Optional
	listingVisibility?: null | string @go(ListingVisibility,*string)

	// +kubebuilder:validation:Optional
	maxLeaseTtl?: null | string @go(MaxLeaseTTL,*string)

	// +kubebuilder:validation:Optional
	passthroughRequestHeaders?: [...null | string] @go(PassthroughRequestHeaders,[]*string)

	// The type of token that should be generated. Can be service,
	// batch, or default to use the mount's tuned default (which unless changed will be
	// service tokens). For token store roles, there are two additional possibilities:
	// default-service and default-batch which specify the type to return unless the client
	// requests a different type at generation time.
	// +kubebuilder:validation:Optional
	tokenType?: null | string @go(TokenType,*string)
}

// BackendSpec defines the desired state of Backend
#BackendSpec: {
	v1.#ResourceSpec
	forProvider: #BackendParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BackendInitParameters @go(InitProvider)
}

// BackendStatus defines the observed state of Backend.
#BackendStatus: {
	v1.#ResourceStatus
	atProvider?: #BackendObservation @go(AtProvider)
}

// Backend is the Schema for the Backends API. Managing roles in an Cert auth backend in Vault
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#Backend: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	spec:    #BackendSpec   @go(Spec)
	status?: #BackendStatus @go(Status)
}

// BackendList contains a list of Backends
#BackendList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Backend] @go(Items,[]Backend)
}
