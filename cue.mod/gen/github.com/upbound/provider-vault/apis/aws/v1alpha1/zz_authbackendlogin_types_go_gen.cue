// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendLoginInitParameters: {
	// The unique name of the AWS auth backend. Defaults to
	// 'aws'.
	// AWS Auth Backend to read the token from.
	backend?: null | string @go(Backend,*string)

	// The HTTP method used in the signed IAM
	// request.
	// The HTTP method used in the signed request.
	iamHttpRequestMethod?: null | string @go(IAMHTTPRequestMethod,*string)

	// The base64-encoded body of the signed
	// request.
	// The Base64-encoded body of the signed request.
	iamRequestBody?: null | string @go(IAMRequestBody,*string)

	// The base64-encoded, JSON serialized
	// representation of the GetCallerIdentity HTTP request headers.
	// The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
	iamRequestHeaders?: null | string @go(IAMRequestHeaders,*string)

	// The base64-encoded HTTP URL used in the signed
	// request.
	// The Base64-encoded HTTP URL used in the signed request.
	iamRequestUrl?: null | string @go(IAMRequestURL,*string)

	// The base64-encoded EC2 instance identity document to
	// authenticate with. Can be retrieved from the EC2 metadata server.
	// Base64-encoded EC2 instance identity document to authenticate with.
	identity?: null | string @go(Identity,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The unique nonce to be used for login requests. Can be
	// set to a user-specified value, or will contain the server-generated value
	// once a token is issued. EC2 instances can only acquire a single token until
	// the whitelist is tidied again unless they keep track of this nonce.
	// The nonce to be used for subsequent login requests.
	nonce?: null | string @go(Nonce,*string)

	// The PKCS#7 signature of the identity document to
	// authenticate with, with all newline characters removed. Can be retrieved from
	// the EC2 metadata server.
	// PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
	pkcs7?: null | string @go(Pkcs7,*string)

	// The name of the AWS auth backend role to create tokens
	// against.
	// AWS Auth Role to read the token from.
	role?: null | string @go(Role,*string)

	// The base64-encoded SHA256 RSA signature of the
	// instance identity document to authenticate with, with all newline characters
	// removed. Can be retrieved from the EC2 metadata server.
	// Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
	signature?: null | string @go(Signature,*string)
}

#AuthBackendLoginObservation: {
	// The token's accessor.
	// The accessor returned from Vault for this token.
	accessor?: null | string @go(Accessor,*string)

	// The authentication type used to generate this token.
	// The auth method used to generate this token.
	authType?: null | string @go(AuthType,*string)

	// The unique name of the AWS auth backend. Defaults to
	// 'aws'.
	// AWS Auth Backend to read the token from.
	backend?: null | string @go(Backend,*string)

	// The HTTP method used in the signed IAM
	// request.
	// The HTTP method used in the signed request.
	iamHttpRequestMethod?: null | string @go(IAMHTTPRequestMethod,*string)

	// The base64-encoded body of the signed
	// request.
	// The Base64-encoded body of the signed request.
	iamRequestBody?: null | string @go(IAMRequestBody,*string)

	// The base64-encoded, JSON serialized
	// representation of the GetCallerIdentity HTTP request headers.
	// The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
	iamRequestHeaders?: null | string @go(IAMRequestHeaders,*string)

	// The base64-encoded HTTP URL used in the signed
	// request.
	// The Base64-encoded HTTP URL used in the signed request.
	iamRequestUrl?: null | string @go(IAMRequestURL,*string)
	id?:            null | string @go(ID,*string)

	// The base64-encoded EC2 instance identity document to
	// authenticate with. Can be retrieved from the EC2 metadata server.
	// Base64-encoded EC2 instance identity document to authenticate with.
	identity?: null | string @go(Identity,*string)

	// The duration in seconds the token will be valid, relative
	// to the time in lease_start_time.
	// Lease duration in seconds relative to the time in lease_start_time.
	leaseDuration?: null | float64 @go(LeaseDuration,*float64)

	// the approximate time at which the token was created,
	// using the clock of the system where Upbound official provider was running.
	// time at which the lease was read, using the clock of the system where Upbound official provider was running
	leaseStartTime?: null | string @go(LeaseStartTime,*string)

	// A map of information returned by the Vault server about the
	// authentication used to generate this token.
	// The metadata reported by the Vault server.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The unique nonce to be used for login requests. Can be
	// set to a user-specified value, or will contain the server-generated value
	// once a token is issued. EC2 instances can only acquire a single token until
	// the whitelist is tidied again unless they keep track of this nonce.
	// The nonce to be used for subsequent login requests.
	nonce?: null | string @go(Nonce,*string)

	// The PKCS#7 signature of the identity document to
	// authenticate with, with all newline characters removed. Can be retrieved from
	// the EC2 metadata server.
	// PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
	pkcs7?: null | string @go(Pkcs7,*string)

	// The Vault policies assigned to this token.
	// The policies assigned to this token.
	policies?: [...null | string] @go(Policies,[]*string)

	// Set to true if the token can be extended through renewal.
	// True if the duration of this lease can be extended through renewal.
	renewable?: null | bool @go(Renewable,*bool)

	// The name of the AWS auth backend role to create tokens
	// against.
	// AWS Auth Role to read the token from.
	role?: null | string @go(Role,*string)

	// The base64-encoded SHA256 RSA signature of the
	// instance identity document to authenticate with, with all newline characters
	// removed. Can be retrieved from the EC2 metadata server.
	// Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
	signature?: null | string @go(Signature,*string)
}

#AuthBackendLoginParameters: {
	// The unique name of the AWS auth backend. Defaults to
	// 'aws'.
	// AWS Auth Backend to read the token from.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// The HTTP method used in the signed IAM
	// request.
	// The HTTP method used in the signed request.
	// +kubebuilder:validation:Optional
	iamHttpRequestMethod?: null | string @go(IAMHTTPRequestMethod,*string)

	// The base64-encoded body of the signed
	// request.
	// The Base64-encoded body of the signed request.
	// +kubebuilder:validation:Optional
	iamRequestBody?: null | string @go(IAMRequestBody,*string)

	// The base64-encoded, JSON serialized
	// representation of the GetCallerIdentity HTTP request headers.
	// The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
	// +kubebuilder:validation:Optional
	iamRequestHeaders?: null | string @go(IAMRequestHeaders,*string)

	// The base64-encoded HTTP URL used in the signed
	// request.
	// The Base64-encoded HTTP URL used in the signed request.
	// +kubebuilder:validation:Optional
	iamRequestUrl?: null | string @go(IAMRequestURL,*string)

	// The base64-encoded EC2 instance identity document to
	// authenticate with. Can be retrieved from the EC2 metadata server.
	// Base64-encoded EC2 instance identity document to authenticate with.
	// +kubebuilder:validation:Optional
	identity?: null | string @go(Identity,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The unique nonce to be used for login requests. Can be
	// set to a user-specified value, or will contain the server-generated value
	// once a token is issued. EC2 instances can only acquire a single token until
	// the whitelist is tidied again unless they keep track of this nonce.
	// The nonce to be used for subsequent login requests.
	// +kubebuilder:validation:Optional
	nonce?: null | string @go(Nonce,*string)

	// The PKCS#7 signature of the identity document to
	// authenticate with, with all newline characters removed. Can be retrieved from
	// the EC2 metadata server.
	// PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
	// +kubebuilder:validation:Optional
	pkcs7?: null | string @go(Pkcs7,*string)

	// The name of the AWS auth backend role to create tokens
	// against.
	// AWS Auth Role to read the token from.
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// The base64-encoded SHA256 RSA signature of the
	// instance identity document to authenticate with, with all newline characters
	// removed. Can be retrieved from the EC2 metadata server.
	// Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
	// +kubebuilder:validation:Optional
	signature?: null | string @go(Signature,*string)
}

// AuthBackendLoginSpec defines the desired state of AuthBackendLogin
#AuthBackendLoginSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendLoginParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendLoginInitParameters @go(InitProvider)
}

// AuthBackendLoginStatus defines the observed state of AuthBackendLogin.
#AuthBackendLoginStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendLoginObservation @go(AtProvider)
}

// AuthBackendLogin is the Schema for the AuthBackendLogins API. Manages Vault tokens acquired using the AWS auth backend.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendLogin: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec:      #AuthBackendLoginSpec   @go(Spec)
	status?:   #AuthBackendLoginStatus @go(Status)
}

// AuthBackendLoginList contains a list of AuthBackendLogins
#AuthBackendLoginList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendLogin] @go(Items,[]AuthBackendLogin)
}
