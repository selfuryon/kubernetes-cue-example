// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendIdentityWhitelistInitParameters: {
	// The path of the AWS backend being configured.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the identity-whitelist entries.
	// If true, disables the periodic tidying of the identiy whitelist entries.
	disablePeriodicTidy?: null | bool @go(DisablePeriodicTidy,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time, in minutes, that must
	// have passed beyond the roletag expiration, before it is removed from the
	// backend storage.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

#AuthBackendIdentityWhitelistObservation: {
	// The path of the AWS backend being configured.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the identity-whitelist entries.
	// If true, disables the periodic tidying of the identiy whitelist entries.
	disablePeriodicTidy?: null | bool   @go(DisablePeriodicTidy,*bool)
	id?:                  null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time, in minutes, that must
	// have passed beyond the roletag expiration, before it is removed from the
	// backend storage.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

#AuthBackendIdentityWhitelistParameters: {
	// The path of the AWS backend being configured.
	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the identity-whitelist entries.
	// If true, disables the periodic tidying of the identiy whitelist entries.
	// +kubebuilder:validation:Optional
	disablePeriodicTidy?: null | bool @go(DisablePeriodicTidy,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time, in minutes, that must
	// have passed beyond the roletag expiration, before it is removed from the
	// backend storage.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	// +kubebuilder:validation:Optional
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

// AuthBackendIdentityWhitelistSpec defines the desired state of AuthBackendIdentityWhitelist
#AuthBackendIdentityWhitelistSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendIdentityWhitelistParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendIdentityWhitelistInitParameters @go(InitProvider)
}

// AuthBackendIdentityWhitelistStatus defines the observed state of AuthBackendIdentityWhitelist.
#AuthBackendIdentityWhitelistStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendIdentityWhitelistObservation @go(AtProvider)
}

// AuthBackendIdentityWhitelist is the Schema for the AuthBackendIdentityWhitelists API. Configures the periodic tidying operation of the whitelisted identity entries.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendIdentityWhitelist: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta                  @go(ObjectMeta)
	spec:      #AuthBackendIdentityWhitelistSpec   @go(Spec)
	status?:   #AuthBackendIdentityWhitelistStatus @go(Status)
}

// AuthBackendIdentityWhitelistList contains a list of AuthBackendIdentityWhitelists
#AuthBackendIdentityWhitelistList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendIdentityWhitelist] @go(Items,[]AuthBackendIdentityWhitelist)
}
