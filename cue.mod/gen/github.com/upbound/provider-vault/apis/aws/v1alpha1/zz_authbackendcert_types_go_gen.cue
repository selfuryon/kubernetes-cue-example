// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendCertInitParameters: {
	// The  Base64 encoded AWS Public key required to
	// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
	// the AWS
	// documentation.
	// Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
	awsPublicCert?: null | string @go(AwsPublicCert,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// The name of the certificate.
	// Name of the certificate to configure.
	certName?: null | string @go(CertName,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Either "pkcs7" or "identity", indicating the type of
	// document which can be verified using the given certificate. Defaults to
	// "pkcs7".
	// The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
	type?: null | string @go(Type,*string)
}

#AuthBackendCertObservation: {
	// The  Base64 encoded AWS Public key required to
	// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
	// the AWS
	// documentation.
	// Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
	awsPublicCert?: null | string @go(AwsPublicCert,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// The name of the certificate.
	// Name of the certificate to configure.
	certName?: null | string @go(CertName,*string)
	id?:       null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// Either "pkcs7" or "identity", indicating the type of
	// document which can be verified using the given certificate. Defaults to
	// "pkcs7".
	// The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
	type?: null | string @go(Type,*string)
}

#AuthBackendCertParameters: {
	// The  Base64 encoded AWS Public key required to
	// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
	// the AWS
	// documentation.
	// Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
	// +kubebuilder:validation:Optional
	awsPublicCert?: null | string @go(AwsPublicCert,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// The name of the certificate.
	// Name of the certificate to configure.
	// +kubebuilder:validation:Optional
	certName?: null | string @go(CertName,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Either "pkcs7" or "identity", indicating the type of
	// document which can be verified using the given certificate. Defaults to
	// "pkcs7".
	// The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// AuthBackendCertSpec defines the desired state of AuthBackendCert
#AuthBackendCertSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendCertParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendCertInitParameters @go(InitProvider)
}

// AuthBackendCertStatus defines the observed state of AuthBackendCert.
#AuthBackendCertStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendCertObservation @go(AtProvider)
}

// AuthBackendCert is the Schema for the AuthBackendCerts API. Manages a certificate for an AWS Auth Backend in Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendCert: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.awsPublicCert) || has(self.initProvider.awsPublicCert)",message="awsPublicCert is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certName) || has(self.initProvider.certName)",message="certName is a required parameter"
	spec:    #AuthBackendCertSpec   @go(Spec)
	status?: #AuthBackendCertStatus @go(Status)
}

// AuthBackendCertList contains a list of AuthBackendCerts
#AuthBackendCertList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendCert] @go(Items,[]AuthBackendCert)
}
