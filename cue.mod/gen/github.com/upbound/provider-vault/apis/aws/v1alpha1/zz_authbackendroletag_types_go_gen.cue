// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendRoleTagInitParameters: {
	// If set, allows migration of the underlying instances where the client resides. Use with caution.
	// Allows migration of the underlying instance where the client resides.
	allowInstanceMigration?: null | bool @go(AllowInstanceMigration,*bool)

	// The path to the AWS auth backend to
	// read role tags from, with no leading or trailing /s. Defaults to "aws".
	// AWS auth backend to read tags from.
	backend?: null | string @go(Backend,*string)

	// If set, only allows a single token to be granted per instance ID.
	// Only allow a single token to be granted per instance ID.
	disallowReauthentication?: null | bool @go(DisallowReauthentication,*bool)

	// Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.
	// Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
	instanceId?: null | string @go(InstanceID,*string)

	// The maximum TTL of the tokens issued using this role.
	// The maximum allowed lifetime of tokens issued using this role.
	maxTtl?: null | string @go(MaxTTL,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The policies to be associated with the tag. Must be a subset of the policies associated with the role.
	// Policies to be associated with the tag.
	policies?: [...null | string] @go(Policies,[]*string)

	// The name of the AWS auth backend role to read
	// role tags from, with no leading or trailing /s.
	// Name of the role.
	role?: null | string @go(Role,*string)
}

#AuthBackendRoleTagObservation: {
	// If set, allows migration of the underlying instances where the client resides. Use with caution.
	// Allows migration of the underlying instance where the client resides.
	allowInstanceMigration?: null | bool @go(AllowInstanceMigration,*bool)

	// The path to the AWS auth backend to
	// read role tags from, with no leading or trailing /s. Defaults to "aws".
	// AWS auth backend to read tags from.
	backend?: null | string @go(Backend,*string)

	// If set, only allows a single token to be granted per instance ID.
	// Only allow a single token to be granted per instance ID.
	disallowReauthentication?: null | bool   @go(DisallowReauthentication,*bool)
	id?:                       null | string @go(ID,*string)

	// Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.
	// Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
	instanceId?: null | string @go(InstanceID,*string)

	// The maximum TTL of the tokens issued using this role.
	// The maximum allowed lifetime of tokens issued using this role.
	maxTtl?: null | string @go(MaxTTL,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The policies to be associated with the tag. Must be a subset of the policies associated with the role.
	// Policies to be associated with the tag.
	policies?: [...null | string] @go(Policies,[]*string)

	// The name of the AWS auth backend role to read
	// role tags from, with no leading or trailing /s.
	// Name of the role.
	role?: null | string @go(Role,*string)

	// The key of the role tag.
	tagKey?: null | string @go(TagKey,*string)

	// The value to set the role key.
	tagValue?: null | string @go(TagValue,*string)
}

#AuthBackendRoleTagParameters: {
	// If set, allows migration of the underlying instances where the client resides. Use with caution.
	// Allows migration of the underlying instance where the client resides.
	// +kubebuilder:validation:Optional
	allowInstanceMigration?: null | bool @go(AllowInstanceMigration,*bool)

	// The path to the AWS auth backend to
	// read role tags from, with no leading or trailing /s. Defaults to "aws".
	// AWS auth backend to read tags from.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// If set, only allows a single token to be granted per instance ID.
	// Only allow a single token to be granted per instance ID.
	// +kubebuilder:validation:Optional
	disallowReauthentication?: null | bool @go(DisallowReauthentication,*bool)

	// Instance ID for which this tag is intended for. If set, the created tag can only be used by the instance with the given ID.
	// Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
	// +kubebuilder:validation:Optional
	instanceId?: null | string @go(InstanceID,*string)

	// The maximum TTL of the tokens issued using this role.
	// The maximum allowed lifetime of tokens issued using this role.
	// +kubebuilder:validation:Optional
	maxTtl?: null | string @go(MaxTTL,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The policies to be associated with the tag. Must be a subset of the policies associated with the role.
	// Policies to be associated with the tag.
	// +kubebuilder:validation:Optional
	policies?: [...null | string] @go(Policies,[]*string)

	// The name of the AWS auth backend role to read
	// role tags from, with no leading or trailing /s.
	// Name of the role.
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)
}

// AuthBackendRoleTagSpec defines the desired state of AuthBackendRoleTag
#AuthBackendRoleTagSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendRoleTagParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendRoleTagInitParameters @go(InitProvider)
}

// AuthBackendRoleTagStatus defines the observed state of AuthBackendRoleTag.
#AuthBackendRoleTagStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendRoleTagObservation @go(AtProvider)
}

// AuthBackendRoleTag is the Schema for the AuthBackendRoleTags API. Reads role tags from a Vault AWS auth backend.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendRoleTag: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || has(self.initProvider.role)",message="role is a required parameter"
	spec:    #AuthBackendRoleTagSpec   @go(Spec)
	status?: #AuthBackendRoleTagStatus @go(Status)
}

// AuthBackendRoleTagList contains a list of AuthBackendRoleTags
#AuthBackendRoleTagList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendRoleTag] @go(Items,[]AuthBackendRoleTag)
}
