// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendRoletagBlacklistInitParameters: {
	// The path the AWS auth backend being configured was
	// mounted at.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the roletag blacklist entries. Defaults to false.
	// If true, disables the periodic tidying of the roletag blacklist entries.
	disablePeriodicTidy?: null | bool @go(DisablePeriodicTidy,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time that must have passed
	// beyond the roletag expiration, before it is removed from the backend storage.
	// Defaults to 259,200 seconds, or 72 hours.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

#AuthBackendRoletagBlacklistObservation: {
	// The path the AWS auth backend being configured was
	// mounted at.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the roletag blacklist entries. Defaults to false.
	// If true, disables the periodic tidying of the roletag blacklist entries.
	disablePeriodicTidy?: null | bool   @go(DisablePeriodicTidy,*bool)
	id?:                  null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time that must have passed
	// beyond the roletag expiration, before it is removed from the backend storage.
	// Defaults to 259,200 seconds, or 72 hours.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

#AuthBackendRoletagBlacklistParameters: {
	// The path the AWS auth backend being configured was
	// mounted at.
	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// If set to true, disables the periodic
	// tidying of the roletag blacklist entries. Defaults to false.
	// If true, disables the periodic tidying of the roletag blacklist entries.
	// +kubebuilder:validation:Optional
	disablePeriodicTidy?: null | bool @go(DisablePeriodicTidy,*bool)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The amount of extra time that must have passed
	// beyond the roletag expiration, before it is removed from the backend storage.
	// Defaults to 259,200 seconds, or 72 hours.
	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	// +kubebuilder:validation:Optional
	safetyBuffer?: null | float64 @go(SafetyBuffer,*float64)
}

// AuthBackendRoletagBlacklistSpec defines the desired state of AuthBackendRoletagBlacklist
#AuthBackendRoletagBlacklistSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendRoletagBlacklistParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendRoletagBlacklistInitParameters @go(InitProvider)
}

// AuthBackendRoletagBlacklistStatus defines the observed state of AuthBackendRoletagBlacklist.
#AuthBackendRoletagBlacklistStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendRoletagBlacklistObservation @go(AtProvider)
}

// AuthBackendRoletagBlacklist is the Schema for the AuthBackendRoletagBlacklists API. Configures the periodic tidying operation of the blacklisted role tag entries.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendRoletagBlacklist: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || has(self.initProvider.backend)",message="backend is a required parameter"
	spec:    #AuthBackendRoletagBlacklistSpec   @go(Spec)
	status?: #AuthBackendRoletagBlacklistStatus @go(Status)
}

// AuthBackendRoletagBlacklistList contains a list of AuthBackendRoletagBlacklists
#AuthBackendRoletagBlacklistList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendRoletagBlacklist] @go(Items,[]AuthBackendRoletagBlacklist)
}
