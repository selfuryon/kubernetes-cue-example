// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-vault/apis/aws/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AuthBackendStsRoleInitParameters: {
	// The AWS account ID to configure the STS role for.
	// AWS account ID to be associated with STS role.
	accountId?: null | string @go(AccountID,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The STS role to assume when verifying requests made
	// by EC2 instances in the account specified by account_id.
	// AWS ARN for STS role to be assumed when interacting with the account specified.
	stsRole?: null | string @go(StsRole,*string)
}

#AuthBackendStsRoleObservation: {
	// The AWS account ID to configure the STS role for.
	// AWS account ID to be associated with STS role.
	accountId?: null | string @go(AccountID,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	backend?: null | string @go(Backend,*string)
	id?:      null | string @go(ID,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	namespace?: null | string @go(Namespace,*string)

	// The STS role to assume when verifying requests made
	// by EC2 instances in the account specified by account_id.
	// AWS ARN for STS role to be assumed when interacting with the account specified.
	stsRole?: null | string @go(StsRole,*string)
}

#AuthBackendStsRoleParameters: {
	// The AWS account ID to configure the STS role for.
	// AWS account ID to be associated with STS role.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to aws.
	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	backend?: null | string @go(Backend,*string)

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// The STS role to assume when verifying requests made
	// by EC2 instances in the account specified by account_id.
	// AWS ARN for STS role to be assumed when interacting with the account specified.
	// +kubebuilder:validation:Optional
	stsRole?: null | string @go(StsRole,*string)
}

// AuthBackendStsRoleSpec defines the desired state of AuthBackendStsRole
#AuthBackendStsRoleSpec: {
	v1.#ResourceSpec
	forProvider: #AuthBackendStsRoleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AuthBackendStsRoleInitParameters @go(InitProvider)
}

// AuthBackendStsRoleStatus defines the observed state of AuthBackendStsRole.
#AuthBackendStsRoleStatus: {
	v1.#ResourceStatus
	atProvider?: #AuthBackendStsRoleObservation @go(AtProvider)
}

// AuthBackendStsRole is the Schema for the AuthBackendStsRoles API. Configures an STS role in the Vault AWS Auth backend.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
#AuthBackendStsRole: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || has(self.initProvider.accountId)",message="accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stsRole) || has(self.initProvider.stsRole)",message="stsRole is a required parameter"
	spec:    #AuthBackendStsRoleSpec   @go(Spec)
	status?: #AuthBackendStsRoleStatus @go(Status)
}

// AuthBackendStsRoleList contains a list of AuthBackendStsRoles
#AuthBackendStsRoleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AuthBackendStsRole] @go(Items,[]AuthBackendStsRole)
}
