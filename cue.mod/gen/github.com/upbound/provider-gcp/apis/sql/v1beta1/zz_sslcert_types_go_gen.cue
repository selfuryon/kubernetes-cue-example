// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/sql/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SSLCertInitParameters: {
	// The common name to be used in the certificate to identify the
	// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
	commonName?: null | string @go(CommonName,*string)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#SSLCertObservation: {
	// The actual certificate data for this client certificate.
	cert?: null | string @go(Cert,*string)

	// The serial number extracted from the certificate data.
	certSerialNumber?: null | string @go(CertSerialNumber,*string)

	// The common name to be used in the certificate to identify the
	// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
	commonName?: null | string @go(CommonName,*string)

	// The time when the certificate was created in RFC 3339 format,
	// for example 2012-11-15T16:19:00.094Z.
	createTime?: null | string @go(CreateTime,*string)

	// The time when the certificate expires in RFC 3339 format,
	// for example 2012-11-15T16:19:00.094Z.
	expirationTime?: null | string @go(ExpirationTime,*string)
	id?:             null | string @go(ID,*string)

	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	instance?: null | string @go(Instance,*string)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The CA cert of the server this client cert was generated from.
	serverCaCert?: null | string @go(ServerCACert,*string)

	// The SHA1 Fingerprint of the certificate.
	sha1Fingerprint?: null | string @go(Sha1Fingerprint,*string)
}

#SSLCertParameters: {
	// The common name to be used in the certificate to identify the
	// client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	commonName?: null | string @go(CommonName,*string)

	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	// +crossplane:generate:reference:type=DatabaseInstance
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// Reference to a DatabaseInstance to populate instance.
	// +kubebuilder:validation:Optional
	instanceRef?: null | v1.#Reference @go(InstanceRef,*v1.Reference)

	// Selector for a DatabaseInstance to populate instance.
	// +kubebuilder:validation:Optional
	instanceSelector?: null | v1.#Selector @go(InstanceSelector,*v1.Selector)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// SSLCertSpec defines the desired state of SSLCert
#SSLCertSpec: {
	v1.#ResourceSpec
	forProvider: #SSLCertParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SSLCertInitParameters @go(InitProvider)
}

// SSLCertStatus defines the observed state of SSLCert.
#SSLCertStatus: {
	v1.#ResourceStatus
	atProvider?: #SSLCertObservation @go(AtProvider)
}

// SSLCert is the Schema for the SSLCerts API. Creates a new SQL Ssl Cert in Google Cloud SQL.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#SSLCert: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) && has(self.initProvider.commonName))",message="spec.forProvider.commonName is a required parameter"
	spec:    #SSLCertSpec   @go(Spec)
	status?: #SSLCertStatus @go(Status)
}

// SSLCertList contains a list of SSLCerts
#SSLCertList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SSLCert] @go(Items,[]SSLCert)
}
