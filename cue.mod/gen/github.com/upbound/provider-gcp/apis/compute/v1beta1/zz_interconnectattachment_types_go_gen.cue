// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#InterconnectAttachmentInitParameters: {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: BPS_50M, BPS_100M, BPS_200M, BPS_300M, BPS_400M, BPS_500M, BPS_1G, BPS_2G, BPS_5G, BPS_10G, BPS_20G, BPS_50G.
	bandwidth?: null | string @go(Bandwidth,*string)

	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	candidateSubnets?: [...null | string] @go(CandidateSubnets,[]*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	edgeAvailabilityDomain?: null | string @go(EdgeAvailabilityDomain,*string)

	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	encryption?: null | string @go(Encryption,*string)

	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	interconnect?: null | string @go(Interconnect,*string)

	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	ipsecInternalAddresses?: [...null | string] @go(IpsecInternalAddresses,[]*string)

	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	mtu?: null | string @go(Mtu,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: DEDICATED, PARTNER, PARTNER_PROVIDER.
	type?: null | string @go(Type,*string)

	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	vlanTag8021Q?: null | float64 @go(VlanTag8021Q,*float64)
}

#InterconnectAttachmentObservation: {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: BPS_50M, BPS_100M, BPS_200M, BPS_300M, BPS_400M, BPS_500M, BPS_1G, BPS_2G, BPS_5G, BPS_10G, BPS_20G, BPS_50G.
	bandwidth?: null | string @go(Bandwidth,*string)

	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	candidateSubnets?: [...null | string] @go(CandidateSubnets,[]*string)

	// IPv4 address + prefix length to be configured on Cloud Router
	// Interface for this interconnect attachment.
	cloudRouterIpAddress?: null | string @go(CloudRouterIPAddress,*string)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// IPv4 address + prefix length to be configured on the customer
	// router subinterface for this interconnect attachment.
	customerRouterIpAddress?: null | string @go(CustomerRouterIPAddress,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	edgeAvailabilityDomain?: null | string @go(EdgeAvailabilityDomain,*string)

	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	encryption?: null | string @go(Encryption,*string)

	// Google reference ID, to be used when raising support tickets with
	// Google or otherwise to debug backend connectivity issues.
	googleReferenceId?: null | string @go(GoogleReferenceID,*string)

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/interconnectAttachments/{{name}}
	id?: null | string @go(ID,*string)

	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	interconnect?: null | string @go(Interconnect,*string)

	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	ipsecInternalAddresses?: [...null | string] @go(IpsecInternalAddresses,[]*string)

	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	mtu?: null | string @go(Mtu,*string)

	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
	// identifier of an PARTNER attachment used to initiate provisioning with
	// a selected partner. Of the form "XXXXX/region/domain"
	pairingKey?: null | string @go(PairingKey,*string)

	// [Output only for type PARTNER. Not present for DEDICATED]. Optional
	// BGP ASN for the router that should be supplied by a layer 3 Partner if
	// they configured BGP on behalf of the customer.
	partnerAsn?: null | string @go(PartnerAsn,*string)

	// Information specific to an InterconnectAttachment. This property
	// is populated if the interconnect that this is attached to is of type DEDICATED.
	// Structure is documented below.
	privateInterconnectInfo?: [...#PrivateInterconnectInfoObservation] @go(PrivateInterconnectInfo,[]PrivateInterconnectInfoObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Region where the regional interconnect attachment resides.
	region?: null | string @go(Region,*string)

	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	router?: null | string @go(Router,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// [Output Only] The current state of this attachment's functionality.
	state?: null | string @go(State,*string)

	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: DEDICATED, PARTNER, PARTNER_PROVIDER.
	type?: null | string @go(Type,*string)

	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	vlanTag8021Q?: null | float64 @go(VlanTag8021Q,*float64)
}

#InterconnectAttachmentParameters: {
	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	// +kubebuilder:validation:Optional
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G
	// Possible values are: BPS_50M, BPS_100M, BPS_200M, BPS_300M, BPS_400M, BPS_500M, BPS_1G, BPS_2G, BPS_5G, BPS_10G, BPS_20G, BPS_50G.
	// +kubebuilder:validation:Optional
	bandwidth?: null | string @go(Bandwidth,*string)

	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	// +kubebuilder:validation:Optional
	candidateSubnets?: [...null | string] @go(CandidateSubnets,[]*string)

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	// +kubebuilder:validation:Optional
	edgeAvailabilityDomain?: null | string @go(EdgeAvailabilityDomain,*string)

	// Indicates the user-supplied encryption option of this interconnect
	// attachment. Can only be specified at attachment creation for PARTNER or
	// DEDICATED attachments.
	// +kubebuilder:validation:Optional
	encryption?: null | string @go(Encryption,*string)

	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	// +kubebuilder:validation:Optional
	interconnect?: null | string @go(Interconnect,*string)

	// URL of addresses that have been reserved for the interconnect attachment,
	// Used only for interconnect attachment that has the encryption option as
	// IPSEC.
	// The addresses must be RFC 1918 IP address ranges. When creating HA VPN
	// gateway over the interconnect attachment, if the attachment is configured
	// to use an RFC 1918 IP address, then the VPN gateway's IP address will be
	// allocated from the IP address range specified here.
	// For example, if the HA VPN gateway's interface 0 is paired to this
	// interconnect attachment, then an RFC 1918 IP address for the VPN gateway
	// interface 0 will be allocated from the IP address specified for this
	// interconnect attachment.
	// If this field is not specified for interconnect attachment that has
	// encryption option as IPSEC, later on when creating HA VPN gateway on this
	// interconnect attachment, the HA VPN gateway's IP address will be
	// allocated from regional external IP address pool.
	// +kubebuilder:validation:Optional
	ipsecInternalAddresses?: [...null | string] @go(IpsecInternalAddresses,[]*string)

	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	// +kubebuilder:validation:Optional
	mtu?: null | string @go(Mtu,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Region where the regional interconnect attachment resides.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	// +crossplane:generate:reference:type=Router
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	router?: null | string @go(Router,*string)

	// Reference to a Router to populate router.
	// +kubebuilder:validation:Optional
	routerRef?: null | v1.#Reference @go(RouterRef,*v1.Reference)

	// Selector for a Router to populate router.
	// +kubebuilder:validation:Optional
	routerSelector?: null | v1.#Selector @go(RouterSelector,*v1.Selector)

	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED.
	// Possible values are: DEDICATED, PARTNER, PARTNER_PROVIDER.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	// +kubebuilder:validation:Optional
	vlanTag8021Q?: null | float64 @go(VlanTag8021Q,*float64)
}

#PrivateInterconnectInfoInitParameters: {
}

#PrivateInterconnectInfoObservation: {
	// (Output)
	// 802.1q encapsulation tag to be used for traffic between
	// Google and the customer, going to and from this network and region.
	tag8021q?: null | float64 @go(Tag8021Q,*float64)
}

#PrivateInterconnectInfoParameters: {
}

// InterconnectAttachmentSpec defines the desired state of InterconnectAttachment
#InterconnectAttachmentSpec: {
	v1.#ResourceSpec
	forProvider: #InterconnectAttachmentParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InterconnectAttachmentInitParameters @go(InitProvider)
}

// InterconnectAttachmentStatus defines the observed state of InterconnectAttachment.
#InterconnectAttachmentStatus: {
	v1.#ResourceStatus
	atProvider?: #InterconnectAttachmentObservation @go(AtProvider)
}

// InterconnectAttachment is the Schema for the InterconnectAttachments API. Represents an InterconnectAttachment (VLAN attachment) resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#InterconnectAttachment: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta            @go(ObjectMeta)
	spec:      #InterconnectAttachmentSpec   @go(Spec)
	status?:   #InterconnectAttachmentStatus @go(Status)
}

// InterconnectAttachmentList contains a list of InterconnectAttachments
#InterconnectAttachmentList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#InterconnectAttachment] @go(Items,[]InterconnectAttachment)
}
