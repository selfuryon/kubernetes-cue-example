// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#DefaultRouteActionCorsPolicyInitParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#DefaultRouteActionCorsPolicyObservation: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#DefaultRouteActionCorsPolicyParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#DefaultRouteActionFaultInjectionPolicyAbortInitParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyAbortObservation: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyAbortParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionFaultInjectionPolicyDelayInitParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters] @go(FixedDelay,[]DefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyDelayObservation: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation] @go(FixedDelay,[]DefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyDelayParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fixedDelay?: [...#DefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters] @go(FixedDelay,[]DefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#DefaultRouteActionFaultInjectionPolicyInitParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#DefaultRouteActionFaultInjectionPolicyAbortInitParameters] @go(Abort,[]DefaultRouteActionFaultInjectionPolicyAbortInitParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#DefaultRouteActionFaultInjectionPolicyDelayInitParameters] @go(Delay,[]DefaultRouteActionFaultInjectionPolicyDelayInitParameters)
}

#DefaultRouteActionFaultInjectionPolicyObservation: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#DefaultRouteActionFaultInjectionPolicyAbortObservation] @go(Abort,[]DefaultRouteActionFaultInjectionPolicyAbortObservation)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#DefaultRouteActionFaultInjectionPolicyDelayObservation] @go(Delay,[]DefaultRouteActionFaultInjectionPolicyDelayObservation)
}

#DefaultRouteActionFaultInjectionPolicyParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	abort?: [...#DefaultRouteActionFaultInjectionPolicyAbortParameters] @go(Abort,[]DefaultRouteActionFaultInjectionPolicyAbortParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	delay?: [...#DefaultRouteActionFaultInjectionPolicyDelayParameters] @go(Delay,[]DefaultRouteActionFaultInjectionPolicyDelayParameters)
}

#DefaultRouteActionRequestMirrorPolicyInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#DefaultRouteActionRequestMirrorPolicyObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#DefaultRouteActionRequestMirrorPolicyParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)
}

#DefaultRouteActionRetryPolicyInitParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#DefaultRouteActionRetryPolicyPerTryTimeoutInitParameters] @go(PerTryTimeout,[]DefaultRouteActionRetryPolicyPerTryTimeoutInitParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#DefaultRouteActionRetryPolicyObservation: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#DefaultRouteActionRetryPolicyPerTryTimeoutObservation] @go(PerTryTimeout,[]DefaultRouteActionRetryPolicyPerTryTimeoutObservation)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#DefaultRouteActionRetryPolicyParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	perTryTimeout?: [...#DefaultRouteActionRetryPolicyPerTryTimeoutParameters] @go(PerTryTimeout,[]DefaultRouteActionRetryPolicyPerTryTimeoutParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#DefaultRouteActionRetryPolicyPerTryTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionRetryPolicyPerTryTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionRetryPolicyPerTryTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#DefaultRouteActionURLRewriteInitParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#DefaultRouteActionURLRewriteObservation: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#DefaultRouteActionURLRewriteParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#DefaultRouteActionWeightedBackendServicesInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionInitParameters] @go(HeaderAction,[]DefaultRouteActionWeightedBackendServicesHeaderActionInitParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#DefaultRouteActionWeightedBackendServicesObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionObservation] @go(HeaderAction,[]DefaultRouteActionWeightedBackendServicesHeaderActionObservation)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#DefaultRouteActionWeightedBackendServicesParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#DefaultRouteActionWeightedBackendServicesHeaderActionParameters] @go(HeaderAction,[]DefaultRouteActionWeightedBackendServicesHeaderActionParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#HeaderMatchesRangeMatchInitParameters: {
	// The end of the range (exclusive).
	rangeEnd?: null | float64 @go(RangeEnd,*float64)

	// The start of the range (inclusive).
	rangeStart?: null | float64 @go(RangeStart,*float64)
}

#HeaderMatchesRangeMatchObservation: {
	// The end of the range (exclusive).
	rangeEnd?: null | float64 @go(RangeEnd,*float64)

	// The start of the range (inclusive).
	rangeStart?: null | float64 @go(RangeStart,*float64)
}

#HeaderMatchesRangeMatchParameters: {
	// The end of the range (exclusive).
	// +kubebuilder:validation:Optional
	rangeEnd?: null | float64 @go(RangeEnd,*float64)

	// The start of the range (inclusive).
	// +kubebuilder:validation:Optional
	rangeStart?: null | float64 @go(RangeStart,*float64)
}

#MatchRulesHeaderMatchesInitParameters: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	invertMatch?: null | bool @go(InvertMatch,*bool)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// Structure is documented below.
	rangeMatch?: [...#HeaderMatchesRangeMatchInitParameters] @go(RangeMatch,[]HeaderMatchesRangeMatchInitParameters)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	suffixMatch?: null | string @go(SuffixMatch,*string)
}

#MatchRulesHeaderMatchesObservation: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	invertMatch?: null | bool @go(InvertMatch,*bool)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// Structure is documented below.
	rangeMatch?: [...#HeaderMatchesRangeMatchObservation] @go(RangeMatch,[]HeaderMatchesRangeMatchObservation)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	suffixMatch?: null | string @go(SuffixMatch,*string)
}

#MatchRulesHeaderMatchesParameters: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	// +kubebuilder:validation:Optional
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	// +kubebuilder:validation:Optional
	invertMatch?: null | bool @go(InvertMatch,*bool)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	// +kubebuilder:validation:Optional
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	// not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	rangeMatch?: [...#HeaderMatchesRangeMatchParameters] @go(RangeMatch,[]HeaderMatchesRangeMatchParameters)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	regexMatch?: null | string @go(RegexMatch,*string)

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// +kubebuilder:validation:Optional
	suffixMatch?: null | string @go(SuffixMatch,*string)
}

#MatchRulesMetadataFiltersFilterLabelsInitParameters: {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	name?: null | string @go(Name,*string)

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	value?: null | string @go(Value,*string)
}

#MatchRulesMetadataFiltersFilterLabelsObservation: {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	name?: null | string @go(Name,*string)

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	value?: null | string @go(Value,*string)
}

#MatchRulesMetadataFiltersFilterLabelsParameters: {
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#MatchRulesQueryParameterMatchesInitParameters: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	name?: null | string @go(Name,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)
}

#MatchRulesQueryParameterMatchesObservation: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	name?: null | string @go(Name,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)
}

#MatchRulesQueryParameterMatchesParameters: {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	// +kubebuilder:validation:Optional
	exactMatch?: null | string @go(ExactMatch,*string)

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	presentMatch?: null | bool @go(PresentMatch,*bool)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	regexMatch?: null | string @go(RegexMatch,*string)
}

#PathMatcherDefaultRouteActionCorsPolicyInitParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherDefaultRouteActionCorsPolicyObservation: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherDefaultRouteActionCorsPolicyParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortInitParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortObservation: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayInitParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters] @go(FixedDelay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayObservation: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation] @go(FixedDelay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayObservation)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fixedDelay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters] @go(FixedDelay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyInitParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortInitParameters] @go(Abort,[]PathMatcherDefaultRouteActionFaultInjectionPolicyAbortInitParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayInitParameters] @go(Delay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayInitParameters)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyObservation: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortObservation] @go(Abort,[]PathMatcherDefaultRouteActionFaultInjectionPolicyAbortObservation)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayObservation] @go(Delay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayObservation)
}

#PathMatcherDefaultRouteActionFaultInjectionPolicyParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	abort?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyAbortParameters] @go(Abort,[]PathMatcherDefaultRouteActionFaultInjectionPolicyAbortParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	delay?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyDelayParameters] @go(Delay,[]PathMatcherDefaultRouteActionFaultInjectionPolicyDelayParameters)
}

#PathMatcherDefaultRouteActionInitParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathMatcherDefaultRouteActionCorsPolicyInitParameters] @go(CorsPolicy,[]PathMatcherDefaultRouteActionCorsPolicyInitParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyInitParameters] @go(FaultInjectionPolicy,[]PathMatcherDefaultRouteActionFaultInjectionPolicyInitParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathMatcherDefaultRouteActionRequestMirrorPolicyInitParameters] @go(RequestMirrorPolicy,[]PathMatcherDefaultRouteActionRequestMirrorPolicyInitParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathMatcherDefaultRouteActionRetryPolicyInitParameters] @go(RetryPolicy,[]PathMatcherDefaultRouteActionRetryPolicyInitParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathMatcherDefaultRouteActionTimeoutInitParameters] @go(Timeout,[]PathMatcherDefaultRouteActionTimeoutInitParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathMatcherDefaultRouteActionURLRewriteInitParameters] @go(URLRewrite,[]PathMatcherDefaultRouteActionURLRewriteInitParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesInitParameters] @go(WeightedBackendServices,[]PathMatcherDefaultRouteActionWeightedBackendServicesInitParameters)
}

#PathMatcherDefaultRouteActionObservation: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathMatcherDefaultRouteActionCorsPolicyObservation] @go(CorsPolicy,[]PathMatcherDefaultRouteActionCorsPolicyObservation)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyObservation] @go(FaultInjectionPolicy,[]PathMatcherDefaultRouteActionFaultInjectionPolicyObservation)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathMatcherDefaultRouteActionRequestMirrorPolicyObservation] @go(RequestMirrorPolicy,[]PathMatcherDefaultRouteActionRequestMirrorPolicyObservation)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathMatcherDefaultRouteActionRetryPolicyObservation] @go(RetryPolicy,[]PathMatcherDefaultRouteActionRetryPolicyObservation)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathMatcherDefaultRouteActionTimeoutObservation] @go(Timeout,[]PathMatcherDefaultRouteActionTimeoutObservation)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathMatcherDefaultRouteActionURLRewriteObservation] @go(URLRewrite,[]PathMatcherDefaultRouteActionURLRewriteObservation)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesObservation] @go(WeightedBackendServices,[]PathMatcherDefaultRouteActionWeightedBackendServicesObservation)
}

#PathMatcherDefaultRouteActionParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	corsPolicy?: [...#PathMatcherDefaultRouteActionCorsPolicyParameters] @go(CorsPolicy,[]PathMatcherDefaultRouteActionCorsPolicyParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	faultInjectionPolicy?: [...#PathMatcherDefaultRouteActionFaultInjectionPolicyParameters] @go(FaultInjectionPolicy,[]PathMatcherDefaultRouteActionFaultInjectionPolicyParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestMirrorPolicy?: [...#PathMatcherDefaultRouteActionRequestMirrorPolicyParameters] @go(RequestMirrorPolicy,[]PathMatcherDefaultRouteActionRequestMirrorPolicyParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	retryPolicy?: [...#PathMatcherDefaultRouteActionRetryPolicyParameters] @go(RetryPolicy,[]PathMatcherDefaultRouteActionRetryPolicyParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeout?: [...#PathMatcherDefaultRouteActionTimeoutParameters] @go(Timeout,[]PathMatcherDefaultRouteActionTimeoutParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRewrite?: [...#PathMatcherDefaultRouteActionURLRewriteParameters] @go(URLRewrite,[]PathMatcherDefaultRouteActionURLRewriteParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weightedBackendServices?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesParameters] @go(WeightedBackendServices,[]PathMatcherDefaultRouteActionWeightedBackendServicesParameters)
}

#PathMatcherDefaultRouteActionRequestMirrorPolicyInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherDefaultRouteActionRequestMirrorPolicyObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherDefaultRouteActionRequestMirrorPolicyParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherDefaultRouteActionRetryPolicyInitParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutInitParameters] @go(PerTryTimeout,[]PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutInitParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherDefaultRouteActionRetryPolicyObservation: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutObservation] @go(PerTryTimeout,[]PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutObservation)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherDefaultRouteActionRetryPolicyParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	perTryTimeout?: [...#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutParameters] @go(PerTryTimeout,[]PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherDefaultRouteActionURLRewriteInitParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathMatcherDefaultRouteActionURLRewriteObservation: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathMatcherDefaultRouteActionURLRewriteParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionInitParameters] @go(HeaderAction,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionInitParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionObservation] @go(HeaderAction,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionObservation)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherDefaultRouteActionWeightedBackendServicesParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionParameters] @go(HeaderAction,[]PathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]PathMatcherHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]PathMatcherHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]PathMatcherHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]PathMatcherHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#PathMatcherHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]PathMatcherHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#PathMatcherHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]PathMatcherHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherPathRuleInitParameters: {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	paths?: [...null | string] @go(Paths,[]*string)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	routeAction?: [...#PathRuleRouteActionInitParameters] @go(RouteAction,[]PathRuleRouteActionInitParameters)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	urlRedirect?: [...#PathRuleURLRedirectInitParameters] @go(URLRedirect,[]PathRuleURLRedirectInitParameters)
}

#PathMatcherPathRuleObservation: {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	paths?: [...null | string] @go(Paths,[]*string)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	routeAction?: [...#PathRuleRouteActionObservation] @go(RouteAction,[]PathRuleRouteActionObservation)

	// The backend service or backend bucket link that should be matched by this test.
	service?: null | string @go(Service,*string)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	urlRedirect?: [...#PathRuleURLRedirectObservation] @go(URLRedirect,[]PathRuleURLRedirectObservation)
}

#PathMatcherPathRuleParameters: {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	// +kubebuilder:validation:Optional
	paths: [...null | string] @go(Paths,[]*string)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	routeAction?: [...#PathRuleRouteActionParameters] @go(RouteAction,[]PathRuleRouteActionParameters)

	// The backend service or backend bucket link that should be matched by this test.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendBucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)

	// Reference to a BackendBucket in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceRef?: null | v1.#Reference @go(ServiceRef,*v1.Reference)

	// Selector for a BackendBucket in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceSelector?: null | v1.#Selector @go(ServiceSelector,*v1.Selector)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRedirect?: [...#PathRuleURLRedirectParameters] @go(URLRedirect,[]PathRuleURLRedirectParameters)
}

#PathMatcherRouteRulesHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]PathMatcherRouteRulesHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]PathMatcherRouteRulesHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherRouteRulesHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]PathMatcherRouteRulesHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]PathMatcherRouteRulesHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherRouteRulesHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]PathMatcherRouteRulesHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#PathMatcherRouteRulesHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]PathMatcherRouteRulesHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathMatcherRouteRulesHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#PathMatcherRouteRulesInitParameters: {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathMatcherRouteRulesHeaderActionInitParameters] @go(HeaderAction,[]PathMatcherRouteRulesHeaderActionInitParameters)

	// The rules for determining a match.
	// Structure is documented below.
	matchRules?: [...#RouteRulesMatchRulesInitParameters] @go(MatchRules,[]RouteRulesMatchRulesInitParameters)

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	priority?: null | float64 @go(Priority,*float64)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	routeAction?: [...#PathMatcherRouteRulesRouteActionInitParameters] @go(RouteAction,[]PathMatcherRouteRulesRouteActionInitParameters)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	urlRedirect?: [...#PathMatcherRouteRulesURLRedirectInitParameters] @go(URLRedirect,[]PathMatcherRouteRulesURLRedirectInitParameters)
}

#PathMatcherRouteRulesObservation: {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathMatcherRouteRulesHeaderActionObservation] @go(HeaderAction,[]PathMatcherRouteRulesHeaderActionObservation)

	// The rules for determining a match.
	// Structure is documented below.
	matchRules?: [...#RouteRulesMatchRulesObservation] @go(MatchRules,[]RouteRulesMatchRulesObservation)

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	priority?: null | float64 @go(Priority,*float64)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	routeAction?: [...#PathMatcherRouteRulesRouteActionObservation] @go(RouteAction,[]PathMatcherRouteRulesRouteActionObservation)

	// The backend service or backend bucket link that should be matched by this test.
	service?: null | string @go(Service,*string)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	urlRedirect?: [...#PathMatcherRouteRulesURLRedirectObservation] @go(URLRedirect,[]PathMatcherRouteRulesURLRedirectObservation)
}

#PathMatcherRouteRulesParameters: {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#PathMatcherRouteRulesHeaderActionParameters] @go(HeaderAction,[]PathMatcherRouteRulesHeaderActionParameters)

	// The rules for determining a match.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	matchRules?: [...#RouteRulesMatchRulesParameters] @go(MatchRules,[]RouteRulesMatchRulesParameters)

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	routeAction?: [...#PathMatcherRouteRulesRouteActionParameters] @go(RouteAction,[]PathMatcherRouteRulesRouteActionParameters)

	// The backend service or backend bucket link that should be matched by this test.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)

	// Reference to a BackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceRef?: null | v1.#Reference @go(ServiceRef,*v1.Reference)

	// Selector for a BackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceSelector?: null | v1.#Selector @go(ServiceSelector,*v1.Selector)

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRedirect?: [...#PathMatcherRouteRulesURLRedirectParameters] @go(URLRedirect,[]PathMatcherRouteRulesURLRedirectParameters)
}

#PathMatcherRouteRulesRouteActionCorsPolicyInitParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherRouteRulesRouteActionCorsPolicyObservation: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherRouteRulesRouteActionCorsPolicyParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathMatcherRouteRulesRouteActionFaultInjectionPolicyInitParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#RouteRulesRouteActionFaultInjectionPolicyAbortInitParameters] @go(Abort,[]RouteRulesRouteActionFaultInjectionPolicyAbortInitParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayInitParameters] @go(Delay,[]RouteRulesRouteActionFaultInjectionPolicyDelayInitParameters)
}

#PathMatcherRouteRulesRouteActionFaultInjectionPolicyObservation: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#RouteRulesRouteActionFaultInjectionPolicyAbortObservation] @go(Abort,[]RouteRulesRouteActionFaultInjectionPolicyAbortObservation)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayObservation] @go(Delay,[]RouteRulesRouteActionFaultInjectionPolicyDelayObservation)
}

#PathMatcherRouteRulesRouteActionFaultInjectionPolicyParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	abort?: [...#RouteRulesRouteActionFaultInjectionPolicyAbortParameters] @go(Abort,[]RouteRulesRouteActionFaultInjectionPolicyAbortParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	delay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayParameters] @go(Delay,[]RouteRulesRouteActionFaultInjectionPolicyDelayParameters)
}

#PathMatcherRouteRulesRouteActionInitParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathMatcherRouteRulesRouteActionCorsPolicyInitParameters] @go(CorsPolicy,[]PathMatcherRouteRulesRouteActionCorsPolicyInitParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathMatcherRouteRulesRouteActionFaultInjectionPolicyInitParameters] @go(FaultInjectionPolicy,[]PathMatcherRouteRulesRouteActionFaultInjectionPolicyInitParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathMatcherRouteRulesRouteActionRequestMirrorPolicyInitParameters] @go(RequestMirrorPolicy,[]PathMatcherRouteRulesRouteActionRequestMirrorPolicyInitParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathMatcherRouteRulesRouteActionRetryPolicyInitParameters] @go(RetryPolicy,[]PathMatcherRouteRulesRouteActionRetryPolicyInitParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathMatcherRouteRulesRouteActionTimeoutInitParameters] @go(Timeout,[]PathMatcherRouteRulesRouteActionTimeoutInitParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathMatcherRouteRulesRouteActionURLRewriteInitParameters] @go(URLRewrite,[]PathMatcherRouteRulesRouteActionURLRewriteInitParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathMatcherRouteRulesRouteActionWeightedBackendServicesInitParameters] @go(WeightedBackendServices,[]PathMatcherRouteRulesRouteActionWeightedBackendServicesInitParameters)
}

#PathMatcherRouteRulesRouteActionObservation: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathMatcherRouteRulesRouteActionCorsPolicyObservation] @go(CorsPolicy,[]PathMatcherRouteRulesRouteActionCorsPolicyObservation)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathMatcherRouteRulesRouteActionFaultInjectionPolicyObservation] @go(FaultInjectionPolicy,[]PathMatcherRouteRulesRouteActionFaultInjectionPolicyObservation)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathMatcherRouteRulesRouteActionRequestMirrorPolicyObservation] @go(RequestMirrorPolicy,[]PathMatcherRouteRulesRouteActionRequestMirrorPolicyObservation)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathMatcherRouteRulesRouteActionRetryPolicyObservation] @go(RetryPolicy,[]PathMatcherRouteRulesRouteActionRetryPolicyObservation)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathMatcherRouteRulesRouteActionTimeoutObservation] @go(Timeout,[]PathMatcherRouteRulesRouteActionTimeoutObservation)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathMatcherRouteRulesRouteActionURLRewriteObservation] @go(URLRewrite,[]PathMatcherRouteRulesRouteActionURLRewriteObservation)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathMatcherRouteRulesRouteActionWeightedBackendServicesObservation] @go(WeightedBackendServices,[]PathMatcherRouteRulesRouteActionWeightedBackendServicesObservation)
}

#PathMatcherRouteRulesRouteActionParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	corsPolicy?: [...#PathMatcherRouteRulesRouteActionCorsPolicyParameters] @go(CorsPolicy,[]PathMatcherRouteRulesRouteActionCorsPolicyParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	faultInjectionPolicy?: [...#PathMatcherRouteRulesRouteActionFaultInjectionPolicyParameters] @go(FaultInjectionPolicy,[]PathMatcherRouteRulesRouteActionFaultInjectionPolicyParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestMirrorPolicy?: [...#PathMatcherRouteRulesRouteActionRequestMirrorPolicyParameters] @go(RequestMirrorPolicy,[]PathMatcherRouteRulesRouteActionRequestMirrorPolicyParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	retryPolicy?: [...#PathMatcherRouteRulesRouteActionRetryPolicyParameters] @go(RetryPolicy,[]PathMatcherRouteRulesRouteActionRetryPolicyParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeout?: [...#PathMatcherRouteRulesRouteActionTimeoutParameters] @go(Timeout,[]PathMatcherRouteRulesRouteActionTimeoutParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRewrite?: [...#PathMatcherRouteRulesRouteActionURLRewriteParameters] @go(URLRewrite,[]PathMatcherRouteRulesRouteActionURLRewriteParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weightedBackendServices?: [...#PathMatcherRouteRulesRouteActionWeightedBackendServicesParameters] @go(WeightedBackendServices,[]PathMatcherRouteRulesRouteActionWeightedBackendServicesParameters)
}

#PathMatcherRouteRulesRouteActionRequestMirrorPolicyInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherRouteRulesRouteActionRequestMirrorPolicyObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherRouteRulesRouteActionRequestMirrorPolicyParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)
}

#PathMatcherRouteRulesRouteActionRetryPolicyInitParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#RouteRulesRouteActionRetryPolicyPerTryTimeoutInitParameters] @go(PerTryTimeout,[]RouteRulesRouteActionRetryPolicyPerTryTimeoutInitParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherRouteRulesRouteActionRetryPolicyObservation: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#RouteRulesRouteActionRetryPolicyPerTryTimeoutObservation] @go(PerTryTimeout,[]RouteRulesRouteActionRetryPolicyPerTryTimeoutObservation)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherRouteRulesRouteActionRetryPolicyParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	perTryTimeout?: [...#RouteRulesRouteActionRetryPolicyPerTryTimeoutParameters] @go(PerTryTimeout,[]RouteRulesRouteActionRetryPolicyPerTryTimeoutParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathMatcherRouteRulesRouteActionTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherRouteRulesRouteActionTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherRouteRulesRouteActionTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathMatcherRouteRulesRouteActionURLRewriteInitParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)

	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	pathTemplateRewrite?: null | string @go(PathTemplateRewrite,*string)
}

#PathMatcherRouteRulesRouteActionURLRewriteObservation: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)

	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	pathTemplateRewrite?: null | string @go(PathTemplateRewrite,*string)
}

#PathMatcherRouteRulesRouteActionURLRewriteParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)

	// Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced re-written using the pattern specified
	// by pathTemplateRewrite.
	// pathTemplateRewrite must be between 1 and 255 characters
	// (inclusive), must start with a '/', and must only use variables
	// captured by the route's pathTemplate matchers.
	// pathTemplateRewrite may only be used when all of a route's
	// MatchRules specify pathTemplate.
	// Only one of pathPrefixRewrite and pathTemplateRewrite may be
	// specified.
	// +kubebuilder:validation:Optional
	pathTemplateRewrite?: null | string @go(PathTemplateRewrite,*string)
}

#PathMatcherRouteRulesRouteActionWeightedBackendServicesInitParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionInitParameters] @go(HeaderAction,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionInitParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherRouteRulesRouteActionWeightedBackendServicesObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionObservation] @go(HeaderAction,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionObservation)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherRouteRulesRouteActionWeightedBackendServicesParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionParameters] @go(HeaderAction,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#PathMatcherRouteRulesURLRedirectInitParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#PathMatcherRouteRulesURLRedirectObservation: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#PathMatcherRouteRulesURLRedirectParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	// +kubebuilder:validation:Optional
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#PathRuleRouteActionCorsPolicyInitParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathRuleRouteActionCorsPolicyObservation: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathRuleRouteActionCorsPolicyParameters: {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOriginRegexes?: [...null | string] @go(AllowOriginRegexes,[]*string)

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// If true, specifies the CORS policy is disabled.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyAbortInitParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyAbortObservation: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyAbortParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyDelayInitParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#RouteActionFaultInjectionPolicyDelayFixedDelayInitParameters] @go(FixedDelay,[]RouteActionFaultInjectionPolicyDelayFixedDelayInitParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyDelayObservation: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#RouteActionFaultInjectionPolicyDelayFixedDelayObservation] @go(FixedDelay,[]RouteActionFaultInjectionPolicyDelayFixedDelayObservation)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyDelayParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fixedDelay: [...#RouteActionFaultInjectionPolicyDelayFixedDelayParameters] @go(FixedDelay,[]RouteActionFaultInjectionPolicyDelayFixedDelayParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#PathRuleRouteActionFaultInjectionPolicyInitParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#PathRuleRouteActionFaultInjectionPolicyAbortInitParameters] @go(Abort,[]PathRuleRouteActionFaultInjectionPolicyAbortInitParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#PathRuleRouteActionFaultInjectionPolicyDelayInitParameters] @go(Delay,[]PathRuleRouteActionFaultInjectionPolicyDelayInitParameters)
}

#PathRuleRouteActionFaultInjectionPolicyObservation: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	abort?: [...#PathRuleRouteActionFaultInjectionPolicyAbortObservation] @go(Abort,[]PathRuleRouteActionFaultInjectionPolicyAbortObservation)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	delay?: [...#PathRuleRouteActionFaultInjectionPolicyDelayObservation] @go(Delay,[]PathRuleRouteActionFaultInjectionPolicyDelayObservation)
}

#PathRuleRouteActionFaultInjectionPolicyParameters: {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	abort?: [...#PathRuleRouteActionFaultInjectionPolicyAbortParameters] @go(Abort,[]PathRuleRouteActionFaultInjectionPolicyAbortParameters)

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	delay?: [...#PathRuleRouteActionFaultInjectionPolicyDelayParameters] @go(Delay,[]PathRuleRouteActionFaultInjectionPolicyDelayParameters)
}

#PathRuleRouteActionInitParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathRuleRouteActionCorsPolicyInitParameters] @go(CorsPolicy,[]PathRuleRouteActionCorsPolicyInitParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathRuleRouteActionFaultInjectionPolicyInitParameters] @go(FaultInjectionPolicy,[]PathRuleRouteActionFaultInjectionPolicyInitParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathRuleRouteActionRequestMirrorPolicyInitParameters] @go(RequestMirrorPolicy,[]PathRuleRouteActionRequestMirrorPolicyInitParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathRuleRouteActionRetryPolicyInitParameters] @go(RetryPolicy,[]PathRuleRouteActionRetryPolicyInitParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathRuleRouteActionTimeoutInitParameters] @go(Timeout,[]PathRuleRouteActionTimeoutInitParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathRuleRouteActionURLRewriteInitParameters] @go(URLRewrite,[]PathRuleRouteActionURLRewriteInitParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathRuleRouteActionWeightedBackendServicesInitParameters] @go(WeightedBackendServices,[]PathRuleRouteActionWeightedBackendServicesInitParameters)
}

#PathRuleRouteActionObservation: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#PathRuleRouteActionCorsPolicyObservation] @go(CorsPolicy,[]PathRuleRouteActionCorsPolicyObservation)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#PathRuleRouteActionFaultInjectionPolicyObservation] @go(FaultInjectionPolicy,[]PathRuleRouteActionFaultInjectionPolicyObservation)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#PathRuleRouteActionRequestMirrorPolicyObservation] @go(RequestMirrorPolicy,[]PathRuleRouteActionRequestMirrorPolicyObservation)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#PathRuleRouteActionRetryPolicyObservation] @go(RetryPolicy,[]PathRuleRouteActionRetryPolicyObservation)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	timeout?: [...#PathRuleRouteActionTimeoutObservation] @go(Timeout,[]PathRuleRouteActionTimeoutObservation)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	urlRewrite?: [...#PathRuleRouteActionURLRewriteObservation] @go(URLRewrite,[]PathRuleRouteActionURLRewriteObservation)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#PathRuleRouteActionWeightedBackendServicesObservation] @go(WeightedBackendServices,[]PathRuleRouteActionWeightedBackendServicesObservation)
}

#PathRuleRouteActionParameters: {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	corsPolicy?: [...#PathRuleRouteActionCorsPolicyParameters] @go(CorsPolicy,[]PathRuleRouteActionCorsPolicyParameters)

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	faultInjectionPolicy?: [...#PathRuleRouteActionFaultInjectionPolicyParameters] @go(FaultInjectionPolicy,[]PathRuleRouteActionFaultInjectionPolicyParameters)

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestMirrorPolicy?: [...#PathRuleRouteActionRequestMirrorPolicyParameters] @go(RequestMirrorPolicy,[]PathRuleRouteActionRequestMirrorPolicyParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	retryPolicy?: [...#PathRuleRouteActionRetryPolicyParameters] @go(RetryPolicy,[]PathRuleRouteActionRetryPolicyParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeout?: [...#PathRuleRouteActionTimeoutParameters] @go(Timeout,[]PathRuleRouteActionTimeoutParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRewrite?: [...#PathRuleRouteActionURLRewriteParameters] @go(URLRewrite,[]PathRuleRouteActionURLRewriteParameters)

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weightedBackendServices?: [...#PathRuleRouteActionWeightedBackendServicesParameters] @go(WeightedBackendServices,[]PathRuleRouteActionWeightedBackendServicesParameters)
}

#PathRuleRouteActionRequestMirrorPolicyInitParameters: {
}

#PathRuleRouteActionRequestMirrorPolicyObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)
}

#PathRuleRouteActionRequestMirrorPolicyParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Reference to a BackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceRef?: null | v1.#Reference @go(BackendServiceRef,*v1.Reference)

	// Selector for a BackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceSelector?: null | v1.#Selector @go(BackendServiceSelector,*v1.Selector)
}

#PathRuleRouteActionRetryPolicyInitParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#PathRuleRouteActionRetryPolicyPerTryTimeoutInitParameters] @go(PerTryTimeout,[]PathRuleRouteActionRetryPolicyPerTryTimeoutInitParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathRuleRouteActionRetryPolicyObservation: {
	// Specifies the allowed number retries. This number must be > 0.
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	perTryTimeout?: [...#PathRuleRouteActionRetryPolicyPerTryTimeoutObservation] @go(PerTryTimeout,[]PathRuleRouteActionRetryPolicyPerTryTimeoutObservation)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathRuleRouteActionRetryPolicyParameters: {
	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	numRetries?: null | float64 @go(NumRetries,*float64)

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	perTryTimeout?: [...#PathRuleRouteActionRetryPolicyPerTryTimeoutParameters] @go(PerTryTimeout,[]PathRuleRouteActionRetryPolicyPerTryTimeoutParameters)

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	retryConditions?: [...null | string] @go(RetryConditions,[]*string)
}

#PathRuleRouteActionRetryPolicyPerTryTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionRetryPolicyPerTryTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionRetryPolicyPerTryTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#PathRuleRouteActionURLRewriteInitParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathRuleRouteActionURLRewriteObservation: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathRuleRouteActionURLRewriteParameters: {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	hostRewrite?: null | string @go(HostRewrite,*string)

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathPrefixRewrite?: null | string @go(PathPrefixRewrite,*string)
}

#PathRuleRouteActionWeightedBackendServicesHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathRuleRouteActionWeightedBackendServicesHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathRuleRouteActionWeightedBackendServicesHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#PathRuleRouteActionWeightedBackendServicesInitParameters: {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathRuleRouteActionWeightedBackendServicesHeaderActionInitParameters] @go(HeaderAction,[]PathRuleRouteActionWeightedBackendServicesHeaderActionInitParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathRuleRouteActionWeightedBackendServicesObservation: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	backendService?: null | string @go(BackendService,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	headerAction?: [...#PathRuleRouteActionWeightedBackendServicesHeaderActionObservation] @go(HeaderAction,[]PathRuleRouteActionWeightedBackendServicesHeaderActionObservation)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	weight?: null | float64 @go(Weight,*float64)
}

#PathRuleRouteActionWeightedBackendServicesParameters: {
	// The default BackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Reference to a BackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceRef?: null | v1.#Reference @go(BackendServiceRef,*v1.Reference)

	// Selector for a BackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceSelector?: null | v1.#Selector @go(BackendServiceSelector,*v1.Selector)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#PathRuleRouteActionWeightedBackendServicesHeaderActionParameters] @go(HeaderAction,[]PathRuleRouteActionWeightedBackendServicesHeaderActionParameters)

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#PathRuleURLRedirectInitParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#PathRuleURLRedirectObservation: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#PathRuleURLRedirectParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	// +kubebuilder:validation:Optional
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#RouteActionFaultInjectionPolicyDelayFixedDelayInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteActionFaultInjectionPolicyDelayFixedDelayObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteActionFaultInjectionPolicyDelayFixedDelayParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesMatchRulesInitParameters: {
	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	fullPathMatch?: null | string @go(FullPathMatch,*string)

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	headerMatches?: [...#MatchRulesHeaderMatchesInitParameters] @go(HeaderMatches,[]MatchRulesHeaderMatchesInitParameters)

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	ignoreCase?: null | bool @go(IgnoreCase,*bool)

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	metadataFilters?: [...#RouteRulesMatchRulesMetadataFiltersInitParameters] @go(MetadataFilters,[]RouteRulesMatchRulesMetadataFiltersInitParameters)

	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	pathTemplateMatch?: null | string @go(PathTemplateMatch,*string)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	queryParameterMatches?: [...#MatchRulesQueryParameterMatchesInitParameters] @go(QueryParameterMatches,[]MatchRulesQueryParameterMatchesInitParameters)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)
}

#RouteRulesMatchRulesMetadataFiltersInitParameters: {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	filterLabels?: [...#MatchRulesMetadataFiltersFilterLabelsInitParameters] @go(FilterLabels,[]MatchRulesMetadataFiltersFilterLabelsInitParameters)

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	filterMatchCriteria?: null | string @go(FilterMatchCriteria,*string)
}

#RouteRulesMatchRulesMetadataFiltersObservation: {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	filterLabels?: [...#MatchRulesMetadataFiltersFilterLabelsObservation] @go(FilterLabels,[]MatchRulesMetadataFiltersFilterLabelsObservation)

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	filterMatchCriteria?: null | string @go(FilterMatchCriteria,*string)
}

#RouteRulesMatchRulesMetadataFiltersParameters: {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	filterLabels: [...#MatchRulesMetadataFiltersFilterLabelsParameters] @go(FilterLabels,[]MatchRulesMetadataFiltersFilterLabelsParameters)

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// +kubebuilder:validation:Optional
	filterMatchCriteria?: null | string @go(FilterMatchCriteria,*string)
}

#RouteRulesMatchRulesObservation: {
	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	fullPathMatch?: null | string @go(FullPathMatch,*string)

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	headerMatches?: [...#MatchRulesHeaderMatchesObservation] @go(HeaderMatches,[]MatchRulesHeaderMatchesObservation)

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	ignoreCase?: null | bool @go(IgnoreCase,*bool)

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	metadataFilters?: [...#RouteRulesMatchRulesMetadataFiltersObservation] @go(MetadataFilters,[]RouteRulesMatchRulesMetadataFiltersObservation)

	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	pathTemplateMatch?: null | string @go(PathTemplateMatch,*string)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	queryParameterMatches?: [...#MatchRulesQueryParameterMatchesObservation] @go(QueryParameterMatches,[]MatchRulesQueryParameterMatchesObservation)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	regexMatch?: null | string @go(RegexMatch,*string)
}

#RouteRulesMatchRulesParameters: {
	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	// +kubebuilder:validation:Optional
	fullPathMatch?: null | string @go(FullPathMatch,*string)

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerMatches?: [...#MatchRulesHeaderMatchesParameters] @go(HeaderMatches,[]MatchRulesHeaderMatchesParameters)

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	ignoreCase?: null | bool @go(IgnoreCase,*bool)

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	metadataFilters?: [...#RouteRulesMatchRulesMetadataFiltersParameters] @go(MetadataFilters,[]RouteRulesMatchRulesMetadataFiltersParameters)

	// For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part
	// of the original URL.
	// pathTemplateMatch must be between 1 and 255 characters
	// (inclusive).  The pattern specified by pathTemplateMatch may
	// have at most 5 wildcard operators and at most 5 variable
	// captures in total.
	// +kubebuilder:validation:Optional
	pathTemplateMatch?: null | string @go(PathTemplateMatch,*string)

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	// +kubebuilder:validation:Optional
	prefixMatch?: null | string @go(PrefixMatch,*string)

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	queryParameterMatches?: [...#MatchRulesQueryParameterMatchesParameters] @go(QueryParameterMatches,[]MatchRulesQueryParameterMatchesParameters)

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	regexMatch?: null | string @go(RegexMatch,*string)
}

#RouteRulesRouteActionFaultInjectionPolicyAbortInitParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionFaultInjectionPolicyAbortObservation: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionFaultInjectionPolicyAbortParameters: {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	httpStatus?: null | float64 @go(HTTPStatus,*float64)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayInitParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters] @go(FixedDelay,[]RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayInitParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayObservation: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	fixedDelay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayObservation] @go(FixedDelay,[]RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayObservation)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionFaultInjectionPolicyDelayParameters: {
	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fixedDelay?: [...#RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayParameters] @go(FixedDelay,[]RouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayParameters)

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#RouteRulesRouteActionRetryPolicyPerTryTimeoutInitParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionRetryPolicyPerTryTimeoutObservation: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionRetryPolicyPerTryTimeoutParameters: {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	seconds?: null | string @go(Seconds,*string)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#RouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#URLMapDefaultRouteActionInitParameters: {
	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#DefaultRouteActionCorsPolicyInitParameters] @go(CorsPolicy,[]DefaultRouteActionCorsPolicyInitParameters)

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
	// percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
	// by the Loadbalancer for a percentage of requests.
	// timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#DefaultRouteActionFaultInjectionPolicyInitParameters] @go(FaultInjectionPolicy,[]DefaultRouteActionFaultInjectionPolicyInitParameters)

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
	// the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#DefaultRouteActionRequestMirrorPolicyInitParameters] @go(RequestMirrorPolicy,[]DefaultRouteActionRequestMirrorPolicyInitParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#DefaultRouteActionRetryPolicyInitParameters] @go(RetryPolicy,[]DefaultRouteActionRetryPolicyInitParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been
	// fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
	// If not specified, will use the largest timeout among all backend services associated with the route.
	// Structure is documented below.
	timeout?: [...#DefaultRouteActionTimeoutInitParameters] @go(Timeout,[]DefaultRouteActionTimeoutInitParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to the matched service.
	// Structure is documented below.
	urlRewrite?: [...#DefaultRouteActionURLRewriteInitParameters] @go(URLRewrite,[]DefaultRouteActionURLRewriteInitParameters)

	// A list of weighted backend services to send traffic to when a route match occurs.
	// The weights determine the fraction of traffic that flows to their corresponding backend service.
	// If all traffic needs to go to a single backend service, there must be one weightedBackendService
	// with weight set to a non 0 number.
	// Once a backendService is identified and before forwarding the request to the backend service,
	// advanced routing actions like Url rewrites and header transformations are applied depending on
	// additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#DefaultRouteActionWeightedBackendServicesInitParameters] @go(WeightedBackendServices,[]DefaultRouteActionWeightedBackendServicesInitParameters)
}

#URLMapDefaultRouteActionObservation: {
	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	corsPolicy?: [...#DefaultRouteActionCorsPolicyObservation] @go(CorsPolicy,[]DefaultRouteActionCorsPolicyObservation)

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
	// percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
	// by the Loadbalancer for a percentage of requests.
	// timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
	// Structure is documented below.
	faultInjectionPolicy?: [...#DefaultRouteActionFaultInjectionPolicyObservation] @go(FaultInjectionPolicy,[]DefaultRouteActionFaultInjectionPolicyObservation)

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
	// the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	requestMirrorPolicy?: [...#DefaultRouteActionRequestMirrorPolicyObservation] @go(RequestMirrorPolicy,[]DefaultRouteActionRequestMirrorPolicyObservation)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	retryPolicy?: [...#DefaultRouteActionRetryPolicyObservation] @go(RetryPolicy,[]DefaultRouteActionRetryPolicyObservation)

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been
	// fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
	// If not specified, will use the largest timeout among all backend services associated with the route.
	// Structure is documented below.
	timeout?: [...#DefaultRouteActionTimeoutObservation] @go(Timeout,[]DefaultRouteActionTimeoutObservation)

	// The spec to modify the URL of the request, prior to forwarding the request to the matched service.
	// Structure is documented below.
	urlRewrite?: [...#DefaultRouteActionURLRewriteObservation] @go(URLRewrite,[]DefaultRouteActionURLRewriteObservation)

	// A list of weighted backend services to send traffic to when a route match occurs.
	// The weights determine the fraction of traffic that flows to their corresponding backend service.
	// If all traffic needs to go to a single backend service, there must be one weightedBackendService
	// with weight set to a non 0 number.
	// Once a backendService is identified and before forwarding the request to the backend service,
	// advanced routing actions like Url rewrites and header transformations are applied depending on
	// additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	weightedBackendServices?: [...#DefaultRouteActionWeightedBackendServicesObservation] @go(WeightedBackendServices,[]DefaultRouteActionWeightedBackendServicesObservation)
}

#URLMapDefaultRouteActionParameters: {
	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	corsPolicy?: [...#DefaultRouteActionCorsPolicyParameters] @go(CorsPolicy,[]DefaultRouteActionCorsPolicyParameters)

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
	// percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
	// by the Loadbalancer for a percentage of requests.
	// timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	faultInjectionPolicy?: [...#DefaultRouteActionFaultInjectionPolicyParameters] @go(FaultInjectionPolicy,[]DefaultRouteActionFaultInjectionPolicyParameters)

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
	// the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestMirrorPolicy?: [...#DefaultRouteActionRequestMirrorPolicyParameters] @go(RequestMirrorPolicy,[]DefaultRouteActionRequestMirrorPolicyParameters)

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	retryPolicy?: [...#DefaultRouteActionRetryPolicyParameters] @go(RetryPolicy,[]DefaultRouteActionRetryPolicyParameters)

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been
	// fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.
	// If not specified, will use the largest timeout among all backend services associated with the route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeout?: [...#DefaultRouteActionTimeoutParameters] @go(Timeout,[]DefaultRouteActionTimeoutParameters)

	// The spec to modify the URL of the request, prior to forwarding the request to the matched service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	urlRewrite?: [...#DefaultRouteActionURLRewriteParameters] @go(URLRewrite,[]DefaultRouteActionURLRewriteParameters)

	// A list of weighted backend services to send traffic to when a route match occurs.
	// The weights determine the fraction of traffic that flows to their corresponding backend service.
	// If all traffic needs to go to a single backend service, there must be one weightedBackendService
	// with weight set to a non 0 number.
	// Once a backendService is identified and before forwarding the request to the backend service,
	// advanced routing actions like Url rewrites and header transformations are applied depending on
	// additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weightedBackendServices?: [...#DefaultRouteActionWeightedBackendServicesParameters] @go(WeightedBackendServices,[]DefaultRouteActionWeightedBackendServicesParameters)
}

#URLMapDefaultURLRedirectInitParameters: {
	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapDefaultURLRedirectObservation: {
	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapDefaultURLRedirectParameters: {
	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	// +kubebuilder:validation:Optional
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	// +kubebuilder:validation:Optional
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	// +kubebuilder:validation:Optional
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapHeaderActionInitParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#URLMapHeaderActionRequestHeadersToAddInitParameters] @go(RequestHeadersToAdd,[]URLMapHeaderActionRequestHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#URLMapHeaderActionResponseHeadersToAddInitParameters] @go(ResponseHeadersToAdd,[]URLMapHeaderActionResponseHeadersToAddInitParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#URLMapHeaderActionObservation: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	requestHeadersToAdd?: [...#URLMapHeaderActionRequestHeadersToAddObservation] @go(RequestHeadersToAdd,[]URLMapHeaderActionRequestHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	responseHeadersToAdd?: [...#URLMapHeaderActionResponseHeadersToAddObservation] @go(ResponseHeadersToAdd,[]URLMapHeaderActionResponseHeadersToAddObservation)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#URLMapHeaderActionParameters: {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	requestHeadersToAdd?: [...#URLMapHeaderActionRequestHeadersToAddParameters] @go(RequestHeadersToAdd,[]URLMapHeaderActionRequestHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	requestHeadersToRemove?: [...null | string] @go(RequestHeadersToRemove,[]*string)

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	responseHeadersToAdd?: [...#URLMapHeaderActionResponseHeadersToAddParameters] @go(ResponseHeadersToAdd,[]URLMapHeaderActionResponseHeadersToAddParameters)

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	responseHeadersToRemove?: [...null | string] @go(ResponseHeadersToRemove,[]*string)
}

#URLMapHeaderActionRequestHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHeaderActionRequestHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHeaderActionRequestHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHeaderActionResponseHeadersToAddInitParameters: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHeaderActionResponseHeadersToAddObservation: {
	// The name of the header.
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHeaderActionResponseHeadersToAddParameters: {
	// The name of the header.
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	headerValue?: null | string @go(HeaderValue,*string)

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	replace?: null | bool @go(Replace,*bool)
}

#URLMapHostRuleInitParameters: {
	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// The list of host patterns to match. They must be valid hostnames, except * will
	// match any string of ([a-z0-9-.]*). In that case, * must be the first character
	// and must be followed in the pattern by either - or ..
	hosts?: [...null | string] @go(Hosts,[]*string)

	// The name of the PathMatcher to use to match the path portion of the URL if the
	// hostRule matches the URL's host portion.
	pathMatcher?: null | string @go(PathMatcher,*string)
}

#URLMapHostRuleObservation: {
	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// The list of host patterns to match. They must be valid hostnames, except * will
	// match any string of ([a-z0-9-.]*). In that case, * must be the first character
	// and must be followed in the pattern by either - or ..
	hosts?: [...null | string] @go(Hosts,[]*string)

	// The name of the PathMatcher to use to match the path portion of the URL if the
	// hostRule matches the URL's host portion.
	pathMatcher?: null | string @go(PathMatcher,*string)
}

#URLMapHostRuleParameters: {
	// An optional description of this resource. Provide this property when you create
	// the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The list of host patterns to match. They must be valid hostnames, except * will
	// match any string of ([a-z0-9-.]*). In that case, * must be the first character
	// and must be followed in the pattern by either - or ..
	// +kubebuilder:validation:Optional
	hosts: [...null | string] @go(Hosts,[]*string)

	// The name of the PathMatcher to use to match the path portion of the URL if the
	// hostRule matches the URL's host portion.
	// +kubebuilder:validation:Optional
	pathMatcher?: null | string @go(PathMatcher,*string)
}

#URLMapInitParameters: {
	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
	// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
	// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
	// is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	defaultRouteAction?: [...#URLMapDefaultRouteActionInitParameters] @go(DefaultRouteAction,[]URLMapDefaultRouteActionInitParameters)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	defaultUrlRedirect?: [...#URLMapDefaultURLRedirectInitParameters] @go(DefaultURLRedirect,[]URLMapDefaultURLRedirectInitParameters)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. The headerAction specified here take effect after
	// headerAction specified under pathMatcher.
	// Structure is documented below.
	headerAction?: [...#URLMapHeaderActionInitParameters] @go(HeaderAction,[]URLMapHeaderActionInitParameters)

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	hostRule?: [...#URLMapHostRuleInitParameters] @go(HostRule,[]URLMapHostRuleInitParameters)

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	pathMatcher?: [...#URLMapPathMatcherInitParameters] @go(PathMatcher,[]URLMapPathMatcherInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The list of expected URL mapping tests. Request to update this UrlMap will
	// succeed only if all of the test cases pass. You can specify a maximum of 100
	// tests per UrlMap.
	// Structure is documented below.
	test?: [...#URLMapTestInitParameters] @go(Test,[]URLMapTestInitParameters)
}

#URLMapObservation: {
	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
	// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
	// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
	// is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	defaultRouteAction?: [...#URLMapDefaultRouteActionObservation] @go(DefaultRouteAction,[]URLMapDefaultRouteActionObservation)

	// The backend service or backend bucket to use when none of the given rules match.
	defaultService?: null | string @go(DefaultService,*string)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	defaultUrlRedirect?: [...#URLMapDefaultURLRedirectObservation] @go(DefaultURLRedirect,[]URLMapDefaultURLRedirectObservation)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// Fingerprint of this resource. A hash of the contents stored in this object. This
	// field is used in optimistic locking.
	fingerprint?: null | string @go(Fingerprint,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. The headerAction specified here take effect after
	// headerAction specified under pathMatcher.
	// Structure is documented below.
	headerAction?: [...#URLMapHeaderActionObservation] @go(HeaderAction,[]URLMapHeaderActionObservation)

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	hostRule?: [...#URLMapHostRuleObservation] @go(HostRule,[]URLMapHostRuleObservation)

	// an identifier for the resource with format projects/{{project}}/global/urlMaps/{{name}}
	id?: null | string @go(ID,*string)

	// The unique identifier for the resource.
	mapId?: null | float64 @go(MapID,*float64)

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	pathMatcher?: [...#URLMapPathMatcherObservation] @go(PathMatcher,[]URLMapPathMatcherObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// The list of expected URL mapping tests. Request to update this UrlMap will
	// succeed only if all of the test cases pass. You can specify a maximum of 100
	// tests per UrlMap.
	// Structure is documented below.
	test?: [...#URLMapTestObservation] @go(Test,[]URLMapTestObservation)
}

#URLMapParameters: {
	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
	// like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
	// If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
	// is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultRouteAction?: [...#URLMapDefaultRouteActionParameters] @go(DefaultRouteAction,[]URLMapDefaultRouteActionParameters)

	// The backend service or backend bucket to use when none of the given rules match.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendBucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	defaultService?: null | string @go(DefaultService,*string)

	// Reference to a BackendBucket in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	defaultServiceRef?: null | v1.#Reference @go(DefaultServiceRef,*v1.Reference)

	// Selector for a BackendBucket in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	defaultServiceSelector?: null | v1.#Selector @go(DefaultServiceSelector,*v1.Selector)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultUrlRedirect?: [...#URLMapDefaultURLRedirectParameters] @go(DefaultURLRedirect,[]URLMapDefaultURLRedirectParameters)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. The headerAction specified here take effect after
	// headerAction specified under pathMatcher.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#URLMapHeaderActionParameters] @go(HeaderAction,[]URLMapHeaderActionParameters)

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	hostRule?: [...#URLMapHostRuleParameters] @go(HostRule,[]URLMapHostRuleParameters)

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pathMatcher?: [...#URLMapPathMatcherParameters] @go(PathMatcher,[]URLMapPathMatcherParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The list of expected URL mapping tests. Request to update this UrlMap will
	// succeed only if all of the test cases pass. You can specify a maximum of 100
	// tests per UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	test?: [...#URLMapTestParameters] @go(Test,[]URLMapTestParameters)
}

#URLMapPathMatcherDefaultURLRedirectInitParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapPathMatcherDefaultURLRedirectObservation: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapPathMatcherDefaultURLRedirectParameters: {
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	httpsRedirect?: null | bool @go(HTTPSRedirect,*bool)

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	hostRedirect?: null | string @go(HostRedirect,*string)

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	pathRedirect?: null | string @go(PathRedirect,*string)

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	prefixRedirect?: null | string @go(PrefixRedirect,*string)

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	redirectResponseCode?: null | string @go(RedirectResponseCode,*string)

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	// +kubebuilder:validation:Optional
	stripQuery?: null | bool @go(StripQuery,*bool)
}

#URLMapPathMatcherInitParameters: {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
	// advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
	// to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
	// Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	defaultRouteAction?: [...#PathMatcherDefaultRouteActionInitParameters] @go(DefaultRouteAction,[]PathMatcherDefaultRouteActionInitParameters)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	defaultUrlRedirect?: [...#URLMapPathMatcherDefaultURLRedirectInitParameters] @go(DefaultURLRedirect,[]URLMapPathMatcherDefaultURLRedirectInitParameters)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. HeaderAction specified here are applied after the
	// matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap
	// Structure is documented below.
	headerAction?: [...#PathMatcherHeaderActionInitParameters] @go(HeaderAction,[]PathMatcherHeaderActionInitParameters)

	// The name to which this PathMatcher is referred by the HostRule.
	name?: null | string @go(Name,*string)

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	pathRule?: [...#PathMatcherPathRuleInitParameters] @go(PathRule,[]PathMatcherPathRuleInitParameters)

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	routeRules?: [...#PathMatcherRouteRulesInitParameters] @go(RouteRules,[]PathMatcherRouteRulesInitParameters)
}

#URLMapPathMatcherObservation: {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
	// advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
	// to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
	// Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	defaultRouteAction?: [...#PathMatcherDefaultRouteActionObservation] @go(DefaultRouteAction,[]PathMatcherDefaultRouteActionObservation)

	// The backend service or backend bucket to use when none of the given paths match.
	defaultService?: null | string @go(DefaultService,*string)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	defaultUrlRedirect?: [...#URLMapPathMatcherDefaultURLRedirectObservation] @go(DefaultURLRedirect,[]URLMapPathMatcherDefaultURLRedirectObservation)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	description?: null | string @go(Description,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. HeaderAction specified here are applied after the
	// matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap
	// Structure is documented below.
	headerAction?: [...#PathMatcherHeaderActionObservation] @go(HeaderAction,[]PathMatcherHeaderActionObservation)

	// The name to which this PathMatcher is referred by the HostRule.
	name?: null | string @go(Name,*string)

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	pathRule?: [...#PathMatcherPathRuleObservation] @go(PathRule,[]PathMatcherPathRuleObservation)

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	routeRules?: [...#PathMatcherRouteRulesObservation] @go(RouteRules,[]PathMatcherRouteRulesObservation)
}

#URLMapPathMatcherParameters: {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
	// advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
	// to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
	// Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultRouteAction?: [...#PathMatcherDefaultRouteActionParameters] @go(DefaultRouteAction,[]PathMatcherDefaultRouteActionParameters)

	// The backend service or backend bucket to use when none of the given paths match.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendBucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	defaultService?: null | string @go(DefaultService,*string)

	// Reference to a BackendBucket in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	defaultServiceRef?: null | v1.#Reference @go(DefaultServiceRef,*v1.Reference)

	// Selector for a BackendBucket in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	defaultServiceSelector?: null | v1.#Selector @go(DefaultServiceSelector,*v1.Selector)

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultUrlRedirect?: [...#URLMapPathMatcherDefaultURLRedirectParameters] @go(DefaultURLRedirect,[]URLMapPathMatcherDefaultURLRedirectParameters)

	// An optional description of this resource. Provide this property when you create
	// the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. HeaderAction specified here are applied after the
	// matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	headerAction?: [...#PathMatcherHeaderActionParameters] @go(HeaderAction,[]PathMatcherHeaderActionParameters)

	// The name to which this PathMatcher is referred by the HostRule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pathRule?: [...#PathMatcherPathRuleParameters] @go(PathRule,[]PathMatcherPathRuleParameters)

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	routeRules?: [...#PathMatcherRouteRulesParameters] @go(RouteRules,[]PathMatcherRouteRulesParameters)
}

#URLMapTestInitParameters: {
	// Description of this test case.
	description?: null | string @go(Description,*string)

	// Host portion of the URL.
	host?: null | string @go(Host,*string)

	// Path portion of the URL.
	path?: null | string @go(Path,*string)
}

#URLMapTestObservation: {
	// Description of this test case.
	description?: null | string @go(Description,*string)

	// Host portion of the URL.
	host?: null | string @go(Host,*string)

	// Path portion of the URL.
	path?: null | string @go(Path,*string)

	// The backend service or backend bucket link that should be matched by this test.
	service?: null | string @go(Service,*string)
}

#URLMapTestParameters: {
	// Description of this test case.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Host portion of the URL.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// Path portion of the URL.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The backend service or backend bucket link that should be matched by this test.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.BackendBucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)

	// Reference to a BackendBucket in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceRef?: null | v1.#Reference @go(ServiceRef,*v1.Reference)

	// Selector for a BackendBucket in compute to populate service.
	// +kubebuilder:validation:Optional
	serviceSelector?: null | v1.#Selector @go(ServiceSelector,*v1.Selector)
}

// URLMapSpec defines the desired state of URLMap
#URLMapSpec: {
	v1.#ResourceSpec
	forProvider: #URLMapParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #URLMapInitParameters @go(InitProvider)
}

// URLMapStatus defines the observed state of URLMap.
#URLMapStatus: {
	v1.#ResourceStatus
	atProvider?: #URLMapObservation @go(AtProvider)
}

// URLMap is the Schema for the URLMaps API. UrlMaps are used to route requests to a backend service based on rules that you define for the host and path of an incoming URL.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#URLMap: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #URLMapSpec        @go(Spec)
	status?:   #URLMapStatus      @go(Status)
}

// URLMapList contains a list of URLMaps
#URLMapList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#URLMap] @go(Items,[]URLMap)
}
