// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NodeTemplateInitParameters: {
	// CPU overcommit.
	// Default value is NONE.
	// Possible values are: ENABLED, NONE.
	cpuOvercommitType?: null | string @go(CPUOvercommitType,*string)

	// An optional textual description of the resource.
	description?: null | string @go(Description,*string)

	// Labels to use for node affinity, which will be used in
	// instance scheduling.
	nodeAffinityLabels?: {[string]: null | string} @go(NodeAffinityLabels,map[string]*string)

	// Node type to use for nodes group that are created from this template.
	// Only one of nodeTypeFlexibility and nodeType can be specified.
	nodeType?: null | string @go(NodeType,*string)

	// Flexible properties for the desired node type. Node groups that
	// use this node template will create nodes of a type that matches
	// these properties. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	// Structure is documented below.
	nodeTypeFlexibility?: [...#NodeTypeFlexibilityInitParameters] @go(NodeTypeFlexibility,[]NodeTypeFlexibilityInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The server binding policy for nodes using this template. Determines
	// where the nodes should restart following a maintenance event.
	// Structure is documented below.
	serverBinding?: [...#ServerBindingInitParameters] @go(ServerBinding,[]ServerBindingInitParameters)
}

#NodeTemplateObservation: {
	// CPU overcommit.
	// Default value is NONE.
	// Possible values are: ENABLED, NONE.
	cpuOvercommitType?: null | string @go(CPUOvercommitType,*string)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional textual description of the resource.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/nodeTemplates/{{name}}
	id?: null | string @go(ID,*string)

	// Labels to use for node affinity, which will be used in
	// instance scheduling.
	nodeAffinityLabels?: {[string]: null | string} @go(NodeAffinityLabels,map[string]*string)

	// Node type to use for nodes group that are created from this template.
	// Only one of nodeTypeFlexibility and nodeType can be specified.
	nodeType?: null | string @go(NodeType,*string)

	// Flexible properties for the desired node type. Node groups that
	// use this node template will create nodes of a type that matches
	// these properties. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	// Structure is documented below.
	nodeTypeFlexibility?: [...#NodeTypeFlexibilityObservation] @go(NodeTypeFlexibility,[]NodeTypeFlexibilityObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Region where nodes using the node template will be created.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// The server binding policy for nodes using this template. Determines
	// where the nodes should restart following a maintenance event.
	// Structure is documented below.
	serverBinding?: [...#ServerBindingObservation] @go(ServerBinding,[]ServerBindingObservation)
}

#NodeTemplateParameters: {
	// CPU overcommit.
	// Default value is NONE.
	// Possible values are: ENABLED, NONE.
	// +kubebuilder:validation:Optional
	cpuOvercommitType?: null | string @go(CPUOvercommitType,*string)

	// An optional textual description of the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Labels to use for node affinity, which will be used in
	// instance scheduling.
	// +kubebuilder:validation:Optional
	nodeAffinityLabels?: {[string]: null | string} @go(NodeAffinityLabels,map[string]*string)

	// Node type to use for nodes group that are created from this template.
	// Only one of nodeTypeFlexibility and nodeType can be specified.
	// +kubebuilder:validation:Optional
	nodeType?: null | string @go(NodeType,*string)

	// Flexible properties for the desired node type. Node groups that
	// use this node template will create nodes of a type that matches
	// these properties. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	nodeTypeFlexibility?: [...#NodeTypeFlexibilityParameters] @go(NodeTypeFlexibility,[]NodeTypeFlexibilityParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Region where nodes using the node template will be created.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The server binding policy for nodes using this template. Determines
	// where the nodes should restart following a maintenance event.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	serverBinding?: [...#ServerBindingParameters] @go(ServerBinding,[]ServerBindingParameters)
}

#NodeTypeFlexibilityInitParameters: {
	// Number of virtual CPUs to use.
	cpus?: null | string @go(Cpus,*string)

	// Physical memory available to the node, defined in MB.
	memory?: null | string @go(Memory,*string)
}

#NodeTypeFlexibilityObservation: {
	// Number of virtual CPUs to use.
	cpus?: null | string @go(Cpus,*string)

	// (Output)
	// Use local SSD
	localSsd?: null | string @go(LocalSsd,*string)

	// Physical memory available to the node, defined in MB.
	memory?: null | string @go(Memory,*string)
}

#NodeTypeFlexibilityParameters: {
	// Number of virtual CPUs to use.
	// +kubebuilder:validation:Optional
	cpus?: null | string @go(Cpus,*string)

	// Physical memory available to the node, defined in MB.
	// +kubebuilder:validation:Optional
	memory?: null | string @go(Memory,*string)
}

#ServerBindingInitParameters: {
	// Type of server binding policy. If RESTART_NODE_ON_ANY_SERVER,
	// nodes using this template will restart on any physical server
	// following a maintenance event.
	// If RESTART_NODE_ON_MINIMAL_SERVER, nodes using this template
	// will restart on the same physical server following a maintenance
	// event, instead of being live migrated to or restarted on a new
	// physical server. This option may be useful if you are using
	// software licenses tied to the underlying server characteristics
	// such as physical sockets or cores, to avoid the need for
	// additional licenses when maintenance occurs. However, VMs on such
	// nodes will experience outages while maintenance is applied.
	// Possible values are: RESTART_NODE_ON_ANY_SERVER, RESTART_NODE_ON_MINIMAL_SERVERS.
	type?: null | string @go(Type,*string)
}

#ServerBindingObservation: {
	// Type of server binding policy. If RESTART_NODE_ON_ANY_SERVER,
	// nodes using this template will restart on any physical server
	// following a maintenance event.
	// If RESTART_NODE_ON_MINIMAL_SERVER, nodes using this template
	// will restart on the same physical server following a maintenance
	// event, instead of being live migrated to or restarted on a new
	// physical server. This option may be useful if you are using
	// software licenses tied to the underlying server characteristics
	// such as physical sockets or cores, to avoid the need for
	// additional licenses when maintenance occurs. However, VMs on such
	// nodes will experience outages while maintenance is applied.
	// Possible values are: RESTART_NODE_ON_ANY_SERVER, RESTART_NODE_ON_MINIMAL_SERVERS.
	type?: null | string @go(Type,*string)
}

#ServerBindingParameters: {
	// Type of server binding policy. If RESTART_NODE_ON_ANY_SERVER,
	// nodes using this template will restart on any physical server
	// following a maintenance event.
	// If RESTART_NODE_ON_MINIMAL_SERVER, nodes using this template
	// will restart on the same physical server following a maintenance
	// event, instead of being live migrated to or restarted on a new
	// physical server. This option may be useful if you are using
	// software licenses tied to the underlying server characteristics
	// such as physical sockets or cores, to avoid the need for
	// additional licenses when maintenance occurs. However, VMs on such
	// nodes will experience outages while maintenance is applied.
	// Possible values are: RESTART_NODE_ON_ANY_SERVER, RESTART_NODE_ON_MINIMAL_SERVERS.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// NodeTemplateSpec defines the desired state of NodeTemplate
#NodeTemplateSpec: {
	v1.#ResourceSpec
	forProvider: #NodeTemplateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NodeTemplateInitParameters @go(InitProvider)
}

// NodeTemplateStatus defines the observed state of NodeTemplate.
#NodeTemplateStatus: {
	v1.#ResourceStatus
	atProvider?: #NodeTemplateObservation @go(AtProvider)
}

// NodeTemplate is the Schema for the NodeTemplates API. Represents a NodeTemplate resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#NodeTemplate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #NodeTemplateSpec   @go(Spec)
	status?:   #NodeTemplateStatus @go(Status)
}

// NodeTemplateList contains a list of NodeTemplates
#NodeTemplateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NodeTemplate] @go(Items,[]NodeTemplate)
}
