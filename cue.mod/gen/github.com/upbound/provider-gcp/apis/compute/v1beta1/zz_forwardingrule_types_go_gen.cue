// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ForwardingRuleInitParameters: {
	// This field can only be used:
	allPorts?: null | bool @go(AllPorts,*bool)

	// This field is used along with the backend_service field for
	// internal load balancing or with the target field for internal
	// TargetInstance.
	// If the field is set to TRUE, clients can access ILB from all
	// regions.
	// Otherwise only allows access from clients in the same region as the
	// internal load balancer.
	allowGlobalAccess?: null | bool @go(AllowGlobalAccess,*bool)

	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	allowPscGlobalAccess?: null | bool @go(AllowPscGlobalAccess,*bool)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// The IP protocol to which this rule applies.
	// For protocol forwarding, valid
	// options are TCP, UDP, ESP,
	// AH, SCTP, ICMP and
	// L3_DEFAULT.
	// The valid IP protocols are different for different load balancing products
	// as described in Load balancing
	// features.
	// Possible values are: TCP, UDP, ESP, AH, SCTP, ICMP, L3_DEFAULT.
	ipProtocol?: null | string @go(IPProtocol,*string)

	// Indicates whether or not this load balancer can be used as a collector for
	// packet mirroring. To prevent mirroring loops, instances behind this
	// load balancer will not have their traffic mirrored even if a
	// PacketMirroring rule applies to them.
	// This can only be set to true for load balancers that have their
	// loadBalancingScheme set to INTERNAL.
	isMirroringCollector?: null | bool @go(IsMirroringCollector,*bool)

	// Labels to apply to this forwarding rule.  A list of key->value pairs.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the forwarding rule type.
	// For more information about forwarding rules, refer to
	// Forwarding rule concepts.
	// Default value is EXTERNAL.
	// Possible values are: EXTERNAL, EXTERNAL_MANAGED, INTERNAL, INTERNAL_MANAGED.
	loadBalancingScheme?: null | string @go(LoadBalancingScheme,*string)

	// This signifies the networking tier used for configuring
	// this load balancer and can only take the following values:
	// PREMIUM, STANDARD.
	// For regional ForwardingRule, the valid values are PREMIUM and
	// STANDARD. For GlobalForwardingRule, the valid value is
	// PREMIUM.
	// If this field is not specified, it is assumed to be PREMIUM.
	// If IPAddress is specified, this value must be equal to the
	// networkTier of the Address.
	// Possible values are: PREMIUM, STANDARD.
	networkTier?: null | string @go(NetworkTier,*string)

	// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
	noAutomateDnsZone?: null | bool @go(NoAutomateDNSZone,*bool)

	// This field can only be used:
	portRange?: null | string @go(PortRange,*string)

	// and port_range fields are mutually exclusive.
	// For external forwarding rules, two or more forwarding rules cannot use the
	// same [IPAddress, IPProtocol] pair, and cannot have
	// overlapping portRanges.
	// For internal forwarding rules within the same VPC network, two or more
	// forwarding rules cannot use the same [IPAddress, IPProtocol]
	// pair, and cannot have overlapping portRanges.
	ports?: [...null | string] @go(Ports,[]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Service Directory resources to register this forwarding rule with.
	// Currently, only supports a single Service Directory resource.
	// Structure is documented below.
	serviceDirectoryRegistrations?: [...#ServiceDirectoryRegistrationsInitParameters] @go(ServiceDirectoryRegistrations,[]ServiceDirectoryRegistrationsInitParameters)

	// An optional prefix to the service name for this Forwarding Rule.
	// If specified, will be the first label of the fully qualified service
	// name.
	// The label must be 1-63 characters long, and comply with RFC1035.
	// Specifically, the label must be 1-63 characters long and match the
	// regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first
	// character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// This field is only used for INTERNAL load balancing.
	serviceLabel?: null | string @go(ServiceLabel,*string)

	// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
	sourceIpRanges?: [...null | string] @go(SourceIPRanges,[]*string)
}

#ForwardingRuleObservation: {
	// This field can only be used:
	allPorts?: null | bool @go(AllPorts,*bool)

	// This field is used along with the backend_service field for
	// internal load balancing or with the target field for internal
	// TargetInstance.
	// If the field is set to TRUE, clients can access ILB from all
	// regions.
	// Otherwise only allows access from clients in the same region as the
	// internal load balancer.
	allowGlobalAccess?: null | bool @go(AllowGlobalAccess,*bool)

	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	allowPscGlobalAccess?: null | bool @go(AllowPscGlobalAccess,*bool)

	// Identifies the backend service to which the forwarding rule sends traffic.
	// Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
	// must be omitted for all other load balancer types.
	backendService?: null | string @go(BackendService,*string)

	// [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
	baseForwardingRule?: null | string @go(BaseForwardingRule,*string)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/forwardingRules/{{name}}
	id?: null | string @go(ID,*string)

	// IP address for which this forwarding rule accepts traffic. When a client
	// sends traffic to this IP address, the forwarding rule directs the traffic
	// to the referenced target or backendService.
	// While creating a forwarding rule, specifying an IPAddress is
	// required under the following circumstances:
	ipAddress?: null | string @go(IPAddress,*string)

	// The IP protocol to which this rule applies.
	// For protocol forwarding, valid
	// options are TCP, UDP, ESP,
	// AH, SCTP, ICMP and
	// L3_DEFAULT.
	// The valid IP protocols are different for different load balancing products
	// as described in Load balancing
	// features.
	// Possible values are: TCP, UDP, ESP, AH, SCTP, ICMP, L3_DEFAULT.
	ipProtocol?: null | string @go(IPProtocol,*string)

	// Indicates whether or not this load balancer can be used as a collector for
	// packet mirroring. To prevent mirroring loops, instances behind this
	// load balancer will not have their traffic mirrored even if a
	// PacketMirroring rule applies to them.
	// This can only be set to true for load balancers that have their
	// loadBalancingScheme set to INTERNAL.
	isMirroringCollector?: null | bool @go(IsMirroringCollector,*bool)

	// The fingerprint used for optimistic locking of this resource.  Used
	// internally during updates.
	labelFingerprint?: null | string @go(LabelFingerprint,*string)

	// Labels to apply to this forwarding rule.  A list of key->value pairs.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the forwarding rule type.
	// For more information about forwarding rules, refer to
	// Forwarding rule concepts.
	// Default value is EXTERNAL.
	// Possible values are: EXTERNAL, EXTERNAL_MANAGED, INTERNAL, INTERNAL_MANAGED.
	loadBalancingScheme?: null | string @go(LoadBalancingScheme,*string)

	// This field is not used for external load balancing.
	// For Internal TCP/UDP Load Balancing, this field identifies the network that
	// the load balanced IP should belong to for this Forwarding Rule.
	// If the subnetwork is specified, the network of the subnetwork will be used.
	// If neither subnetwork nor this field is specified, the default network will
	// be used.
	// For Private Service Connect forwarding rules that forward traffic to Google
	// APIs, a network must be provided.
	network?: null | string @go(Network,*string)

	// This signifies the networking tier used for configuring
	// this load balancer and can only take the following values:
	// PREMIUM, STANDARD.
	// For regional ForwardingRule, the valid values are PREMIUM and
	// STANDARD. For GlobalForwardingRule, the valid value is
	// PREMIUM.
	// If this field is not specified, it is assumed to be PREMIUM.
	// If IPAddress is specified, this value must be equal to the
	// networkTier of the Address.
	// Possible values are: PREMIUM, STANDARD.
	networkTier?: null | string @go(NetworkTier,*string)

	// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
	noAutomateDnsZone?: null | bool @go(NoAutomateDNSZone,*bool)

	// This field can only be used:
	portRange?: null | string @go(PortRange,*string)

	// and port_range fields are mutually exclusive.
	// For external forwarding rules, two or more forwarding rules cannot use the
	// same [IPAddress, IPProtocol] pair, and cannot have
	// overlapping portRanges.
	// For internal forwarding rules within the same VPC network, two or more
	// forwarding rules cannot use the same [IPAddress, IPProtocol]
	// pair, and cannot have overlapping portRanges.
	ports?: [...null | string] @go(Ports,[]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The PSC connection id of the PSC Forwarding Rule.
	pscConnectionId?: null | string @go(PscConnectionID,*string)

	// The PSC connection status of the PSC Forwarding Rule. Possible values: STATUS_UNSPECIFIED, PENDING, ACCEPTED, REJECTED, CLOSED
	pscConnectionStatus?: null | string @go(PscConnectionStatus,*string)

	// A reference to the region where the regional forwarding rule resides.
	// This field is not applicable to global forwarding rules.
	region?: null | string @go(Region,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// Service Directory resources to register this forwarding rule with.
	// Currently, only supports a single Service Directory resource.
	// Structure is documented below.
	serviceDirectoryRegistrations?: [...#ServiceDirectoryRegistrationsObservation] @go(ServiceDirectoryRegistrations,[]ServiceDirectoryRegistrationsObservation)

	// An optional prefix to the service name for this Forwarding Rule.
	// If specified, will be the first label of the fully qualified service
	// name.
	// The label must be 1-63 characters long, and comply with RFC1035.
	// Specifically, the label must be 1-63 characters long and match the
	// regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first
	// character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// This field is only used for INTERNAL load balancing.
	serviceLabel?: null | string @go(ServiceLabel,*string)

	// The internal fully qualified service name for this Forwarding Rule.
	// This field is only used for INTERNAL load balancing.
	serviceName?: null | string @go(ServiceName,*string)

	// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
	sourceIpRanges?: [...null | string] @go(SourceIPRanges,[]*string)

	// This field identifies the subnetwork that the load balanced IP should
	// belong to for this Forwarding Rule, used in internal load balancing and
	// network load balancing with IPv6.
	// If the network specified is in auto subnet mode, this field is optional.
	// However, a subnetwork must be specified if the network is in custom subnet
	// mode or when creating external forwarding rule with IPv6.
	subnetwork?: null | string @go(Subnetwork,*string)

	// is set to targetGrpcProxy and
	// validateForProxyless is set to true, the
	// IPAddress should be set to 0.0.0.0.
	target?: null | string @go(Target,*string)
}

#ForwardingRuleParameters: {
	// This field can only be used:
	// +kubebuilder:validation:Optional
	allPorts?: null | bool @go(AllPorts,*bool)

	// This field is used along with the backend_service field for
	// internal load balancing or with the target field for internal
	// TargetInstance.
	// If the field is set to TRUE, clients can access ILB from all
	// regions.
	// Otherwise only allows access from clients in the same region as the
	// internal load balancer.
	// +kubebuilder:validation:Optional
	allowGlobalAccess?: null | bool @go(AllowGlobalAccess,*bool)

	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	// +kubebuilder:validation:Optional
	allowPscGlobalAccess?: null | bool @go(AllowPscGlobalAccess,*bool)

	// Identifies the backend service to which the forwarding rule sends traffic.
	// Required for Internal TCP/UDP Load Balancing and Network Load Balancing;
	// must be omitted for all other load balancer types.
	// +crossplane:generate:reference:type=RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	backendService?: null | string @go(BackendService,*string)

	// Reference to a RegionBackendService to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceRef?: null | v1.#Reference @go(BackendServiceRef,*v1.Reference)

	// Selector for a RegionBackendService to populate backendService.
	// +kubebuilder:validation:Optional
	backendServiceSelector?: null | v1.#Selector @go(BackendServiceSelector,*v1.Selector)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// IP address for which this forwarding rule accepts traffic. When a client
	// sends traffic to this IP address, the forwarding rule directs the traffic
	// to the referenced target or backendService.
	// While creating a forwarding rule, specifying an IPAddress is
	// required under the following circumstances:
	// +crossplane:generate:reference:type=Address
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// Reference to a Address to populate ipAddress.
	// +kubebuilder:validation:Optional
	ipAddressRef?: null | v1.#Reference @go(IPAddressRef,*v1.Reference)

	// Selector for a Address to populate ipAddress.
	// +kubebuilder:validation:Optional
	ipAddressSelector?: null | v1.#Selector @go(IPAddressSelector,*v1.Selector)

	// The IP protocol to which this rule applies.
	// For protocol forwarding, valid
	// options are TCP, UDP, ESP,
	// AH, SCTP, ICMP and
	// L3_DEFAULT.
	// The valid IP protocols are different for different load balancing products
	// as described in Load balancing
	// features.
	// Possible values are: TCP, UDP, ESP, AH, SCTP, ICMP, L3_DEFAULT.
	// +kubebuilder:validation:Optional
	ipProtocol?: null | string @go(IPProtocol,*string)

	// Indicates whether or not this load balancer can be used as a collector for
	// packet mirroring. To prevent mirroring loops, instances behind this
	// load balancer will not have their traffic mirrored even if a
	// PacketMirroring rule applies to them.
	// This can only be set to true for load balancers that have their
	// loadBalancingScheme set to INTERNAL.
	// +kubebuilder:validation:Optional
	isMirroringCollector?: null | bool @go(IsMirroringCollector,*bool)

	// Labels to apply to this forwarding rule.  A list of key->value pairs.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the forwarding rule type.
	// For more information about forwarding rules, refer to
	// Forwarding rule concepts.
	// Default value is EXTERNAL.
	// Possible values are: EXTERNAL, EXTERNAL_MANAGED, INTERNAL, INTERNAL_MANAGED.
	// +kubebuilder:validation:Optional
	loadBalancingScheme?: null | string @go(LoadBalancingScheme,*string)

	// This field is not used for external load balancing.
	// For Internal TCP/UDP Load Balancing, this field identifies the network that
	// the load balanced IP should belong to for this Forwarding Rule.
	// If the subnetwork is specified, the network of the subnetwork will be used.
	// If neither subnetwork nor this field is specified, the default network will
	// be used.
	// For Private Service Connect forwarding rules that forward traffic to Google
	// APIs, a network must be provided.
	// +crossplane:generate:reference:type=Network
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Reference to a Network to populate network.
	// +kubebuilder:validation:Optional
	networkRef?: null | v1.#Reference @go(NetworkRef,*v1.Reference)

	// Selector for a Network to populate network.
	// +kubebuilder:validation:Optional
	networkSelector?: null | v1.#Selector @go(NetworkSelector,*v1.Selector)

	// This signifies the networking tier used for configuring
	// this load balancer and can only take the following values:
	// PREMIUM, STANDARD.
	// For regional ForwardingRule, the valid values are PREMIUM and
	// STANDARD. For GlobalForwardingRule, the valid value is
	// PREMIUM.
	// If this field is not specified, it is assumed to be PREMIUM.
	// If IPAddress is specified, this value must be equal to the
	// networkTier of the Address.
	// Possible values are: PREMIUM, STANDARD.
	// +kubebuilder:validation:Optional
	networkTier?: null | string @go(NetworkTier,*string)

	// This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
	// +kubebuilder:validation:Optional
	noAutomateDnsZone?: null | bool @go(NoAutomateDNSZone,*bool)

	// This field can only be used:
	// +kubebuilder:validation:Optional
	portRange?: null | string @go(PortRange,*string)

	// and port_range fields are mutually exclusive.
	// For external forwarding rules, two or more forwarding rules cannot use the
	// same [IPAddress, IPProtocol] pair, and cannot have
	// overlapping portRanges.
	// For internal forwarding rules within the same VPC network, two or more
	// forwarding rules cannot use the same [IPAddress, IPProtocol]
	// pair, and cannot have overlapping portRanges.
	// +kubebuilder:validation:Optional
	ports?: [...null | string] @go(Ports,[]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// A reference to the region where the regional forwarding rule resides.
	// This field is not applicable to global forwarding rules.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Service Directory resources to register this forwarding rule with.
	// Currently, only supports a single Service Directory resource.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	serviceDirectoryRegistrations?: [...#ServiceDirectoryRegistrationsParameters] @go(ServiceDirectoryRegistrations,[]ServiceDirectoryRegistrationsParameters)

	// An optional prefix to the service name for this Forwarding Rule.
	// If specified, will be the first label of the fully qualified service
	// name.
	// The label must be 1-63 characters long, and comply with RFC1035.
	// Specifically, the label must be 1-63 characters long and match the
	// regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first
	// character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// This field is only used for INTERNAL load balancing.
	// +kubebuilder:validation:Optional
	serviceLabel?: null | string @go(ServiceLabel,*string)

	// If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
	// +kubebuilder:validation:Optional
	sourceIpRanges?: [...null | string] @go(SourceIPRanges,[]*string)

	// This field identifies the subnetwork that the load balanced IP should
	// belong to for this Forwarding Rule, used in internal load balancing and
	// network load balancing with IPv6.
	// If the network specified is in auto subnet mode, this field is optional.
	// However, a subnetwork must be specified if the network is in custom subnet
	// mode or when creating external forwarding rule with IPv6.
	// +crossplane:generate:reference:type=Subnetwork
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// Reference to a Subnetwork to populate subnetwork.
	// +kubebuilder:validation:Optional
	subnetworkRef?: null | v1.#Reference @go(SubnetworkRef,*v1.Reference)

	// Selector for a Subnetwork to populate subnetwork.
	// +kubebuilder:validation:Optional
	subnetworkSelector?: null | v1.#Selector @go(SubnetworkSelector,*v1.Selector)

	// is set to targetGrpcProxy and
	// validateForProxyless is set to true, the
	// IPAddress should be set to 0.0.0.0.
	// +crossplane:generate:reference:type=RegionTargetHTTPProxy
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Reference to a RegionTargetHTTPProxy to populate target.
	// +kubebuilder:validation:Optional
	targetRef?: null | v1.#Reference @go(TargetRef,*v1.Reference)

	// Selector for a RegionTargetHTTPProxy to populate target.
	// +kubebuilder:validation:Optional
	targetSelector?: null | v1.#Selector @go(TargetSelector,*v1.Selector)
}

#ServiceDirectoryRegistrationsInitParameters: {
	// Service Directory namespace to register the forwarding rule under.
	namespace?: null | string @go(Namespace,*string)

	// Service Directory service to register the forwarding rule under.
	service?: null | string @go(Service,*string)
}

#ServiceDirectoryRegistrationsObservation: {
	// Service Directory namespace to register the forwarding rule under.
	namespace?: null | string @go(Namespace,*string)

	// Service Directory service to register the forwarding rule under.
	service?: null | string @go(Service,*string)
}

#ServiceDirectoryRegistrationsParameters: {
	// Service Directory namespace to register the forwarding rule under.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Service Directory service to register the forwarding rule under.
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)
}

// ForwardingRuleSpec defines the desired state of ForwardingRule
#ForwardingRuleSpec: {
	v1.#ResourceSpec
	forProvider: #ForwardingRuleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ForwardingRuleInitParameters @go(InitProvider)
}

// ForwardingRuleStatus defines the observed state of ForwardingRule.
#ForwardingRuleStatus: {
	v1.#ResourceStatus
	atProvider?: #ForwardingRuleObservation @go(AtProvider)
}

// ForwardingRule is the Schema for the ForwardingRules API. A ForwardingRule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ForwardingRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #ForwardingRuleSpec   @go(Spec)
	status?:   #ForwardingRuleStatus @go(Status)
}

// ForwardingRuleList contains a list of ForwardingRules
#ForwardingRuleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ForwardingRule] @go(Items,[]ForwardingRule)
}
