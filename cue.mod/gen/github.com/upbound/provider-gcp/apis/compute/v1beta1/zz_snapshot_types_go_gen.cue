// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SnapshotEncryptionKeyInitParameters: {
	// The name of the encryption key that is stored in Google Cloud KMS.
	kmsKeySelfLink?: null | string @go(KMSKeySelfLink,*string)

	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)
}

#SnapshotEncryptionKeyObservation: {
	// The name of the encryption key that is stored in Google Cloud KMS.
	kmsKeySelfLink?: null | string @go(KMSKeySelfLink,*string)

	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)

	// (Output)
	// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
	// encryption key that protects this resource.
	sha256?: null | string @go(Sha256,*string)
}

#SnapshotEncryptionKeyParameters: {
	// The name of the encryption key that is stored in Google Cloud KMS.
	// +kubebuilder:validation:Optional
	kmsKeySelfLink?: null | string @go(KMSKeySelfLink,*string)

	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	// +kubebuilder:validation:Optional
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)

	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Optional
	rawKeySecretRef?: null | v1.#SecretKeySelector @go(RawKeySecretRef,*v1.SecretKeySelector)
}

#SnapshotInitParameters: {
	// Creates the new snapshot in the snapshot chain labeled with the
	// specified name. The chain name must be 1-63 characters long and
	// comply with RFC1035. This is an uncommon option only for advanced
	// service owners who needs to create separate snapshot chains, for
	// example, for chargeback tracking.  When you describe your snapshot
	// resource, this field is visible only if it has a non-empty value.
	chainName?: null | string @go(ChainName,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Labels to apply to this Snapshot.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Encrypts the snapshot using a customer-supplied encryption key.
	// After you encrypt a snapshot using a customer-supplied key, you must
	// provide the same key if you use the snapshot later. For example, you
	// must provide the encryption key when you create a disk from the
	// encrypted snapshot in a future request.
	// Customer-supplied encryption keys do not protect access to metadata of
	// the snapshot.
	// If you do not provide an encryption key when creating the snapshot,
	// then the snapshot will be encrypted using an automatically generated
	// key and you do not need to provide a key to use the snapshot later.
	// Structure is documented below.
	snapshotEncryptionKey?: [...#SnapshotEncryptionKeyInitParameters] @go(SnapshotEncryptionKey,[]SnapshotEncryptionKeyInitParameters)

	// The customer-supplied encryption key of the source snapshot. Required
	// if the source snapshot is protected by a customer-supplied encryption
	// key.
	// Structure is documented below.
	sourceDiskEncryptionKey?: [...#SourceDiskEncryptionKeyInitParameters] @go(SourceDiskEncryptionKey,[]SourceDiskEncryptionKeyInitParameters)

	// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
	storageLocations?: [...null | string] @go(StorageLocations,[]*string)

	// A reference to the zone where the disk is hosted.
	zone?: null | string @go(Zone,*string)
}

#SnapshotObservation: {
	// Creates the new snapshot in the snapshot chain labeled with the
	// specified name. The chain name must be 1-63 characters long and
	// comply with RFC1035. This is an uncommon option only for advanced
	// service owners who needs to create separate snapshot chains, for
	// example, for chargeback tracking.  When you describe your snapshot
	// resource, this field is visible only if it has a non-empty value.
	chainName?: null | string @go(ChainName,*string)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Size of the snapshot, specified in GB.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// an identifier for the resource with format projects/{{project}}/global/snapshots/{{name}}
	id?: null | string @go(ID,*string)

	// The fingerprint used for optimistic locking of this resource. Used
	// internally during updates.
	labelFingerprint?: null | string @go(LabelFingerprint,*string)

	// Labels to apply to this Snapshot.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// A list of public visible licenses that apply to this snapshot. This
	// can be because the original image had licenses attached (such as a
	// Windows image).  snapshotEncryptionKey nested object Encrypts the
	// snapshot using a customer-supplied encryption key.
	licenses?: [...null | string] @go(Licenses,[]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// Encrypts the snapshot using a customer-supplied encryption key.
	// After you encrypt a snapshot using a customer-supplied key, you must
	// provide the same key if you use the snapshot later. For example, you
	// must provide the encryption key when you create a disk from the
	// encrypted snapshot in a future request.
	// Customer-supplied encryption keys do not protect access to metadata of
	// the snapshot.
	// If you do not provide an encryption key when creating the snapshot,
	// then the snapshot will be encrypted using an automatically generated
	// key and you do not need to provide a key to use the snapshot later.
	// Structure is documented below.
	snapshotEncryptionKey?: [...#SnapshotEncryptionKeyObservation] @go(SnapshotEncryptionKey,[]SnapshotEncryptionKeyObservation)

	// The unique identifier for the resource.
	snapshotId?: null | float64 @go(SnapshotID,*float64)

	// A reference to the disk used to create this snapshot.
	sourceDisk?: null | string @go(SourceDisk,*string)

	// The customer-supplied encryption key of the source snapshot. Required
	// if the source snapshot is protected by a customer-supplied encryption
	// key.
	// Structure is documented below.
	sourceDiskEncryptionKey?: [...#SourceDiskEncryptionKeyObservation] @go(SourceDiskEncryptionKey,[]SourceDiskEncryptionKeyObservation)

	// A size of the storage used by the snapshot. As snapshots share
	// storage, this number is expected to change with snapshot
	// creation/deletion.
	storageBytes?: null | float64 @go(StorageBytes,*float64)

	// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
	storageLocations?: [...null | string] @go(StorageLocations,[]*string)

	// A reference to the zone where the disk is hosted.
	zone?: null | string @go(Zone,*string)
}

#SnapshotParameters: {
	// Creates the new snapshot in the snapshot chain labeled with the
	// specified name. The chain name must be 1-63 characters long and
	// comply with RFC1035. This is an uncommon option only for advanced
	// service owners who needs to create separate snapshot chains, for
	// example, for chargeback tracking.  When you describe your snapshot
	// resource, this field is visible only if it has a non-empty value.
	// +kubebuilder:validation:Optional
	chainName?: null | string @go(ChainName,*string)

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Labels to apply to this Snapshot.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Encrypts the snapshot using a customer-supplied encryption key.
	// After you encrypt a snapshot using a customer-supplied key, you must
	// provide the same key if you use the snapshot later. For example, you
	// must provide the encryption key when you create a disk from the
	// encrypted snapshot in a future request.
	// Customer-supplied encryption keys do not protect access to metadata of
	// the snapshot.
	// If you do not provide an encryption key when creating the snapshot,
	// then the snapshot will be encrypted using an automatically generated
	// key and you do not need to provide a key to use the snapshot later.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	snapshotEncryptionKey?: [...#SnapshotEncryptionKeyParameters] @go(SnapshotEncryptionKey,[]SnapshotEncryptionKeyParameters)

	// A reference to the disk used to create this snapshot.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Disk
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	sourceDisk?: null | string @go(SourceDisk,*string)

	// The customer-supplied encryption key of the source snapshot. Required
	// if the source snapshot is protected by a customer-supplied encryption
	// key.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	sourceDiskEncryptionKey?: [...#SourceDiskEncryptionKeyParameters] @go(SourceDiskEncryptionKey,[]SourceDiskEncryptionKeyParameters)

	// Reference to a Disk in compute to populate sourceDisk.
	// +kubebuilder:validation:Optional
	sourceDiskRef?: null | v1.#Reference @go(SourceDiskRef,*v1.Reference)

	// Selector for a Disk in compute to populate sourceDisk.
	// +kubebuilder:validation:Optional
	sourceDiskSelector?: null | v1.#Selector @go(SourceDiskSelector,*v1.Selector)

	// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
	// +kubebuilder:validation:Optional
	storageLocations?: [...null | string] @go(StorageLocations,[]*string)

	// A reference to the zone where the disk is hosted.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#SourceDiskEncryptionKeyInitParameters: {
	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)
}

#SourceDiskEncryptionKeyObservation: {
	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)
}

#SourceDiskEncryptionKeyParameters: {
	// The service account used for the encryption request for the given KMS key.
	// If absent, the Compute Engine Service Agent service account is used.
	// +kubebuilder:validation:Optional
	kmsKeyServiceAccount?: null | string @go(KMSKeyServiceAccount,*string)

	// Specifies a 256-bit customer-supplied encryption key, encoded in
	// RFC 4648 base64 to either encrypt or decrypt this resource.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Optional
	rawKeySecretRef?: null | v1.#SecretKeySelector @go(RawKeySecretRef,*v1.SecretKeySelector)
}

// SnapshotSpec defines the desired state of Snapshot
#SnapshotSpec: {
	v1.#ResourceSpec
	forProvider: #SnapshotParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SnapshotInitParameters @go(InitProvider)
}

// SnapshotStatus defines the observed state of Snapshot.
#SnapshotStatus: {
	v1.#ResourceStatus
	atProvider?: #SnapshotObservation @go(AtProvider)
}

// Snapshot is the Schema for the Snapshots API. Represents a Persistent Disk Snapshot resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Snapshot: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #SnapshotSpec      @go(Spec)
	status?:   #SnapshotStatus    @go(Status)
}

// SnapshotList contains a list of Snapshots
#SnapshotList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Snapshot] @go(Items,[]Snapshot)
}
