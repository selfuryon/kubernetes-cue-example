// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SharedVPCHostProjectInitParameters: {
}

#SharedVPCHostProjectObservation: {
	// an identifier for the resource with format {{project}}
	id?: null | string @go(ID,*string)

	// The ID of the project that will serve as a Shared VPC host project
	project?: null | string @go(Project,*string)
}

#SharedVPCHostProjectParameters: {
	// The ID of the project that will serve as a Shared VPC host project
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractProjectID()
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	projectRef?: null | v1.#Reference @go(ProjectRef,*v1.Reference)

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	projectSelector?: null | v1.#Selector @go(ProjectSelector,*v1.Selector)
}

// SharedVPCHostProjectSpec defines the desired state of SharedVPCHostProject
#SharedVPCHostProjectSpec: {
	v1.#ResourceSpec
	forProvider: #SharedVPCHostProjectParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SharedVPCHostProjectInitParameters @go(InitProvider)
}

// SharedVPCHostProjectStatus defines the observed state of SharedVPCHostProject.
#SharedVPCHostProjectStatus: {
	v1.#ResourceStatus
	atProvider?: #SharedVPCHostProjectObservation @go(AtProvider)
}

// SharedVPCHostProject is the Schema for the SharedVPCHostProjects API. Enables the Google Compute Engine Shared VPC feature for a project, assigning it as a host project.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#SharedVPCHostProject: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta          @go(ObjectMeta)
	spec:      #SharedVPCHostProjectSpec   @go(Spec)
	status?:   #SharedVPCHostProjectStatus @go(Status)
}

// SharedVPCHostProjectList contains a list of SharedVPCHostProjects
#SharedVPCHostProjectList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SharedVPCHostProject] @go(Items,[]SharedVPCHostProject)
}
