// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RouterInterfaceInitParameters: {
	// IP address and range of the interface. The IP range must be
	// in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
	ipRange?: null | string @go(IPRange,*string)

	// The name or resource link to the
	// VLAN interconnect for this interface. Changing this forces a new interface to
	// be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	interconnectAttachment?: null | string @go(InterconnectAttachment,*string)

	// A unique name for the interface, required by GCE. Changing
	// this forces a new interface to be created.
	name?: null | string @go(Name,*string)

	// The regional private internal IP address that is used
	// to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The ID of the project in which this interface's router belongs.
	// If it is not provided, the provider project is used. Changing this forces a new interface to be created.
	project?: null | string @go(Project,*string)

	// The name of the interface that is redundant to
	// this interface. Changing this forces a new interface to be created.
	redundantInterface?: null | string @go(RedundantInterface,*string)

	// The region this interface's router sits in.
	// If not specified, the project region will be used. Changing this forces a new interface to be created.
	region?: null | string @go(Region,*string)

	// The URI of the subnetwork resource that this interface
	// belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	subnetwork?: null | string @go(Subnetwork,*string)
}

#RouterInterfaceObservation: {
	// an identifier for the resource with format {{region}}/{{router}}/{{name}}
	id?: null | string @go(ID,*string)

	// IP address and range of the interface. The IP range must be
	// in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
	ipRange?: null | string @go(IPRange,*string)

	// The name or resource link to the
	// VLAN interconnect for this interface. Changing this forces a new interface to
	// be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	interconnectAttachment?: null | string @go(InterconnectAttachment,*string)

	// A unique name for the interface, required by GCE. Changing
	// this forces a new interface to be created.
	name?: null | string @go(Name,*string)

	// The regional private internal IP address that is used
	// to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The ID of the project in which this interface's router belongs.
	// If it is not provided, the provider project is used. Changing this forces a new interface to be created.
	project?: null | string @go(Project,*string)

	// The name of the interface that is redundant to
	// this interface. Changing this forces a new interface to be created.
	redundantInterface?: null | string @go(RedundantInterface,*string)

	// The region this interface's router sits in.
	// If not specified, the project region will be used. Changing this forces a new interface to be created.
	region?: null | string @go(Region,*string)

	// The name of the router this interface will be attached to.
	// Changing this forces a new interface to be created.
	router?: null | string @go(Router,*string)

	// The URI of the subnetwork resource that this interface
	// belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	subnetwork?: null | string @go(Subnetwork,*string)

	// The name or resource link to the VPN tunnel this
	// interface will be linked to. Changing this forces a new interface to be created. Only
	// one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	vpnTunnel?: null | string @go(VPNTunnel,*string)
}

#RouterInterfaceParameters: {
	// IP address and range of the interface. The IP range must be
	// in the RFC3927 link-local IP space. Changing this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	ipRange?: null | string @go(IPRange,*string)

	// The name or resource link to the
	// VLAN interconnect for this interface. Changing this forces a new interface to
	// be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	// +kubebuilder:validation:Optional
	interconnectAttachment?: null | string @go(InterconnectAttachment,*string)

	// A unique name for the interface, required by GCE. Changing
	// this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The regional private internal IP address that is used
	// to establish BGP sessions to a VM instance acting as a third-party Router Appliance. Changing this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The ID of the project in which this interface's router belongs.
	// If it is not provided, the provider project is used. Changing this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The name of the interface that is redundant to
	// this interface. Changing this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	redundantInterface?: null | string @go(RedundantInterface,*string)

	// The region this interface's router sits in.
	// If not specified, the project region will be used. Changing this forces a new interface to be created.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The name of the router this interface will be attached to.
	// Changing this forces a new interface to be created.
	// +crossplane:generate:reference:type=Router
	// +kubebuilder:validation:Optional
	router?: null | string @go(Router,*string)

	// Reference to a Router to populate router.
	// +kubebuilder:validation:Optional
	routerRef?: null | v1.#Reference @go(RouterRef,*v1.Reference)

	// Selector for a Router to populate router.
	// +kubebuilder:validation:Optional
	routerSelector?: null | v1.#Selector @go(RouterSelector,*v1.Selector)

	// The URI of the subnetwork resource that this interface
	// belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here. Changing this forces a new interface to be created. Only one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// The name or resource link to the VPN tunnel this
	// interface will be linked to. Changing this forces a new interface to be created. Only
	// one of vpn_tunnel, interconnect_attachment or subnetwork can be specified.
	// +crossplane:generate:reference:type=VPNTunnel
	// +kubebuilder:validation:Optional
	vpnTunnel?: null | string @go(VPNTunnel,*string)

	// Reference to a VPNTunnel to populate vpnTunnel.
	// +kubebuilder:validation:Optional
	vpnTunnelRef?: null | v1.#Reference @go(VPNTunnelRef,*v1.Reference)

	// Selector for a VPNTunnel to populate vpnTunnel.
	// +kubebuilder:validation:Optional
	vpnTunnelSelector?: null | v1.#Selector @go(VPNTunnelSelector,*v1.Selector)
}

// RouterInterfaceSpec defines the desired state of RouterInterface
#RouterInterfaceSpec: {
	v1.#ResourceSpec
	forProvider: #RouterInterfaceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RouterInterfaceInitParameters @go(InitProvider)
}

// RouterInterfaceStatus defines the observed state of RouterInterface.
#RouterInterfaceStatus: {
	v1.#ResourceStatus
	atProvider?: #RouterInterfaceObservation @go(AtProvider)
}

// RouterInterface is the Schema for the RouterInterfaces API. Manages a Cloud Router interface.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#RouterInterface: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #RouterInterfaceSpec   @go(Spec)
	status?: #RouterInterfaceStatus @go(Status)
}

// RouterInterfaceList contains a list of RouterInterfaces
#RouterInterfaceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RouterInterface] @go(Items,[]RouterInterface)
}
