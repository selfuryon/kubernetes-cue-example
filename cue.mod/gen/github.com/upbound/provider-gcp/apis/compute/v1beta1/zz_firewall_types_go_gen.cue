// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AllowInitParameters: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	protocol?: null | string @go(Protocol,*string)
}

#AllowObservation: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	protocol?: null | string @go(Protocol,*string)
}

#AllowParameters: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	// +kubebuilder:validation:Optional
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#DenyInitParameters: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	protocol?: null | string @go(Protocol,*string)
}

#DenyObservation: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	protocol?: null | string @go(Protocol,*string)
}

#DenyParameters: {
	// An optional list of ports to which this rule applies. This field
	// is only applicable for UDP or TCP protocol. Each entry must be
	// either an integer or a range. If not specified, this rule
	// applies to connections through any port.
	// Example inputs include: ["22"], ["80","443"], and
	// ["12345-12349"].
	// +kubebuilder:validation:Optional
	ports?: [...null | string] @go(Ports,[]*string)

	// The IP protocol to which this rule applies. The protocol type is
	// required when creating a firewall rule. This value can either be
	// one of the following well known protocol strings (tcp, udp,
	// icmp, esp, ah, sctp, ipip, all), or the IP protocol number.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#FirewallInitParameters: {
	// The list of ALLOW rules specified by this firewall. Each rule
	// specifies a protocol and port-range tuple that describes a permitted
	// connection.
	// Structure is documented below.
	allow?: [...#AllowInitParameters] @go(Allow,[]AllowInitParameters)

	// The list of DENY rules specified by this firewall. Each rule specifies
	// a protocol and port-range tuple that describes a denied connection.
	// Structure is documented below.
	deny?: [...#DenyInitParameters] @go(Deny,[]DenyInitParameters)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// If destination ranges are specified, the firewall will apply only to
	// traffic that has destination IP address in these ranges. These ranges
	// must be expressed in CIDR format. IPv4 or IPv6 ranges are supported.
	destinationRanges?: [...null | string] @go(DestinationRanges,[]*string)

	// Direction of traffic to which this firewall applies; default is
	// INGRESS. Note: For INGRESS traffic, one of source_ranges,
	// source_tags or source_service_accounts is required.
	// Possible values are: INGRESS, EGRESS.
	direction?: null | string @go(Direction,*string)

	// Denotes whether the firewall rule is disabled, i.e not applied to the
	// network it is associated with. When set to true, the firewall rule is
	// not enforced and the network behaves as if it did not exist. If this
	// is unspecified, the firewall rule will be enabled.
	disabled?: null | bool @go(Disabled,*bool)

	// This field denotes whether to enable logging for a particular firewall rule.
	// If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of log_config
	enableLogging?: null | bool @go(EnableLogging,*bool)

	// This field denotes the logging options for a particular firewall rule.
	// If defined, logging is enabled, and logs will be exported to Cloud Logging.
	// Structure is documented below.
	logConfig?: [...#FirewallLogConfigInitParameters] @go(LogConfig,[]FirewallLogConfigInitParameters)

	// Priority for this rule. This is an integer between 0 and 65535, both
	// inclusive. When not specified, the value assumed is 1000. Relative
	// priorities determine precedence of conflicting rules. Lower value of
	// priority implies higher precedence (eg, a rule with priority 0 has
	// higher precedence than a rule with priority 1). DENY rules take
	// precedence over ALLOW rules having equal priority.
	priority?: null | float64 @go(Priority,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// If source ranges are specified, the firewall will apply only to
	// traffic that has source IP address in these ranges. These ranges must
	// be expressed in CIDR format. One or both of sourceRanges and
	// sourceTags may be set. If both properties are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP that belongs to a tag listed in the sourceTags property. The
	// connection does not need to match both properties for the firewall to
	// apply. IPv4 or IPv6 ranges are supported. For INGRESS traffic, one of
	// source_ranges, source_tags or source_service_accounts is required.
	sourceRanges?: [...null | string] @go(SourceRanges,[]*string)

	// If source service accounts are specified, the firewall will apply only
	// to traffic originating from an instance with a service account in this
	// list. Source service accounts cannot be used to control traffic to an
	// instance's external IP address because service accounts are associated
	// with an instance, not an IP address. sourceRanges can be set at the
	// same time as sourceServiceAccounts. If both are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP belongs to an instance with service account listed in
	// sourceServiceAccount. The connection does not need to match both
	// properties for the firewall to apply. sourceServiceAccounts cannot be
	// used at the same time as sourceTags or targetTags. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	sourceServiceAccounts?: [...null | string] @go(SourceServiceAccounts,[]*string)

	// If source tags are specified, the firewall will apply only to traffic
	// with source IP that belongs to a tag listed in source tags. Source
	// tags cannot be used to control traffic to an instance's external IP
	// address. Because tags are associated with an instance, not an IP
	// address. One or both of sourceRanges and sourceTags may be set. If
	// both properties are set, the firewall will apply to traffic that has
	// source IP address within sourceRanges OR the source IP that belongs to
	// a tag listed in the sourceTags property. The connection does not need
	// to match both properties for the firewall to apply. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	sourceTags?: [...null | string] @go(SourceTags,[]*string)

	// A list of service accounts indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// targetServiceAccounts cannot be used at the same time as targetTags or
	// sourceTags. If neither targetServiceAccounts nor targetTags are
	// specified, the firewall rule applies to all instances on the specified
	// network.
	targetServiceAccounts?: [...null | string] @go(TargetServiceAccounts,[]*string)

	// A list of instance tags indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// If no targetTags are specified, the firewall rule applies to all
	// instances on the specified network.
	targetTags?: [...null | string] @go(TargetTags,[]*string)
}

#FirewallLogConfigInitParameters: {
	// This field denotes whether to include or exclude metadata for firewall logs.
	// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA.
	metadata?: null | string @go(Metadata,*string)
}

#FirewallLogConfigObservation: {
	// This field denotes whether to include or exclude metadata for firewall logs.
	// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA.
	metadata?: null | string @go(Metadata,*string)
}

#FirewallLogConfigParameters: {
	// This field denotes whether to include or exclude metadata for firewall logs.
	// Possible values are: EXCLUDE_ALL_METADATA, INCLUDE_ALL_METADATA.
	// +kubebuilder:validation:Optional
	metadata?: null | string @go(Metadata,*string)
}

#FirewallObservation: {
	// The list of ALLOW rules specified by this firewall. Each rule
	// specifies a protocol and port-range tuple that describes a permitted
	// connection.
	// Structure is documented below.
	allow?: [...#AllowObservation] @go(Allow,[]AllowObservation)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// The list of DENY rules specified by this firewall. Each rule specifies
	// a protocol and port-range tuple that describes a denied connection.
	// Structure is documented below.
	deny?: [...#DenyObservation] @go(Deny,[]DenyObservation)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// If destination ranges are specified, the firewall will apply only to
	// traffic that has destination IP address in these ranges. These ranges
	// must be expressed in CIDR format. IPv4 or IPv6 ranges are supported.
	destinationRanges?: [...null | string] @go(DestinationRanges,[]*string)

	// Direction of traffic to which this firewall applies; default is
	// INGRESS. Note: For INGRESS traffic, one of source_ranges,
	// source_tags or source_service_accounts is required.
	// Possible values are: INGRESS, EGRESS.
	direction?: null | string @go(Direction,*string)

	// Denotes whether the firewall rule is disabled, i.e not applied to the
	// network it is associated with. When set to true, the firewall rule is
	// not enforced and the network behaves as if it did not exist. If this
	// is unspecified, the firewall rule will be enabled.
	disabled?: null | bool @go(Disabled,*bool)

	// This field denotes whether to enable logging for a particular firewall rule.
	// If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of log_config
	enableLogging?: null | bool @go(EnableLogging,*bool)

	// an identifier for the resource with format projects/{{project}}/global/firewalls/{{name}}
	id?: null | string @go(ID,*string)

	// This field denotes the logging options for a particular firewall rule.
	// If defined, logging is enabled, and logs will be exported to Cloud Logging.
	// Structure is documented below.
	logConfig?: [...#FirewallLogConfigObservation] @go(LogConfig,[]FirewallLogConfigObservation)

	// The name or self_link of the network to attach this firewall to.
	network?: null | string @go(Network,*string)

	// Priority for this rule. This is an integer between 0 and 65535, both
	// inclusive. When not specified, the value assumed is 1000. Relative
	// priorities determine precedence of conflicting rules. Lower value of
	// priority implies higher precedence (eg, a rule with priority 0 has
	// higher precedence than a rule with priority 1). DENY rules take
	// precedence over ALLOW rules having equal priority.
	priority?: null | float64 @go(Priority,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// If source ranges are specified, the firewall will apply only to
	// traffic that has source IP address in these ranges. These ranges must
	// be expressed in CIDR format. One or both of sourceRanges and
	// sourceTags may be set. If both properties are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP that belongs to a tag listed in the sourceTags property. The
	// connection does not need to match both properties for the firewall to
	// apply. IPv4 or IPv6 ranges are supported. For INGRESS traffic, one of
	// source_ranges, source_tags or source_service_accounts is required.
	sourceRanges?: [...null | string] @go(SourceRanges,[]*string)

	// If source service accounts are specified, the firewall will apply only
	// to traffic originating from an instance with a service account in this
	// list. Source service accounts cannot be used to control traffic to an
	// instance's external IP address because service accounts are associated
	// with an instance, not an IP address. sourceRanges can be set at the
	// same time as sourceServiceAccounts. If both are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP belongs to an instance with service account listed in
	// sourceServiceAccount. The connection does not need to match both
	// properties for the firewall to apply. sourceServiceAccounts cannot be
	// used at the same time as sourceTags or targetTags. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	sourceServiceAccounts?: [...null | string] @go(SourceServiceAccounts,[]*string)

	// If source tags are specified, the firewall will apply only to traffic
	// with source IP that belongs to a tag listed in source tags. Source
	// tags cannot be used to control traffic to an instance's external IP
	// address. Because tags are associated with an instance, not an IP
	// address. One or both of sourceRanges and sourceTags may be set. If
	// both properties are set, the firewall will apply to traffic that has
	// source IP address within sourceRanges OR the source IP that belongs to
	// a tag listed in the sourceTags property. The connection does not need
	// to match both properties for the firewall to apply. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	sourceTags?: [...null | string] @go(SourceTags,[]*string)

	// A list of service accounts indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// targetServiceAccounts cannot be used at the same time as targetTags or
	// sourceTags. If neither targetServiceAccounts nor targetTags are
	// specified, the firewall rule applies to all instances on the specified
	// network.
	targetServiceAccounts?: [...null | string] @go(TargetServiceAccounts,[]*string)

	// A list of instance tags indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// If no targetTags are specified, the firewall rule applies to all
	// instances on the specified network.
	targetTags?: [...null | string] @go(TargetTags,[]*string)
}

#FirewallParameters: {
	// The list of ALLOW rules specified by this firewall. Each rule
	// specifies a protocol and port-range tuple that describes a permitted
	// connection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	allow?: [...#AllowParameters] @go(Allow,[]AllowParameters)

	// The list of DENY rules specified by this firewall. Each rule specifies
	// a protocol and port-range tuple that describes a denied connection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	deny?: [...#DenyParameters] @go(Deny,[]DenyParameters)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// If destination ranges are specified, the firewall will apply only to
	// traffic that has destination IP address in these ranges. These ranges
	// must be expressed in CIDR format. IPv4 or IPv6 ranges are supported.
	// +kubebuilder:validation:Optional
	destinationRanges?: [...null | string] @go(DestinationRanges,[]*string)

	// Direction of traffic to which this firewall applies; default is
	// INGRESS. Note: For INGRESS traffic, one of source_ranges,
	// source_tags or source_service_accounts is required.
	// Possible values are: INGRESS, EGRESS.
	// +kubebuilder:validation:Optional
	direction?: null | string @go(Direction,*string)

	// Denotes whether the firewall rule is disabled, i.e not applied to the
	// network it is associated with. When set to true, the firewall rule is
	// not enforced and the network behaves as if it did not exist. If this
	// is unspecified, the firewall rule will be enabled.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// This field denotes whether to enable logging for a particular firewall rule.
	// If logging is enabled, logs will be exported to Stackdriver. Deprecated in favor of log_config
	// +kubebuilder:validation:Optional
	enableLogging?: null | bool @go(EnableLogging,*bool)

	// This field denotes the logging options for a particular firewall rule.
	// If defined, logging is enabled, and logs will be exported to Cloud Logging.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	logConfig?: [...#FirewallLogConfigParameters] @go(LogConfig,[]FirewallLogConfigParameters)

	// The name or self_link of the network to attach this firewall to.
	// +crossplane:generate:reference:type=Network
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Reference to a Network to populate network.
	// +kubebuilder:validation:Optional
	networkRef?: null | v1.#Reference @go(NetworkRef,*v1.Reference)

	// Selector for a Network to populate network.
	// +kubebuilder:validation:Optional
	networkSelector?: null | v1.#Selector @go(NetworkSelector,*v1.Selector)

	// Priority for this rule. This is an integer between 0 and 65535, both
	// inclusive. When not specified, the value assumed is 1000. Relative
	// priorities determine precedence of conflicting rules. Lower value of
	// priority implies higher precedence (eg, a rule with priority 0 has
	// higher precedence than a rule with priority 1). DENY rules take
	// precedence over ALLOW rules having equal priority.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// If source ranges are specified, the firewall will apply only to
	// traffic that has source IP address in these ranges. These ranges must
	// be expressed in CIDR format. One or both of sourceRanges and
	// sourceTags may be set. If both properties are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP that belongs to a tag listed in the sourceTags property. The
	// connection does not need to match both properties for the firewall to
	// apply. IPv4 or IPv6 ranges are supported. For INGRESS traffic, one of
	// source_ranges, source_tags or source_service_accounts is required.
	// +kubebuilder:validation:Optional
	sourceRanges?: [...null | string] @go(SourceRanges,[]*string)

	// If source service accounts are specified, the firewall will apply only
	// to traffic originating from an instance with a service account in this
	// list. Source service accounts cannot be used to control traffic to an
	// instance's external IP address because service accounts are associated
	// with an instance, not an IP address. sourceRanges can be set at the
	// same time as sourceServiceAccounts. If both are set, the firewall will
	// apply to traffic that has source IP address within sourceRanges OR the
	// source IP belongs to an instance with service account listed in
	// sourceServiceAccount. The connection does not need to match both
	// properties for the firewall to apply. sourceServiceAccounts cannot be
	// used at the same time as sourceTags or targetTags. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	// +kubebuilder:validation:Optional
	sourceServiceAccounts?: [...null | string] @go(SourceServiceAccounts,[]*string)

	// If source tags are specified, the firewall will apply only to traffic
	// with source IP that belongs to a tag listed in source tags. Source
	// tags cannot be used to control traffic to an instance's external IP
	// address. Because tags are associated with an instance, not an IP
	// address. One or both of sourceRanges and sourceTags may be set. If
	// both properties are set, the firewall will apply to traffic that has
	// source IP address within sourceRanges OR the source IP that belongs to
	// a tag listed in the sourceTags property. The connection does not need
	// to match both properties for the firewall to apply. For INGRESS traffic,
	// one of source_ranges, source_tags or source_service_accounts is required.
	// +kubebuilder:validation:Optional
	sourceTags?: [...null | string] @go(SourceTags,[]*string)

	// A list of service accounts indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// targetServiceAccounts cannot be used at the same time as targetTags or
	// sourceTags. If neither targetServiceAccounts nor targetTags are
	// specified, the firewall rule applies to all instances on the specified
	// network.
	// +kubebuilder:validation:Optional
	targetServiceAccounts?: [...null | string] @go(TargetServiceAccounts,[]*string)

	// A list of instance tags indicating sets of instances located in the
	// network that may make network connections as specified in allowed[].
	// If no targetTags are specified, the firewall rule applies to all
	// instances on the specified network.
	// +kubebuilder:validation:Optional
	targetTags?: [...null | string] @go(TargetTags,[]*string)
}

// FirewallSpec defines the desired state of Firewall
#FirewallSpec: {
	v1.#ResourceSpec
	forProvider: #FirewallParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FirewallInitParameters @go(InitProvider)
}

// FirewallStatus defines the observed state of Firewall.
#FirewallStatus: {
	v1.#ResourceStatus
	atProvider?: #FirewallObservation @go(AtProvider)
}

// Firewall is the Schema for the Firewalls API. Each network has its own firewall controlling access to and from the instances.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Firewall: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #FirewallSpec      @go(Spec)
	status?:   #FirewallStatus    @go(Status)
}

// FirewallList contains a list of Firewalls
#FirewallList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Firewall] @go(Items,[]Firewall)
}
