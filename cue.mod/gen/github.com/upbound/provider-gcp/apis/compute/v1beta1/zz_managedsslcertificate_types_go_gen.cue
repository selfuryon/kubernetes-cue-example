// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ManagedInitParameters: {
	// Domains for which a managed SSL certificate will be valid.  Currently,
	// there can be up to 100 domains in this list.
	domains?: [...null | string] @go(Domains,[]*string)
}

#ManagedObservation: {
	// Domains for which a managed SSL certificate will be valid.  Currently,
	// there can be up to 100 domains in this list.
	domains?: [...null | string] @go(Domains,[]*string)
}

#ManagedParameters: {
	// Domains for which a managed SSL certificate will be valid.  Currently,
	// there can be up to 100 domains in this list.
	// +kubebuilder:validation:Optional
	domains: [...null | string] @go(Domains,[]*string)
}

#ManagedSSLCertificateInitParameters: {
	// The unique identifier for the resource.
	certificateId?: null | float64 @go(CertificateID,*float64)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Properties relevant to a managed certificate.  These will be used if the
	// certificate is managed (as indicated by a value of MANAGED in type).
	// Structure is documented below.
	managed?: [...#ManagedInitParameters] @go(Managed,[]ManagedInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Enum field whose value is always MANAGED - used to signal to the API
	// which type this is.
	// Default value is MANAGED.
	// Possible values are: MANAGED.
	type?: null | string @go(Type,*string)
}

#ManagedSSLCertificateObservation: {
	// The unique identifier for the resource.
	certificateId?: null | float64 @go(CertificateID,*float64)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Expire time of the certificate in RFC3339 text format.
	expireTime?: null | string @go(ExpireTime,*string)

	// an identifier for the resource with format projects/{{project}}/global/sslCertificates/{{name}}
	id?: null | string @go(ID,*string)

	// Properties relevant to a managed certificate.  These will be used if the
	// certificate is managed (as indicated by a value of MANAGED in type).
	// Structure is documented below.
	managed?: [...#ManagedObservation] @go(Managed,[]ManagedObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// Domains associated with the certificate via Subject Alternative Name.
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)

	// Enum field whose value is always MANAGED - used to signal to the API
	// which type this is.
	// Default value is MANAGED.
	// Possible values are: MANAGED.
	type?: null | string @go(Type,*string)
}

#ManagedSSLCertificateParameters: {
	// The unique identifier for the resource.
	// +kubebuilder:validation:Optional
	certificateId?: null | float64 @go(CertificateID,*float64)

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Properties relevant to a managed certificate.  These will be used if the
	// certificate is managed (as indicated by a value of MANAGED in type).
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	managed?: [...#ManagedParameters] @go(Managed,[]ManagedParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Enum field whose value is always MANAGED - used to signal to the API
	// which type this is.
	// Default value is MANAGED.
	// Possible values are: MANAGED.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// ManagedSSLCertificateSpec defines the desired state of ManagedSSLCertificate
#ManagedSSLCertificateSpec: {
	v1.#ResourceSpec
	forProvider: #ManagedSSLCertificateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ManagedSSLCertificateInitParameters @go(InitProvider)
}

// ManagedSSLCertificateStatus defines the observed state of ManagedSSLCertificate.
#ManagedSSLCertificateStatus: {
	v1.#ResourceStatus
	atProvider?: #ManagedSSLCertificateObservation @go(AtProvider)
}

// ManagedSSLCertificate is the Schema for the ManagedSSLCertificates API. An SslCertificate resource, used for HTTPS load balancing.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ManagedSSLCertificate: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #ManagedSSLCertificateSpec   @go(Spec)
	status?:   #ManagedSSLCertificateStatus @go(Status)
}

// ManagedSSLCertificateList contains a list of ManagedSSLCertificates
#ManagedSSLCertificateList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ManagedSSLCertificate] @go(Items,[]ManagedSSLCertificate)
}
