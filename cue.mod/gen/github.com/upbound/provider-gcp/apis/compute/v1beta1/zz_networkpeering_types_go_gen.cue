// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NetworkPeeringInitParameters: {
	// Whether to export the custom routes to the peer network. Defaults to false.
	exportCustomRoutes?: null | bool @go(ExportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	exportSubnetRoutesWithPublicIp?: null | bool @go(ExportSubnetRoutesWithPublicIP,*bool)

	// Whether to import the custom routes from the peer network. Defaults to false.
	importCustomRoutes?: null | bool @go(ImportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
	importSubnetRoutesWithPublicIp?: null | bool @go(ImportSubnetRoutesWithPublicIP,*bool)

	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"].
	stackType?: null | string @go(StackType,*string)
}

#NetworkPeeringObservation: {
	// Whether to export the custom routes to the peer network. Defaults to false.
	exportCustomRoutes?: null | bool @go(ExportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	exportSubnetRoutesWithPublicIp?: null | bool @go(ExportSubnetRoutesWithPublicIP,*bool)

	// an identifier for the resource with format {{network}}/{{name}}
	id?: null | string @go(ID,*string)

	// Whether to import the custom routes from the peer network. Defaults to false.
	importCustomRoutes?: null | bool @go(ImportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
	importSubnetRoutesWithPublicIp?: null | bool @go(ImportSubnetRoutesWithPublicIP,*bool)

	// The primary network of the peering.
	network?: null | string @go(Network,*string)

	// The peer network in the peering. The peer network
	// may belong to a different project.
	peerNetwork?: null | string @go(PeerNetwork,*string)

	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"].
	stackType?: null | string @go(StackType,*string)

	// State for the peering, either ACTIVE or INACTIVE. The peering is
	// ACTIVE when there's a matching configuration in the peer network.
	state?: null | string @go(State,*string)

	// Details about the current state of the peering.
	stateDetails?: null | string @go(StateDetails,*string)
}

#NetworkPeeringParameters: {
	// Whether to export the custom routes to the peer network. Defaults to false.
	// +kubebuilder:validation:Optional
	exportCustomRoutes?: null | bool @go(ExportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	// +kubebuilder:validation:Optional
	exportSubnetRoutesWithPublicIp?: null | bool @go(ExportSubnetRoutesWithPublicIP,*bool)

	// Whether to import the custom routes from the peer network. Defaults to false.
	// +kubebuilder:validation:Optional
	importCustomRoutes?: null | bool @go(ImportCustomRoutes,*bool)

	// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
	// +kubebuilder:validation:Optional
	importSubnetRoutesWithPublicIp?: null | bool @go(ImportSubnetRoutesWithPublicIP,*bool)

	// The primary network of the peering.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("self_link",true)
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	networkRef?: null | v1.#Reference @go(NetworkRef,*v1.Reference)

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	networkSelector?: null | v1.#Selector @go(NetworkSelector,*v1.Selector)

	// The peer network in the peering. The peer network
	// may belong to a different project.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("self_link",true)
	// +kubebuilder:validation:Optional
	peerNetwork?: null | string @go(PeerNetwork,*string)

	// Reference to a Network in compute to populate peerNetwork.
	// +kubebuilder:validation:Optional
	peerNetworkRef?: null | v1.#Reference @go(PeerNetworkRef,*v1.Reference)

	// Selector for a Network in compute to populate peerNetwork.
	// +kubebuilder:validation:Optional
	peerNetworkSelector?: null | v1.#Selector @go(PeerNetworkSelector,*v1.Selector)

	// Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. Possible values: ["IPV4_ONLY", "IPV4_IPV6"].
	// +kubebuilder:validation:Optional
	stackType?: null | string @go(StackType,*string)
}

// NetworkPeeringSpec defines the desired state of NetworkPeering
#NetworkPeeringSpec: {
	v1.#ResourceSpec
	forProvider: #NetworkPeeringParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NetworkPeeringInitParameters @go(InitProvider)
}

// NetworkPeeringStatus defines the observed state of NetworkPeering.
#NetworkPeeringStatus: {
	v1.#ResourceStatus
	atProvider?: #NetworkPeeringObservation @go(AtProvider)
}

// NetworkPeering is the Schema for the NetworkPeerings API. Manages a network peering within GCE.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#NetworkPeering: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #NetworkPeeringSpec   @go(Spec)
	status?:   #NetworkPeeringStatus @go(Status)
}

// NetworkPeeringList contains a list of NetworkPeerings
#NetworkPeeringList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkPeering] @go(Items,[]NetworkPeering)
}
