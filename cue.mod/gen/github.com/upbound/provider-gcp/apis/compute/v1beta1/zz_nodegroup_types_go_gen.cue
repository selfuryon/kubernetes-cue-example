// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#MaintenanceWindowInitParameters: {
	// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceWindowObservation: {
	// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceWindowParameters: {
	// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)
}

#NodeGroupAutoscalingPolicyInitParameters: {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The autoscaling mode. Set to one of the following:
	mode?: null | string @go(Mode,*string)
}

#NodeGroupAutoscalingPolicyObservation: {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The autoscaling mode. Set to one of the following:
	mode?: null | string @go(Mode,*string)
}

#NodeGroupAutoscalingPolicyParameters: {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	// +kubebuilder:validation:Optional
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	// +kubebuilder:validation:Optional
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The autoscaling mode. Set to one of the following:
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)
}

#NodeGroupInitParameters: {
	// If you use sole-tenant nodes for your workloads, you can use the node
	// group autoscaler to automatically manage the sizes of your node groups.
	// Structure is documented below.
	autoscalingPolicy?: [...#NodeGroupAutoscalingPolicyInitParameters] @go(AutoscalingPolicy,[]NodeGroupAutoscalingPolicyInitParameters)

	// An optional textual description of the resource.
	description?: null | string @go(Description,*string)

	// The initial number of nodes in the node group. One of initial_size or size must be specified.
	initialSize?: null | float64 @go(InitialSize,*float64)

	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	maintenancePolicy?: null | string @go(MaintenancePolicy,*string)

	// contains properties for the timeframe of maintenance
	// Structure is documented below.
	maintenanceWindow?: [...#MaintenanceWindowInitParameters] @go(MaintenanceWindow,[]MaintenanceWindowInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Share settings for the node group.
	// Structure is documented below.
	shareSettings?: [...#ShareSettingsInitParameters] @go(ShareSettings,[]ShareSettingsInitParameters)

	// The total number of nodes in the node group. One of initial_size or size must be specified.
	size?: null | float64 @go(Size,*float64)
}

#NodeGroupObservation: {
	// If you use sole-tenant nodes for your workloads, you can use the node
	// group autoscaler to automatically manage the sizes of your node groups.
	// Structure is documented below.
	autoscalingPolicy?: [...#NodeGroupAutoscalingPolicyObservation] @go(AutoscalingPolicy,[]NodeGroupAutoscalingPolicyObservation)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional textual description of the resource.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/nodeGroups/{{name}}
	id?: null | string @go(ID,*string)

	// The initial number of nodes in the node group. One of initial_size or size must be specified.
	initialSize?: null | float64 @go(InitialSize,*float64)

	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	maintenancePolicy?: null | string @go(MaintenancePolicy,*string)

	// contains properties for the timeframe of maintenance
	// Structure is documented below.
	maintenanceWindow?: [...#MaintenanceWindowObservation] @go(MaintenanceWindow,[]MaintenanceWindowObservation)

	// The URL of the node template to which this node group belongs.
	nodeTemplate?: null | string @go(NodeTemplate,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// Share settings for the node group.
	// Structure is documented below.
	shareSettings?: [...#ShareSettingsObservation] @go(ShareSettings,[]ShareSettingsObservation)

	// The total number of nodes in the node group. One of initial_size or size must be specified.
	size?: null | float64 @go(Size,*float64)

	// Zone where this node group is located
	zone?: null | string @go(Zone,*string)
}

#NodeGroupParameters: {
	// If you use sole-tenant nodes for your workloads, you can use the node
	// group autoscaler to automatically manage the sizes of your node groups.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	autoscalingPolicy?: [...#NodeGroupAutoscalingPolicyParameters] @go(AutoscalingPolicy,[]NodeGroupAutoscalingPolicyParameters)

	// An optional textual description of the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The initial number of nodes in the node group. One of initial_size or size must be specified.
	// +kubebuilder:validation:Optional
	initialSize?: null | float64 @go(InitialSize,*float64)

	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	// +kubebuilder:validation:Optional
	maintenancePolicy?: null | string @go(MaintenancePolicy,*string)

	// contains properties for the timeframe of maintenance
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	maintenanceWindow?: [...#MaintenanceWindowParameters] @go(MaintenanceWindow,[]MaintenanceWindowParameters)

	// The URL of the node template to which this node group belongs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.NodeTemplate
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	nodeTemplate?: null | string @go(NodeTemplate,*string)

	// Reference to a NodeTemplate in compute to populate nodeTemplate.
	// +kubebuilder:validation:Optional
	nodeTemplateRef?: null | v1.#Reference @go(NodeTemplateRef,*v1.Reference)

	// Selector for a NodeTemplate in compute to populate nodeTemplate.
	// +kubebuilder:validation:Optional
	nodeTemplateSelector?: null | v1.#Selector @go(NodeTemplateSelector,*v1.Selector)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Share settings for the node group.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	shareSettings?: [...#ShareSettingsParameters] @go(ShareSettings,[]ShareSettingsParameters)

	// The total number of nodes in the node group. One of initial_size or size must be specified.
	// +kubebuilder:validation:Optional
	size?: null | float64 @go(Size,*float64)

	// Zone where this node group is located
	// +kubebuilder:validation:Required
	zone?: null | string @go(Zone,*string)
}

#ProjectMapInitParameters: {
}

#ProjectMapObservation: {
	// The identifier for this object. Format specified above.
	id?: null | string @go(ID,*string)

	// The project id/number should be the same as the key of this project config in the project map.
	projectId?: null | string @go(ProjectID,*string)
}

#ProjectMapParameters: {
	// The identifier for this object. Format specified above.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("project_id",false)
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Reference to a Project in cloudplatform to populate id.
	// +kubebuilder:validation:Optional
	idRef?: null | v1.#Reference @go(IDRef,*v1.Reference)

	// Selector for a Project in cloudplatform to populate id.
	// +kubebuilder:validation:Optional
	idSelector?: null | v1.#Selector @go(IDSelector,*v1.Selector)

	// The project id/number should be the same as the key of this project config in the project map.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("project_id",false)
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Reference to a Project in cloudplatform to populate projectId.
	// +kubebuilder:validation:Optional
	projectIdRef?: null | v1.#Reference @go(ProjectIDRef,*v1.Reference)

	// Selector for a Project in cloudplatform to populate projectId.
	// +kubebuilder:validation:Optional
	projectIdSelector?: null | v1.#Selector @go(ProjectIDSelector,*v1.Selector)
}

#ShareSettingsInitParameters: {
	// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
	// Structure is documented below.
	projectMap?: [...#ProjectMapInitParameters] @go(ProjectMap,[]ProjectMapInitParameters)

	// Node group sharing type.
	// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
	shareType?: null | string @go(ShareType,*string)
}

#ShareSettingsObservation: {
	// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
	// Structure is documented below.
	projectMap?: [...#ProjectMapObservation] @go(ProjectMap,[]ProjectMapObservation)

	// Node group sharing type.
	// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
	shareType?: null | string @go(ShareType,*string)
}

#ShareSettingsParameters: {
	// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	projectMap?: [...#ProjectMapParameters] @go(ProjectMap,[]ProjectMapParameters)

	// Node group sharing type.
	// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
	// +kubebuilder:validation:Optional
	shareType?: null | string @go(ShareType,*string)
}

// NodeGroupSpec defines the desired state of NodeGroup
#NodeGroupSpec: {
	v1.#ResourceSpec
	forProvider: #NodeGroupParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NodeGroupInitParameters @go(InitProvider)
}

// NodeGroupStatus defines the observed state of NodeGroup.
#NodeGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #NodeGroupObservation @go(AtProvider)
}

// NodeGroup is the Schema for the NodeGroups API. Represents a NodeGroup resource to manage a group of sole-tenant nodes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#NodeGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #NodeGroupSpec     @go(Spec)
	status?:   #NodeGroupStatus   @go(Status)
}

// NodeGroupList contains a list of NodeGroups
#NodeGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NodeGroup] @go(Items,[]NodeGroup)
}
