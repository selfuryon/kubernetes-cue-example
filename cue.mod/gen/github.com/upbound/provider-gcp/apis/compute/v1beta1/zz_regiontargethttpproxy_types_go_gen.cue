// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RegionTargetHTTPProxyInitParameters: {
	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#RegionTargetHTTPProxyObservation: {
	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/targetHttpProxies/{{name}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The unique identifier for the resource.
	proxyId?: null | float64 @go(ProxyID,*float64)

	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the BackendService.
	urlMap?: null | string @go(URLMap,*string)
}

#RegionTargetHTTPProxyParameters: {
	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The Region in which the created target https proxy should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A reference to the RegionUrlMap resource that defines the mapping from URL
	// to the BackendService.
	// +crossplane:generate:reference:type=RegionURLMap
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.SelfLinkExtractor()
	// +kubebuilder:validation:Optional
	urlMap?: null | string @go(URLMap,*string)

	// Reference to a RegionURLMap to populate urlMap.
	// +kubebuilder:validation:Optional
	urlMapRef?: null | v1.#Reference @go(URLMapRef,*v1.Reference)

	// Selector for a RegionURLMap to populate urlMap.
	// +kubebuilder:validation:Optional
	urlMapSelector?: null | v1.#Selector @go(URLMapSelector,*v1.Selector)
}

// RegionTargetHTTPProxySpec defines the desired state of RegionTargetHTTPProxy
#RegionTargetHTTPProxySpec: {
	v1.#ResourceSpec
	forProvider: #RegionTargetHTTPProxyParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RegionTargetHTTPProxyInitParameters @go(InitProvider)
}

// RegionTargetHTTPProxyStatus defines the observed state of RegionTargetHTTPProxy.
#RegionTargetHTTPProxyStatus: {
	v1.#ResourceStatus
	atProvider?: #RegionTargetHTTPProxyObservation @go(AtProvider)
}

// RegionTargetHTTPProxy is the Schema for the RegionTargetHTTPProxys API. Represents a RegionTargetHttpProxy resource, which is used by one or more forwarding rules to route incoming HTTP requests to a URL map.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#RegionTargetHTTPProxy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec:      #RegionTargetHTTPProxySpec   @go(Spec)
	status?:   #RegionTargetHTTPProxyStatus @go(Status)
}

// RegionTargetHTTPProxyList contains a list of RegionTargetHTTPProxys
#RegionTargetHTTPProxyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RegionTargetHTTPProxy] @go(Items,[]RegionTargetHTTPProxy)
}
