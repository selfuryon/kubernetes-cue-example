// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NetworkEndpointGroupInitParameters: {
	// The default port used if the port number is not specified in the
	// network endpoint.
	defaultPort?: null | float64 @go(DefaultPort,*float64)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// Type of network endpoints in this network endpoint group.
	// NON_GCP_PRIVATE_IP_PORT is used for hybrid connectivity network
	// endpoint groups (see https://cloud.google.com/load-balancing/docs/hybrid).
	// Note that NON_GCP_PRIVATE_IP_PORT can only be used with Backend Services
	// that 1) have the following load balancing schemes: EXTERNAL, EXTERNAL_MANAGED,
	// INTERNAL_MANAGED, and INTERNAL_SELF_MANAGED and 2) support the RATE or
	// CONNECTION balancing modes.
	// Possible values include: GCE_VM_IP, GCE_VM_IP_PORT, and NON_GCP_PRIVATE_IP_PORT.
	// Default value is GCE_VM_IP_PORT.
	// Possible values are: GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT.
	networkEndpointType?: null | string @go(NetworkEndpointType,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#NetworkEndpointGroupObservation: {
	// The default port used if the port number is not specified in the
	// network endpoint.
	defaultPort?: null | float64 @go(DefaultPort,*float64)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/networkEndpointGroups/{{name}}
	id?: null | string @go(ID,*string)

	// The network to which all network endpoints in the NEG belong.
	// Uses "default" project network if unspecified.
	network?: null | string @go(Network,*string)

	// Type of network endpoints in this network endpoint group.
	// NON_GCP_PRIVATE_IP_PORT is used for hybrid connectivity network
	// endpoint groups (see https://cloud.google.com/load-balancing/docs/hybrid).
	// Note that NON_GCP_PRIVATE_IP_PORT can only be used with Backend Services
	// that 1) have the following load balancing schemes: EXTERNAL, EXTERNAL_MANAGED,
	// INTERNAL_MANAGED, and INTERNAL_SELF_MANAGED and 2) support the RATE or
	// CONNECTION balancing modes.
	// Possible values include: GCE_VM_IP, GCE_VM_IP_PORT, and NON_GCP_PRIVATE_IP_PORT.
	// Default value is GCE_VM_IP_PORT.
	// Possible values are: GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT.
	networkEndpointType?: null | string @go(NetworkEndpointType,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// Number of network endpoints in the network endpoint group.
	size?: null | float64 @go(Size,*float64)

	// Optional subnetwork to which all network endpoints in the NEG belong.
	subnetwork?: null | string @go(Subnetwork,*string)

	// Zone where the network endpoint group is located.
	zone?: null | string @go(Zone,*string)
}

#NetworkEndpointGroupParameters: {
	// The default port used if the port number is not specified in the
	// network endpoint.
	// +kubebuilder:validation:Optional
	defaultPort?: null | float64 @go(DefaultPort,*float64)

	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The network to which all network endpoints in the NEG belong.
	// Uses "default" project network if unspecified.
	// +crossplane:generate:reference:type=Network
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Type of network endpoints in this network endpoint group.
	// NON_GCP_PRIVATE_IP_PORT is used for hybrid connectivity network
	// endpoint groups (see https://cloud.google.com/load-balancing/docs/hybrid).
	// Note that NON_GCP_PRIVATE_IP_PORT can only be used with Backend Services
	// that 1) have the following load balancing schemes: EXTERNAL, EXTERNAL_MANAGED,
	// INTERNAL_MANAGED, and INTERNAL_SELF_MANAGED and 2) support the RATE or
	// CONNECTION balancing modes.
	// Possible values include: GCE_VM_IP, GCE_VM_IP_PORT, and NON_GCP_PRIVATE_IP_PORT.
	// Default value is GCE_VM_IP_PORT.
	// Possible values are: GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT.
	// +kubebuilder:validation:Optional
	networkEndpointType?: null | string @go(NetworkEndpointType,*string)

	// Reference to a Network to populate network.
	// +kubebuilder:validation:Optional
	networkRef?: null | v1.#Reference @go(NetworkRef,*v1.Reference)

	// Selector for a Network to populate network.
	// +kubebuilder:validation:Optional
	networkSelector?: null | v1.#Selector @go(NetworkSelector,*v1.Selector)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Optional subnetwork to which all network endpoints in the NEG belong.
	// +crossplane:generate:reference:type=Subnetwork
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// Reference to a Subnetwork to populate subnetwork.
	// +kubebuilder:validation:Optional
	subnetworkRef?: null | v1.#Reference @go(SubnetworkRef,*v1.Reference)

	// Selector for a Subnetwork to populate subnetwork.
	// +kubebuilder:validation:Optional
	subnetworkSelector?: null | v1.#Selector @go(SubnetworkSelector,*v1.Selector)

	// Zone where the network endpoint group is located.
	// +kubebuilder:validation:Required
	zone?: null | string @go(Zone,*string)
}

// NetworkEndpointGroupSpec defines the desired state of NetworkEndpointGroup
#NetworkEndpointGroupSpec: {
	v1.#ResourceSpec
	forProvider: #NetworkEndpointGroupParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NetworkEndpointGroupInitParameters @go(InitProvider)
}

// NetworkEndpointGroupStatus defines the observed state of NetworkEndpointGroup.
#NetworkEndpointGroupStatus: {
	v1.#ResourceStatus
	atProvider?: #NetworkEndpointGroupObservation @go(AtProvider)
}

// NetworkEndpointGroup is the Schema for the NetworkEndpointGroups API. Network endpoint groups (NEGs) are zonal resources that represent collections of IP address and port combinations for GCP resources within a single subnet.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#NetworkEndpointGroup: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta          @go(ObjectMeta)
	spec:      #NetworkEndpointGroupSpec   @go(Spec)
	status?:   #NetworkEndpointGroupStatus @go(Status)
}

// NetworkEndpointGroupList contains a list of NetworkEndpointGroups
#NetworkEndpointGroupList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkEndpointGroup] @go(Items,[]NetworkEndpointGroup)
}
