// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AttachedDiskInitParameters: {
	// Specifies a unique device name of your choice that is
	// reflected into the /dev/disk/by-id/google-* tree of a Linux operating
	// system running within the instance. This name can be used to
	// reference the device for mounting, resizing, and so on, from within
	// the instance.
	deviceName?: null | string @go(DeviceName,*string)

	// The mode in which to attach this disk, either READ_WRITE or
	// READ_ONLY. If not specified, the default is to attach the disk in
	// READ_WRITE mode.
	mode?: null | string @go(Mode,*string)

	// The project that the referenced compute instance is a part of. If instance is referenced by its
	// self_link the project defined in the link will take precedence.
	project?: null | string @go(Project,*string)

	// The zone that the referenced compute instance is located within. If instance is referenced by its
	// self_link the zone defined in the link will take precedence.
	zone?: null | string @go(Zone,*string)
}

#AttachedDiskObservation: {
	// Specifies a unique device name of your choice that is
	// reflected into the /dev/disk/by-id/google-* tree of a Linux operating
	// system running within the instance. This name can be used to
	// reference the device for mounting, resizing, and so on, from within
	// the instance.
	deviceName?: null | string @go(DeviceName,*string)

	// name or self_link of the disk that will be attached.
	disk?: null | string @go(Disk,*string)

	// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/disks/{{disk.name}}
	id?: null | string @go(ID,*string)

	// name or self_link of the compute instance that the disk will be attached to.
	// If the self_link is provided then zone and project are extracted from the
	// self link. If only the name is used then zone and project must be defined
	// as properties on the resource or provider.
	instance?: null | string @go(Instance,*string)

	// The mode in which to attach this disk, either READ_WRITE or
	// READ_ONLY. If not specified, the default is to attach the disk in
	// READ_WRITE mode.
	mode?: null | string @go(Mode,*string)

	// The project that the referenced compute instance is a part of. If instance is referenced by its
	// self_link the project defined in the link will take precedence.
	project?: null | string @go(Project,*string)

	// The zone that the referenced compute instance is located within. If instance is referenced by its
	// self_link the zone defined in the link will take precedence.
	zone?: null | string @go(Zone,*string)
}

#AttachedDiskParameters: {
	// Specifies a unique device name of your choice that is
	// reflected into the /dev/disk/by-id/google-* tree of a Linux operating
	// system running within the instance. This name can be used to
	// reference the device for mounting, resizing, and so on, from within
	// the instance.
	// +kubebuilder:validation:Optional
	deviceName?: null | string @go(DeviceName,*string)

	// name or self_link of the disk that will be attached.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Disk
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	disk?: null | string @go(Disk,*string)

	// Reference to a Disk in compute to populate disk.
	// +kubebuilder:validation:Optional
	diskRef?: null | v1.#Reference @go(DiskRef,*v1.Reference)

	// Selector for a Disk in compute to populate disk.
	// +kubebuilder:validation:Optional
	diskSelector?: null | v1.#Selector @go(DiskSelector,*v1.Selector)

	// name or self_link of the compute instance that the disk will be attached to.
	// If the self_link is provided then zone and project are extracted from the
	// self link. If only the name is used then zone and project must be defined
	// as properties on the resource or provider.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// Reference to a Instance in compute to populate instance.
	// +kubebuilder:validation:Optional
	instanceRef?: null | v1.#Reference @go(InstanceRef,*v1.Reference)

	// Selector for a Instance in compute to populate instance.
	// +kubebuilder:validation:Optional
	instanceSelector?: null | v1.#Selector @go(InstanceSelector,*v1.Selector)

	// The mode in which to attach this disk, either READ_WRITE or
	// READ_ONLY. If not specified, the default is to attach the disk in
	// READ_WRITE mode.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The project that the referenced compute instance is a part of. If instance is referenced by its
	// self_link the project defined in the link will take precedence.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The zone that the referenced compute instance is located within. If instance is referenced by its
	// self_link the zone defined in the link will take precedence.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

// AttachedDiskSpec defines the desired state of AttachedDisk
#AttachedDiskSpec: {
	v1.#ResourceSpec
	forProvider: #AttachedDiskParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AttachedDiskInitParameters @go(InitProvider)
}

// AttachedDiskStatus defines the observed state of AttachedDisk.
#AttachedDiskStatus: {
	v1.#ResourceStatus
	atProvider?: #AttachedDiskObservation @go(AtProvider)
}

// AttachedDisk is the Schema for the AttachedDisks API. Resource that allows attaching existing persistent disks to compute instances.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#AttachedDisk: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #AttachedDiskSpec   @go(Spec)
	status?:   #AttachedDiskStatus @go(Status)
}

// AttachedDiskList contains a list of AttachedDisks
#AttachedDiskList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#AttachedDisk] @go(Items,[]AttachedDisk)
}
