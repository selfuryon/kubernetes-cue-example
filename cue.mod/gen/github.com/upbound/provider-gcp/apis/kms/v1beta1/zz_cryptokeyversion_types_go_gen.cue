// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/kms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#AttestationInitParameters: {
}

#AttestationObservation: {
	// The certificate chains needed to validate the attestation
	// Structure is documented below.
	certChains?: [...#CertChainsObservation] @go(CertChains,[]CertChainsObservation)

	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	content?: null | string @go(Content,*string)

	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	// Structure is documented below.
	externalProtectionLevelOptions?: [...#ExternalProtectionLevelOptionsObservation] @go(ExternalProtectionLevelOptions,[]ExternalProtectionLevelOptionsObservation)

	// (Output)
	// The format of the attestation data.
	format?: null | string @go(Format,*string)
}

#AttestationParameters: {
}

#CertChainsInitParameters: {
}

#CertChainsObservation: {
	// Cavium certificate chain corresponding to the attestation.
	caviumCerts?: null | string @go(CaviumCerts,*string)

	// Google card certificate chain corresponding to the attestation.
	googleCardCerts?: null | string @go(GoogleCardCerts,*string)

	// Google partition certificate chain corresponding to the attestation.
	googlePartitionCerts?: null | string @go(GooglePartitionCerts,*string)
}

#CertChainsParameters: {
}

#CryptoKeyVersionInitParameters: {
	// The current state of the CryptoKeyVersion.
	// Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
	state?: null | string @go(State,*string)
}

#CryptoKeyVersionObservation: {
	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	algorithm?: null | string @go(Algorithm,*string)

	// Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
	// Only provided for key versions with protectionLevel HSM.
	// Structure is documented below.
	attestation?: [...#AttestationObservation] @go(Attestation,[]AttestationObservation)

	// The name of the cryptoKey associated with the CryptoKeyVersions.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}'
	cryptoKey?: null | string @go(CryptoKey,*string)

	// The time this CryptoKeyVersion key material was generated
	generateTime?: null | string @go(GenerateTime,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The resource name for this CryptoKeyVersion.
	name?: null | string @go(Name,*string)

	// The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
	protectionLevel?: null | string @go(ProtectionLevel,*string)

	// The current state of the CryptoKeyVersion.
	// Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
	state?: null | string @go(State,*string)
}

#CryptoKeyVersionParameters: {
	// The name of the cryptoKey associated with the CryptoKeyVersions.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}'
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/kms/v1beta1.CryptoKey
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cryptoKey?: null | string @go(CryptoKey,*string)

	// Reference to a CryptoKey in kms to populate cryptoKey.
	// +kubebuilder:validation:Optional
	cryptoKeyRef?: null | v1.#Reference @go(CryptoKeyRef,*v1.Reference)

	// Selector for a CryptoKey in kms to populate cryptoKey.
	// +kubebuilder:validation:Optional
	cryptoKeySelector?: null | v1.#Selector @go(CryptoKeySelector,*v1.Selector)

	// The current state of the CryptoKeyVersion.
	// Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)
}

#ExternalProtectionLevelOptionsInitParameters: {
}

#ExternalProtectionLevelOptionsObservation: {
	// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
	ekmConnectionKeyPath?: null | string @go(EkmConnectionKeyPath,*string)

	// The URI for an external resource that this CryptoKeyVersion represents.
	externalKeyUri?: null | string @go(ExternalKeyURI,*string)
}

#ExternalProtectionLevelOptionsParameters: {
}

// CryptoKeyVersionSpec defines the desired state of CryptoKeyVersion
#CryptoKeyVersionSpec: {
	v1.#ResourceSpec
	forProvider: #CryptoKeyVersionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CryptoKeyVersionInitParameters @go(InitProvider)
}

// CryptoKeyVersionStatus defines the observed state of CryptoKeyVersion.
#CryptoKeyVersionStatus: {
	v1.#ResourceStatus
	atProvider?: #CryptoKeyVersionObservation @go(AtProvider)
}

// CryptoKeyVersion is the Schema for the CryptoKeyVersions API. A
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#CryptoKeyVersion: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec:      #CryptoKeyVersionSpec   @go(Spec)
	status?:   #CryptoKeyVersionStatus @go(Status)
}

// CryptoKeyVersionList contains a list of CryptoKeyVersions
#CryptoKeyVersionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CryptoKeyVersion] @go(Items,[]CryptoKeyVersion)
}
