// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/kms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#CryptoKeyInitParameters: {
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 24 hours.
	destroyScheduledDuration?: null | string @go(DestroyScheduledDuration,*string)

	// Whether this key may contain imported versions only.
	importOnly?: null | bool @go(ImportOnly,*bool)

	// Labels with user-defined metadata to apply to this resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The immutable purpose of this CryptoKey. See the
	// purpose reference
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	purpose?: null | string @go(Purpose,*string)

	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter s (seconds). It must be greater than a day (ie, 86400).
	rotationPeriod?: null | string @go(RotationPeriod,*string)

	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
	skipInitialVersionCreation?: null | bool @go(SkipInitialVersionCreation,*bool)

	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	versionTemplate?: [...#VersionTemplateInitParameters] @go(VersionTemplate,[]VersionTemplateInitParameters)
}

#CryptoKeyObservation: {
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 24 hours.
	destroyScheduledDuration?: null | string @go(DestroyScheduledDuration,*string)

	// an identifier for the resource with format {{key_ring}}/cryptoKeys/{{name}}
	id?: null | string @go(ID,*string)

	// Whether this key may contain imported versions only.
	importOnly?: null | bool @go(ImportOnly,*bool)

	// The KeyRing that this key belongs to.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
	keyRing?: null | string @go(KeyRing,*string)

	// Labels with user-defined metadata to apply to this resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The immutable purpose of this CryptoKey. See the
	// purpose reference
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	purpose?: null | string @go(Purpose,*string)

	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter s (seconds). It must be greater than a day (ie, 86400).
	rotationPeriod?: null | string @go(RotationPeriod,*string)

	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
	skipInitialVersionCreation?: null | bool @go(SkipInitialVersionCreation,*bool)

	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	versionTemplate?: [...#VersionTemplateObservation] @go(VersionTemplate,[]VersionTemplateObservation)
}

#CryptoKeyParameters: {
	// The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED.
	// If not specified at creation time, the default duration is 24 hours.
	// +kubebuilder:validation:Optional
	destroyScheduledDuration?: null | string @go(DestroyScheduledDuration,*string)

	// Whether this key may contain imported versions only.
	// +kubebuilder:validation:Optional
	importOnly?: null | bool @go(ImportOnly,*bool)

	// The KeyRing that this key belongs to.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/kms/v1beta1.KeyRing
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyRing?: null | string @go(KeyRing,*string)

	// Reference to a KeyRing in kms to populate keyRing.
	// +kubebuilder:validation:Optional
	keyRingRef?: null | v1.#Reference @go(KeyRingRef,*v1.Reference)

	// Selector for a KeyRing in kms to populate keyRing.
	// +kubebuilder:validation:Optional
	keyRingSelector?: null | v1.#Selector @go(KeyRingSelector,*v1.Selector)

	// Labels with user-defined metadata to apply to this resource.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The immutable purpose of this CryptoKey. See the
	// purpose reference
	// for possible inputs.
	// Default value is "ENCRYPT_DECRYPT".
	// +kubebuilder:validation:Optional
	purpose?: null | string @go(Purpose,*string)

	// Every time this period passes, generate a new CryptoKeyVersion and set it as the primary.
	// The first rotation will take place after the specified period. The rotation period has
	// the format of a decimal number with up to 9 fractional digits, followed by the
	// letter s (seconds). It must be greater than a day (ie, 86400).
	// +kubebuilder:validation:Optional
	rotationPeriod?: null | string @go(RotationPeriod,*string)

	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions.
	// You must use the google_kms_key_ring_import_job resource to import the CryptoKeyVersion.
	// +kubebuilder:validation:Optional
	skipInitialVersionCreation?: null | bool @go(SkipInitialVersionCreation,*bool)

	// A template describing settings for new crypto key versions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	versionTemplate?: [...#VersionTemplateParameters] @go(VersionTemplate,[]VersionTemplateParameters)
}

#VersionTemplateInitParameters: {
	// The algorithm to use when creating a version based on this template.
	// See the algorithm reference for possible inputs.
	algorithm?: null | string @go(Algorithm,*string)

	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	protectionLevel?: null | string @go(ProtectionLevel,*string)
}

#VersionTemplateObservation: {
	// The algorithm to use when creating a version based on this template.
	// See the algorithm reference for possible inputs.
	algorithm?: null | string @go(Algorithm,*string)

	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	protectionLevel?: null | string @go(ProtectionLevel,*string)
}

#VersionTemplateParameters: {
	// The algorithm to use when creating a version based on this template.
	// See the algorithm reference for possible inputs.
	// +kubebuilder:validation:Optional
	algorithm?: null | string @go(Algorithm,*string)

	// The protection level to use when creating a version based on this template. Possible values include "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC". Defaults to "SOFTWARE".
	// +kubebuilder:validation:Optional
	protectionLevel?: null | string @go(ProtectionLevel,*string)
}

// CryptoKeySpec defines the desired state of CryptoKey
#CryptoKeySpec: {
	v1.#ResourceSpec
	forProvider: #CryptoKeyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CryptoKeyInitParameters @go(InitProvider)
}

// CryptoKeyStatus defines the observed state of CryptoKey.
#CryptoKeyStatus: {
	v1.#ResourceStatus
	atProvider?: #CryptoKeyObservation @go(AtProvider)
}

// CryptoKey is the Schema for the CryptoKeys API. A
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#CryptoKey: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #CryptoKeySpec     @go(Spec)
	status?:   #CryptoKeyStatus   @go(Status)
}

// CryptoKeyList contains a list of CryptoKeys
#CryptoKeyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CryptoKey] @go(Items,[]CryptoKey)
}
