// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/kms/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#KeyRingInitParameters: {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#KeyRingObservation: {
	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/keyRings/{{name}}
	id?: null | string @go(ID,*string)

	// The location for the KeyRing.
	// A full list of valid locations can be found by running gcloud kms locations list.
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#KeyRingParameters: {
	// The location for the KeyRing.
	// A full list of valid locations can be found by running gcloud kms locations list.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// KeyRingSpec defines the desired state of KeyRing
#KeyRingSpec: {
	v1.#ResourceSpec
	forProvider: #KeyRingParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #KeyRingInitParameters @go(InitProvider)
}

// KeyRingStatus defines the observed state of KeyRing.
#KeyRingStatus: {
	v1.#ResourceStatus
	atProvider?: #KeyRingObservation @go(AtProvider)
}

// KeyRing is the Schema for the KeyRings API. A
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#KeyRing: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #KeyRingSpec       @go(Spec)
	status?:   #KeyRingStatus     @go(Status)
}

// KeyRingList contains a list of KeyRings
#KeyRingList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#KeyRing] @go(Items,[]KeyRing)
}
