// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/container/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RegistryInitParameters: {
	// The location of the registry. One of ASIA, EU, US or not specified. See the official documentation for more information on registry locations.
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#RegistryObservation: {
	// The URI of the created resource.
	bucketSelfLink?: null | string @go(BucketSelfLink,*string)

	// The name of the bucket that supports the Container Registry. In the form of artifacts.{project}.appspot.com or {location}.artifacts.{project}.appspot.com if location is specified.
	id?: null | string @go(ID,*string)

	// The location of the registry. One of ASIA, EU, US or not specified. See the official documentation for more information on registry locations.
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#RegistryParameters: {
	// The location of the registry. One of ASIA, EU, US or not specified. See the official documentation for more information on registry locations.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// RegistrySpec defines the desired state of Registry
#RegistrySpec: {
	v1.#ResourceSpec
	forProvider: #RegistryParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RegistryInitParameters @go(InitProvider)
}

// RegistryStatus defines the observed state of Registry.
#RegistryStatus: {
	v1.#ResourceStatus
	atProvider?: #RegistryObservation @go(AtProvider)
}

// Registry is the Schema for the Registrys API. Ensures the GCS bucket backing Google Container Registry exists.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Registry: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #RegistrySpec      @go(Spec)
	status?:   #RegistryStatus    @go(Status)
}

// RegistryList contains a list of Registrys
#RegistryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Registry] @go(Items,[]Registry)
}
