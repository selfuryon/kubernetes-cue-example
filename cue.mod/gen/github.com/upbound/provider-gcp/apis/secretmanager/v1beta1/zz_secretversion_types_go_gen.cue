// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/secretmanager/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#SecretVersionInitParameters: {
	// The current state of the SecretVersion.
	enabled?: null | bool @go(Enabled,*bool)
}

#SecretVersionObservation: {
	// The time at which the Secret was created.
	createTime?: null | string @go(CreateTime,*string)

	// The time at which the Secret was destroyed. Only present if state is DESTROYED.
	destroyTime?: null | string @go(DestroyTime,*string)

	// The current state of the SecretVersion.
	enabled?: null | bool @go(Enabled,*bool)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The resource name of the SecretVersion. Format:
	// projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}
	name?: null | string @go(Name,*string)

	// Secret Manager secret resource
	secret?: null | string @go(Secret,*string)

	// The version of the Secret.
	version?: null | string @go(Version,*string)
}

#SecretVersionParameters: {
	// The current state of the SecretVersion.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Secret Manager secret resource
	// +crossplane:generate:reference:type=Secret
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// The secret data. Must be no larger than 64KiB.
	// +kubebuilder:validation:Optional
	secretDataSecretRef: v1.#SecretKeySelector @go(SecretDataSecretRef)

	// Reference to a Secret to populate secret.
	// +kubebuilder:validation:Optional
	secretRef?: null | v1.#Reference @go(SecretRef,*v1.Reference)

	// Selector for a Secret to populate secret.
	// +kubebuilder:validation:Optional
	secretSelector?: null | v1.#Selector @go(SecretSelector,*v1.Selector)
}

// SecretVersionSpec defines the desired state of SecretVersion
#SecretVersionSpec: {
	v1.#ResourceSpec
	forProvider: #SecretVersionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SecretVersionInitParameters @go(InitProvider)
}

// SecretVersionStatus defines the observed state of SecretVersion.
#SecretVersionStatus: {
	v1.#ResourceStatus
	atProvider?: #SecretVersionObservation @go(AtProvider)
}

// SecretVersion is the Schema for the SecretVersions API. A secret version resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#SecretVersion: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretDataSecretRef)",message="spec.forProvider.secretDataSecretRef is a required parameter"
	spec:    #SecretVersionSpec   @go(Spec)
	status?: #SecretVersionStatus @go(Status)
}

// SecretVersionList contains a list of SecretVersions
#SecretVersionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SecretVersion] @go(Items,[]SecretVersion)
}
