// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/storage/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#NotificationInitParameters: {
	// A set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
	customAttributes?: {[string]: null | string} @go(CustomAttributes,map[string]*string)

	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	eventTypes?: [...null | string] @go(EventTypes,[]*string)

	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
	objectNamePrefix?: null | string @go(ObjectNamePrefix,*string)

	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	payloadFormat?: null | string @go(PayloadFormat,*string)
}

#NotificationObservation: {
	// The name of the bucket.
	bucket?: null | string @go(Bucket,*string)

	// A set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
	customAttributes?: {[string]: null | string} @go(CustomAttributes,map[string]*string)

	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	eventTypes?: [...null | string] @go(EventTypes,[]*string)
	id?: null | string @go(ID,*string)

	// The ID of the created notification.
	notificationId?: null | string @go(NotificationID,*string)

	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
	objectNamePrefix?: null | string @go(ObjectNamePrefix,*string)

	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	payloadFormat?: null | string @go(PayloadFormat,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)

	// The Cloud PubSub topic to which this subscription publishes. Expects either the
	// topic name, assumed to belong to the default GCP provider project, or the project-level name,
	// i.e. projects/my-gcp-project/topics/my-topic or my-topic. If the project is not set in the provider,
	// you will need to use the project-level name.
	topic?: null | string @go(Topic,*string)
}

#NotificationParameters: {
	// The name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	bucketRef?: null | v1.#Reference @go(BucketRef,*v1.Reference)

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	bucketSelector?: null | v1.#Selector @go(BucketSelector,*v1.Selector)

	// A set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
	// +kubebuilder:validation:Optional
	customAttributes?: {[string]: null | string} @go(CustomAttributes,map[string]*string)

	// List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE"
	// +kubebuilder:validation:Optional
	eventTypes?: [...null | string] @go(EventTypes,[]*string)

	// Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
	// +kubebuilder:validation:Optional
	objectNamePrefix?: null | string @go(ObjectNamePrefix,*string)

	// The desired content of the Payload. One of "JSON_API_V1" or "NONE".
	// +kubebuilder:validation:Optional
	payloadFormat?: null | string @go(PayloadFormat,*string)

	// The Cloud PubSub topic to which this subscription publishes. Expects either the
	// topic name, assumed to belong to the default GCP provider project, or the project-level name,
	// i.e. projects/my-gcp-project/topics/my-topic or my-topic. If the project is not set in the provider,
	// you will need to use the project-level name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)

	// Reference to a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	topicRef?: null | v1.#Reference @go(TopicRef,*v1.Reference)

	// Selector for a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	topicSelector?: null | v1.#Selector @go(TopicSelector,*v1.Selector)
}

// NotificationSpec defines the desired state of Notification
#NotificationSpec: {
	v1.#ResourceSpec
	forProvider: #NotificationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NotificationInitParameters @go(InitProvider)
}

// NotificationStatus defines the observed state of Notification.
#NotificationStatus: {
	v1.#ResourceStatus
	atProvider?: #NotificationObservation @go(AtProvider)
}

// Notification is the Schema for the Notifications API. Creates a new notification configuration on a specified bucket.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Notification: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.payloadFormat) || (has(self.initProvider) && has(self.initProvider.payloadFormat))",message="spec.forProvider.payloadFormat is a required parameter"
	spec:    #NotificationSpec   @go(Spec)
	status?: #NotificationStatus @go(Status)
}

// NotificationList contains a list of Notifications
#NotificationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Notification] @go(Items,[]Notification)
}
