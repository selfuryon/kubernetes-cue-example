// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/artifact/v1beta1

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ConditionInitParameters: {
	description?: null | string @go(Description,*string)
	expression?:  null | string @go(Expression,*string)
	title?:       null | string @go(Title,*string)
}

#ConditionObservation: {
	description?: null | string @go(Description,*string)
	expression?:  null | string @go(Expression,*string)
	title?:       null | string @go(Title,*string)
}

#ConditionParameters: {
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// +kubebuilder:validation:Optional
	expression?: null | string @go(Expression,*string)

	// +kubebuilder:validation:Optional
	title?: null | string @go(Title,*string)
}

#RegistryRepositoryIAMMemberInitParameters: {
	condition?: [...#ConditionInitParameters] @go(Condition,[]ConditionInitParameters)
	location?:   null | string @go(Location,*string)
	member?:     null | string @go(Member,*string)
	project?:    null | string @go(Project,*string)
	repository?: null | string @go(Repository,*string)
	role?:       null | string @go(Role,*string)
}

#RegistryRepositoryIAMMemberObservation: {
	condition?: [...#ConditionObservation] @go(Condition,[]ConditionObservation)
	etag?:       null | string @go(Etag,*string)
	id?:         null | string @go(ID,*string)
	location?:   null | string @go(Location,*string)
	member?:     null | string @go(Member,*string)
	project?:    null | string @go(Project,*string)
	repository?: null | string @go(Repository,*string)
	role?:       null | string @go(Role,*string)
}

#RegistryRepositoryIAMMemberParameters: {
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// +kubebuilder:validation:Optional
	member?: null | string @go(Member,*string)

	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// +kubebuilder:validation:Optional
	repository?: null | string @go(Repository,*string)

	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)
}

// RegistryRepositoryIAMMemberSpec defines the desired state of RegistryRepositoryIAMMember
#RegistryRepositoryIAMMemberSpec: {
	v1.#ResourceSpec
	forProvider: #RegistryRepositoryIAMMemberParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RegistryRepositoryIAMMemberInitParameters @go(InitProvider)
}

// RegistryRepositoryIAMMemberStatus defines the observed state of RegistryRepositoryIAMMember.
#RegistryRepositoryIAMMemberStatus: {
	v1.#ResourceStatus
	atProvider?: #RegistryRepositoryIAMMemberObservation @go(AtProvider)
}

// RegistryRepositoryIAMMember is the Schema for the RegistryRepositoryIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#RegistryRepositoryIAMMember: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.member) || (has(self.initProvider) && has(self.initProvider.member))",message="spec.forProvider.member is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repository) || (has(self.initProvider) && has(self.initProvider.repository))",message="spec.forProvider.repository is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	spec:    #RegistryRepositoryIAMMemberSpec   @go(Spec)
	status?: #RegistryRepositoryIAMMemberStatus @go(Status)
}

// RegistryRepositoryIAMMemberList contains a list of RegistryRepositoryIAMMembers
#RegistryRepositoryIAMMemberList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RegistryRepositoryIAMMember] @go(Items,[]RegistryRepositoryIAMMember)
}
