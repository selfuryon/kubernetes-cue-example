// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/hashicorp/vault-secrets-operator/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// HCPAuthSpec defines the desired state of HCPAuth
#HCPAuthSpec: {
	// OrganizationID of the HCP organization.
	organizationID: string @go(OrganizationID)

	// ProjectID of the HCP project.
	projectID: string @go(ProjectID)

	// AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod.
	// This field allows administrators to customize which Kubernetes namespaces are authorized to
	// use with this AuthMethod. While Vault will still enforce its own rules, this has the added
	// configurability of restricting which HCPAuthMethods can be used by which namespaces.
	// Accepted values:
	// []{"*"} - wildcard, all namespaces.
	// []{"a", "b"} - list of namespaces.
	// unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this
	// is the default behavior.
	allowedNamespaces?: [...string] @go(AllowedNamespaces,[]string)

	// Method to use when authenticating to Vault.
	// +kubebuilder:validation:Enum=servicePrincipal
	// +kubebuilder:default="servicePrincipal"
	method?: string @go(Method)

	// ServicePrincipal provides the necessary configuration for authenticating to
	// HCP using a service principal. For security reasons, only project-level
	// service principals should ever be used.
	servicePrincipal?: null | #HCPAuthServicePrincipal @go(ServicePrincipal,*HCPAuthServicePrincipal)
}

// HCPAuthServicePrincipal provides HCPAuth configuration options needed for
// authenticating to HCP using a service principal configured in SecretRef.
#HCPAuthServicePrincipal: {
	// SecretRef is the name of a Kubernetes secret in the consumer's
	// (VDS/VSS/PKI/HCP) namespace which provides the HCP ServicePrincipal clientID,
	// and clientSecret.
	// The secret data must have the following structure {
	//   "clientID": "clientID",
	//   "clientSecret": "clientSecret",
	// }
	secretRef: string @go(SecretRef)
}

// HCPAuthStatus defines the observed state of HCPAuth
#HCPAuthStatus: {
	// Valid auth mechanism.
	valid: bool   @go(Valid)
	error: string @go(Error)
}

// HCPAuth is the Schema for the hcpauths API
#HCPAuth: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #HCPAuthSpec       @go(Spec)
	status?:   #HCPAuthStatus     @go(Status)
}

// HCPAuthList contains a list of HCPAuth
#HCPAuthList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#HCPAuth] @go(Items,[]HCPAuth)
}
