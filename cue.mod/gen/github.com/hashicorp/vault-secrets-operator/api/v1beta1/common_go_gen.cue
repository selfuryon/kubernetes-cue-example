// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/hashicorp/vault-secrets-operator/api/v1beta1

package v1beta1

import "k8s.io/api/core/v1"

// Destination provides the configuration that will be applied to the
// destination Kubernetes Secret during a Vault Secret -> K8s Secret sync.
#Destination: {
	// Name of the Secret
	name: string @go(Name)

	// Create the destination Secret.
	// If the Secret already exists this should be set to false.
	// +kubebuilder:default=false
	create: bool @go(Create)

	// Overwrite the destination Secret if it exists and Create is true. This is
	// useful when migrating to VSO from a previous secret deployment strategy.
	// +kubebuilder:default=false
	overwrite: bool @go(Overwrite)

	// Labels to apply to the Secret. Requires Create to be set to true.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Annotations to apply to the Secret. Requires Create to be set to true.
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Type of Kubernetes Secret. Requires Create to be set to true.
	// Defaults to Opaque.
	type?: v1.#SecretType @go(Type)

	// Transformation provides configuration for transforming the secret data before
	// it is stored in the Destination.
	transformation?: #Transformation @go(Transformation)
}

// RolloutRestartTarget provides the configuration required to perform a
// rollout-restart of the supported resources upon Vault Secret rotation.
// The rollout-restart is triggered by patching the target resource's
// 'spec.template.metadata.annotations' to include 'vso.secrets.hashicorp.com/restartedAt'
// with a timestamp value of when the trigger was executed.
// E.g. vso.secrets.hashicorp.com/restartedAt: "2023-03-23T13:39:31Z"
//
// Supported resources: Deployment, DaemonSet, StatefulSet
#RolloutRestartTarget: {
	// +kubebuilder:validation:Enum={Deployment,DaemonSet,StatefulSet}
	kind: string @go(Kind)
	name: string @go(Name)
}

#Transformation: {
	// Templates maps a template name to its Template. Templates are always included
	// in the rendered K8s Secret, and take precedence over templates defined in a
	// SecretTransformation.
	templates?: {[string]: #Template} @go(Templates,map[string]Template)

	// TransformationRefs contain references to template configuration from
	// SecretTransformation.
	transformationRefs?: [...#TransformationRef] @go(TransformationRefs,[]TransformationRef)

	// Includes contains regex patterns used to filter top-level source secret data
	// fields for inclusion in the final K8s Secret data. These pattern filters are
	// never applied to templated fields as defined in Templates. They are always
	// applied last.
	includes?: [...string] @go(Includes,[]string)

	// Excludes contains regex patterns used to filter top-level source secret data
	// fields for exclusion from the final K8s Secret data. These pattern filters are
	// never applied to templated fields as defined in Templates. They are always
	// applied before any inclusion patterns. To exclude all source secret data
	// fields, you can configure the single pattern ".*".
	excludes?: [...string] @go(Excludes,[]string)

	// ExcludeRaw data from the destination Secret. Exclusion policy can be set
	// globally by including 'exclude-raw` in the '--global-transformation-options'
	// command line flag. If set, the command line flag always takes precedence over
	// this configuration.
	excludeRaw?: bool @go(ExcludeRaw)
}

// TransformationRef contains the configuration for accessing templates from an
// SecretTransformation resource. TransformationRefs can be shared across all
// syncable secret custom resources.
#TransformationRef: {
	// Namespace of the SecretTransformation resource.
	namespace?: string @go(Namespace)

	// Name of the SecretTransformation resource.
	name: string @go(Name)

	// TemplateRefs map to a Template found in this TransformationRef. If empty, then
	// all templates from the SecretTransformation will be rendered to the K8s Secret.
	templateRefs?: [...#TemplateRef] @go(TemplateRefs,[]TemplateRef)

	// IgnoreIncludes controls whether to use the SecretTransformation's Includes
	// data key filters.
	ignoreIncludes?: bool @go(IgnoreIncludes)

	// IgnoreExcludes controls whether to use the SecretTransformation's Excludes
	// data key filters.
	ignoreExcludes?: bool @go(IgnoreExcludes)
}

// TemplateRef points to templating text that is stored in a
// SecretTransformation custom resource.
#TemplateRef: {
	// Name of the Template in SecretTransformationSpec.Templates.
	// the rendered secret data.
	name: string @go(Name)

	// KeyOverride to the rendered template in the Destination secret. If Key is
	// empty, then the Key from reference spec will be used. Set this to override the
	// Key set from the reference spec.
	keyOverride?: string @go(KeyOverride)
}

// Template provides templating configuration.
#Template: {
	// Name of the Template
	name?: string @go(Name)

	// Text contains the Go text template format. The template
	// references attributes from the data structure of the source secret.
	// Refer to https://pkg.go.dev/text/template for more information.
	text: string @go(Text)
}
