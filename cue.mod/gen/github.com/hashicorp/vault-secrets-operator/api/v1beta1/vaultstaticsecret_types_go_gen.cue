// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/hashicorp/vault-secrets-operator/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// VaultStaticSecretSpec defines the desired state of VaultStaticSecret
#VaultStaticSecretSpec: {
	// VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace,
	// eg: `namespaceA/vaultAuthRefB`. If no namespace prefix is provided it will default to
	// namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will
	// default to the `default` VaultAuth, configured in the operator's namespace.
	vaultAuthRef?: string @go(VaultAuthRef)

	// Namespace to get the secret from in Vault
	namespace?: string @go(Namespace)

	// Mount for the secret in Vault
	mount: string @go(Mount)

	// Path of the secret in Vault, corresponds to the `path` parameter for,
	// kv-v1: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v1#read-secret
	// kv-v2: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#read-secret-version
	path: string @go(Path)

	// Version of the secret to fetch. Only valid for type kv-v2. Corresponds to version query parameter:
	// https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#version
	// +kubebuilder:validation:Minimum=0
	version?: int @go(Version)

	// Type of the Vault static secret
	// +kubebuilder:validation:Enum={kv-v1,kv-v2}
	type: string @go(Type)

	// RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Pattern="^([0-9]+(\\.[0-9]+)?(s|m|h))$"
	refreshAfter?: string @go(RefreshAfter)

	// HMACSecretData determines whether the Operator computes the
	// HMAC of the Secret's data. The MAC value will be stored in
	// the resource's Status.SecretMac field, and will be used for drift detection
	// and during incoming Vault secret comparison.
	// Enabling this feature is recommended to ensure that Secret's data stays consistent with Vault.
	// +kubebuilder:default=true
	hmacSecretData?: bool @go(HMACSecretData)

	// RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does
	// not support dynamically reloading a rotated secret.
	// In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will
	// trigger a "rollout-restart" for each target whenever the Vault secret changes between reconciliation events.
	// All configured targets wil be ignored if HMACSecretData is set to false.
	// See RolloutRestartTarget for more details.
	rolloutRestartTargets?: [...#RolloutRestartTarget] @go(RolloutRestartTargets,[]RolloutRestartTarget)

	// Destination provides configuration necessary for syncing the Vault secret to Kubernetes.
	destination: #Destination @go(Destination)
}

// VaultStaticSecretStatus defines the observed state of VaultStaticSecret
#VaultStaticSecretStatus: {
	// LastGeneration is the Generation of the last reconciled resource.
	lastGeneration: int64 @go(LastGeneration)

	// SecretMAC used when deciding whether new Vault secret data should be synced.
	//
	// The controller will compare the "new" Vault secret data to this value using HMAC,
	// if they are different, then the data will be synced to the Destination.
	//
	// The SecretMac is also used to detect drift in the Destination Secret's Data.
	// If drift is detected the data will be synced to the Destination.
	secretMAC?: string @go(SecretMAC)
}

// VaultStaticSecret is the Schema for the vaultstaticsecrets API
#VaultStaticSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #VaultStaticSecretSpec   @go(Spec)
	status?:   #VaultStaticSecretStatus @go(Status)
}

// VaultStaticSecretList contains a list of VaultStaticSecret
#VaultStaticSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VaultStaticSecret] @go(Items,[]VaultStaticSecret)
}
