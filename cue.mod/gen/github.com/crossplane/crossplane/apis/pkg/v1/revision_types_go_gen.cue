// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/pkg/v1

package v1

import (
	corev1 "k8s.io/api/core/v1"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	rbacv1 "k8s.io/api/rbac/v1"
)

// PackageRevisionDesiredState is the desired state of the package revision.
#PackageRevisionDesiredState: string // #enumPackageRevisionDesiredState

#enumPackageRevisionDesiredState:
	#PackageRevisionActive |
	#PackageRevisionInactive

// PackageRevisionActive is an active package revision.
#PackageRevisionActive: #PackageRevisionDesiredState & "Active"

// PackageRevisionInactive is an inactive package revision.
#PackageRevisionInactive: #PackageRevisionDesiredState & "Inactive"

// PackageRevisionSpec specifies the desired state of a PackageRevision.
#PackageRevisionSpec: {
	// DesiredState of the PackageRevision. Can be either Active or Inactive.
	desiredState: #PackageRevisionDesiredState @go(DesiredState)

	// Package image used by install Pod to extract package contents.
	image: string @go(Package)

	// PackagePullSecrets are named secrets in the same namespace that can be
	// used to fetch packages from private registries. They are also applied to
	// any images pulled for the package, such as a provider's controller image.
	// +optional
	packagePullSecrets?: [...corev1.#LocalObjectReference] @go(PackagePullSecrets,[]corev1.LocalObjectReference)

	// PackagePullPolicy defines the pull policy for the package. It is also
	// applied to any images pulled for the package, such as a provider's
	// controller image.
	// Default is IfNotPresent.
	// +optional
	// +kubebuilder:default=IfNotPresent
	packagePullPolicy?: null | corev1.#PullPolicy @go(PackagePullPolicy,*corev1.PullPolicy)

	// Revision number. Indicates when the revision will be garbage collected
	// based on the parent's RevisionHistoryLimit.
	revision: int64 @go(Revision)

	// IgnoreCrossplaneConstraints indicates to the package manager whether to
	// honor Crossplane version constrains specified by the package.
	// Default is false.
	// +optional
	// +kubebuilder:default=false
	ignoreCrossplaneConstraints?: null | bool @go(IgnoreCrossplaneConstraints,*bool)

	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package. Setting this value to true may have
	// unintended consequences.
	// Default is false.
	// +optional
	// +kubebuilder:default=false
	skipDependencyResolution?: null | bool @go(SkipDependencyResolution,*bool)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	commonLabels?: {[string]: string} @go(CommonLabels,map[string]string)
}

// PackageRevisionStatus represents the observed state of a PackageRevision.
#PackageRevisionStatus: {
	xpv1.#ConditionedStatus

	// References to objects owned by PackageRevision.
	objectRefs?: [...xpv1.#TypedReference] @go(ObjectRefs,[]xpv1.TypedReference)

	// Dependency information.
	foundDependencies?:     int64 @go(FoundDependencies)
	installedDependencies?: int64 @go(InstalledDependencies)
	invalidDependencies?:   int64 @go(InvalidDependencies)

	// PermissionRequests made by this package. The package declares that its
	// controller needs these permissions to run. The RBAC manager is
	// responsible for granting them.
	permissionRequests?: [...rbacv1.#PolicyRule] @go(PermissionRequests,[]rbacv1.PolicyRule)
}

// A ControllerReference references the controller (e.g. Deployment), if any,
// that is responsible for reconciling the types a package revision installs.
#ControllerReference: {
	// Name of the controller.
	name: string @go(Name)
}
