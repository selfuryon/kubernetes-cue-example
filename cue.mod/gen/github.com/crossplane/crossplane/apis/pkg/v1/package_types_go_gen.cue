// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/pkg/v1

package v1

import corev1 "k8s.io/api/core/v1"

// RevisionActivationPolicy indicates how a package should activate its
// revisions.
#RevisionActivationPolicy: string

// PackageSpec specifies the desired state of a Package.
#PackageSpec: {
	// Package is the name of the package that is being requested.
	package: string @go(Package)

	// RevisionActivationPolicy specifies how the package controller should
	// update from one revision to the next. Options are Automatic or Manual.
	// Default is Automatic.
	// +optional
	// +kubebuilder:default=Automatic
	revisionActivationPolicy?: null | #RevisionActivationPolicy @go(RevisionActivationPolicy,*RevisionActivationPolicy)

	// RevisionHistoryLimit dictates how the package controller cleans up old
	// inactive package revisions.
	// Defaults to 1. Can be disabled by explicitly setting to 0.
	// +optional
	// +kubebuilder:default=1
	revisionHistoryLimit?: null | int64 @go(RevisionHistoryLimit,*int64)

	// PackagePullSecrets are named secrets in the same namespace that can be used
	// to fetch packages from private registries.
	// +optional
	packagePullSecrets?: [...corev1.#LocalObjectReference] @go(PackagePullSecrets,[]corev1.LocalObjectReference)

	// PackagePullPolicy defines the pull policy for the package.
	// Default is IfNotPresent.
	// +optional
	// +kubebuilder:default=IfNotPresent
	packagePullPolicy?: null | corev1.#PullPolicy @go(PackagePullPolicy,*corev1.PullPolicy)

	// IgnoreCrossplaneConstraints indicates to the package manager whether to
	// honor Crossplane version constrains specified by the package.
	// Default is false.
	// +optional
	// +kubebuilder:default=false
	ignoreCrossplaneConstraints?: null | bool @go(IgnoreCrossplaneConstraints,*bool)

	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package. Setting this value to true may have
	// unintended consequences.
	// Default is false.
	// +optional
	// +kubebuilder:default=false
	skipDependencyResolution?: null | bool @go(SkipDependencyResolution,*bool)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	commonLabels?: {[string]: string} @go(CommonLabels,map[string]string)
}

// PackageStatus represents the observed state of a Package.
#PackageStatus: {
	// CurrentRevision is the name of the current package revision. It will
	// reflect the most up to date revision, whether it has been activated or
	// not.
	currentRevision?: string @go(CurrentRevision)

	// CurrentIdentifier is the most recent package source that was used to
	// produce a revision. The package manager uses this field to determine
	// whether to check for package updates for a given source when
	// packagePullPolicy is set to IfNotPresent. Manually removing this field
	// will cause the package manager to check that the current revision is
	// correct for the given package source.
	currentIdentifier?: string @go(CurrentIdentifier)
}
