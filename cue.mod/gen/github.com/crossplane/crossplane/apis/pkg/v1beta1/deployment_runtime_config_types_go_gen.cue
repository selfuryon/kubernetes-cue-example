// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/pkg/v1beta1

package v1beta1

import (
	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ObjectMeta is metadata contains the configurable metadata fields for the
// runtime objects.
#ObjectMeta: {
	// Name is the name of the object.
	// +optional
	name?: null | string @go(Name,*string)

	// Annotations is an unstructured key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. Labels will be merged with internal labels
	// used by crossplane, and labels with a crossplane.io key might be
	// overwritten.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)
}

// DeploymentTemplate is the template for the Deployment object.
#DeploymentTemplate: {
	// Metadata contains the configurable metadata fields for the Deployment.
	// +optional
	metadata?: null | #ObjectMeta @go(Metadata,*ObjectMeta)

	// Spec contains the configurable spec fields for the Deployment object.
	// +optional
	spec?: null | appsv1.#DeploymentSpec @go(Spec,*appsv1.DeploymentSpec)
}

// ServiceTemplate is the template for the Service object.
#ServiceTemplate: {
	// Metadata contains the configurable metadata fields for the Service.
	// +optional
	metadata?: null | #ObjectMeta @go(Metadata,*ObjectMeta)
}

// ServiceAccountTemplate is the template for the ServiceAccount object.
#ServiceAccountTemplate: {
	// Metadata contains the configurable metadata fields for the ServiceAccount.
	// +optional
	metadata?: null | #ObjectMeta @go(Metadata,*ObjectMeta)
}

// DeploymentRuntimeConfigSpec specifies the configuration for a packaged controller.
// Values provided will override package manager defaults. Labels and
// annotations are passed to both the controller Deployment and ServiceAccount.
#DeploymentRuntimeConfigSpec: {
	// DeploymentTemplate is the template for the Deployment object.
	// +optional
	deploymentTemplate?: null | #DeploymentTemplate @go(DeploymentTemplate,*DeploymentTemplate)

	// ServiceTemplate is the template for the Service object.
	// +optional
	serviceTemplate?: null | #ServiceTemplate @go(ServiceTemplate,*ServiceTemplate)

	// ServiceAccountTemplate is the template for the ServiceAccount object.
	// +optional
	serviceAccountTemplate?: null | #ServiceAccountTemplate @go(ServiceAccountTemplate,*ServiceAccountTemplate)
}

// A DeploymentRuntimeConfig is used to configure the package runtime when
// the package uses a runtime and the package manager is running with
// --package-runtime=Deployment (the default). See the following design doc for
// more details:https://github.com/crossplane/crossplane/blob/91edeae3fcac96c6c8a1759a723981eea4bb77e4/design/one-pager-package-runtime-config.md#migration-from-controllerconfig
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane}
#DeploymentRuntimeConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec?:     #DeploymentRuntimeConfigSpec @go(Spec)
}

// DeploymentRuntimeConfigList contains a list of DeploymentRuntimeConfig.
#DeploymentRuntimeConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#DeploymentRuntimeConfig] @go(Items,[]DeploymentRuntimeConfig)
}
