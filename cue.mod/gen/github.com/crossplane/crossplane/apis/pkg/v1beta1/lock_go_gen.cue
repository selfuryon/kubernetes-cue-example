// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/pkg/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// A PackageType is a type of package.
#PackageType: string // #enumPackageType

#enumPackageType:
	#ConfigurationPackageType |
	#ProviderPackageType |
	#FunctionPackageType

#ConfigurationPackageType: #PackageType & "Configuration"
#ProviderPackageType:      #PackageType & "Provider"
#FunctionPackageType:      #PackageType & "Function"

// LockPackage is a package that is in the lock.
#LockPackage: {
	// Name corresponds to the name of the package revision for this package.
	name: string @go(Name)

	// Type is the type of package. Can be either Configuration or Provider.
	type: #PackageType @go(Type)

	// Source is the OCI image name without a tag or digest.
	source: string @go(Source)

	// Version is the tag or digest of the OCI image.
	version: string @go(Version)

	// Dependencies are the list of dependencies of this package. The order of
	// the dependencies will dictate the order in which they are resolved.
	dependencies: [...#Dependency] @go(Dependencies,[]Dependency)
}

// A Dependency is a dependency of a package in the lock.
#Dependency: {
	// Package is the OCI image name without a tag or digest.
	package: string @go(Package)

	// Type is the type of package. Can be either Configuration or Provider.
	type: #PackageType @go(Type)

	// Constraints is a valid semver range, which will be used to select a valid
	// dependency version.
	constraints: string @go(Constraints)
}

// Lock is the CRD type that tracks package dependencies.
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster
#Lock: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	packages?: [...#LockPackage] @go(Packages,[]LockPackage)
}

// LockList contains a list of Lock.
#LockList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Lock] @go(Items,[]Lock)
}
