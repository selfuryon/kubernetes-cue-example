// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane-runtime/apis/common/v1

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// A ConditionType represents a condition a resource could be in.
#ConditionType: string // #enumConditionType

#enumConditionType:
	#TypeReady |
	#TypeSynced

// TypeReady resources are believed to be ready to handle work.
#TypeReady: #ConditionType & "Ready"

// TypeSynced resources are believed to be in sync with the
// Kubernetes resources that manage their lifecycle.
#TypeSynced: #ConditionType & "Synced"

// A ConditionReason represents the reason a resource is in a condition.
#ConditionReason: string // #enumConditionReason

#enumConditionReason:
	#ReasonAvailable |
	#ReasonUnavailable |
	#ReasonCreating |
	#ReasonDeleting |
	#ReasonReconcileSuccess |
	#ReasonReconcileError |
	#ReasonReconcilePaused

#ReasonAvailable:   #ConditionReason & "Available"
#ReasonUnavailable: #ConditionReason & "Unavailable"
#ReasonCreating:    #ConditionReason & "Creating"
#ReasonDeleting:    #ConditionReason & "Deleting"

#ReasonReconcileSuccess: #ConditionReason & "ReconcileSuccess"
#ReasonReconcileError:   #ConditionReason & "ReconcileError"
#ReasonReconcilePaused:  #ConditionReason & "ReconcilePaused"

// A Condition that may apply to a resource.
#Condition: {
	// Type of this condition. At most one of each condition type may apply to
	// a resource at any point in time.
	type: #ConditionType @go(Type)

	// Status of this condition; is it currently True, False, or Unknown?
	status: corev1.#ConditionStatus @go(Status)

	// LastTransitionTime is the last time this condition transitioned from one
	// status to another.
	lastTransitionTime: metav1.#Time @go(LastTransitionTime)

	// A Reason for this condition's last transition from one status to another.
	reason: #ConditionReason @go(Reason)

	// A Message containing details about this condition's last transition from
	// one status to another, if any.
	// +optional
	message?: string @go(Message)
}

// A ConditionedStatus reflects the observed status of a resource. Only
// one condition of each type may exist.
#ConditionedStatus: {
	// Conditions of the resource.
	// +listType=map
	// +listMapKey=type
	// +optional
	conditions?: [...#Condition] @go(Conditions,[]Condition)
}
