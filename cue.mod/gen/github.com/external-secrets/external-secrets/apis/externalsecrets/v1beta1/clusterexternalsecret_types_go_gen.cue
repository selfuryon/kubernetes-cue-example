// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.
#ClusterExternalSecretSpec: {
	// The spec for the ExternalSecrets to be created
	externalSecretSpec: #ExternalSecretSpec @go(ExternalSecretSpec)

	// The name of the external secrets to be created defaults to the name of the ClusterExternalSecret
	// +optional
	externalSecretName?: string @go(ExternalSecretName)

	// The metadata of the external secrets to be created
	// +optional
	externalSecretMetadata?: #ExternalSecretMetadata @go(ExternalSecretMetadata)

	// The labels to select by to find the Namespaces to create the ExternalSecrets in.
	// +optional
	namespaceSelector?: null | metav1.#LabelSelector @go(NamespaceSelector,*metav1.LabelSelector)

	// Choose namespaces by name. This field is ORed with anything that NamespaceSelector ends up choosing.
	// +optional
	namespaces?: [...string] @go(Namespaces,[]string)

	// The time in which the controller should reconcile its objects and recheck namespaces for labels.
	refreshTime?: null | metav1.#Duration @go(RefreshInterval,*metav1.Duration)
}

// ExternalSecretMetadata defines metadata fields for the ExternalSecret generated by the ClusterExternalSecret.
#ExternalSecretMetadata: {
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)
}

#ClusterExternalSecretConditionType: string // #enumClusterExternalSecretConditionType

#enumClusterExternalSecretConditionType:
	#ClusterExternalSecretReady

#ClusterExternalSecretReady: #ClusterExternalSecretConditionType & "Ready"

#ClusterExternalSecretStatusCondition: {
	type:   #ClusterExternalSecretConditionType @go(Type)
	status: corev1.#ConditionStatus             @go(Status)

	// +optional
	message?: string @go(Message)
}

// ClusterExternalSecretNamespaceFailure represents a failed namespace deployment and it's reason.
#ClusterExternalSecretNamespaceFailure: {
	// Namespace is the namespace that failed when trying to apply an ExternalSecret
	namespace: string @go(Namespace)

	// Reason is why the ExternalSecret failed to apply to the namespace
	// +optional
	reason?: string @go(Reason)
}

// ClusterExternalSecretStatus defines the observed state of ClusterExternalSecret.
#ClusterExternalSecretStatus: {
	// ExternalSecretName is the name of the ExternalSecrets created by the ClusterExternalSecret
	externalSecretName?: string @go(ExternalSecretName)

	// Failed namespaces are the namespaces that failed to apply an ExternalSecret
	// +optional
	failedNamespaces?: [...#ClusterExternalSecretNamespaceFailure] @go(FailedNamespaces,[]ClusterExternalSecretNamespaceFailure)

	// ProvisionedNamespaces are the namespaces where the ClusterExternalSecret has secrets
	// +optional
	provisionedNamespaces?: [...string] @go(ProvisionedNamespaces,[]string)

	// +optional
	conditions?: [...#ClusterExternalSecretStatusCondition] @go(Conditions,[]ClusterExternalSecretStatusCondition)
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={externalsecrets},shortName=ces
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Store",type=string,JSONPath=`.spec.externalSecretSpec.secretStoreRef.name`
// +kubebuilder:printcolumn:name="Refresh Interval",type=string,JSONPath=`.spec.refreshTime`
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].status`
// ClusterExternalSecret is the Schema for the clusterexternalsecrets API.
#ClusterExternalSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta           @go(ObjectMeta)
	spec?:     #ClusterExternalSecretSpec   @go(Spec)
	status?:   #ClusterExternalSecretStatus @go(Status)
}

// ClusterExternalSecretList contains a list of ClusterExternalSecret.
#ClusterExternalSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ClusterExternalSecret] @go(Items,[]ClusterExternalSecret)
}
