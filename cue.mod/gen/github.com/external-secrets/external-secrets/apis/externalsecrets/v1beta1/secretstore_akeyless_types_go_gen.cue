// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1

package v1beta1

import esmeta "github.com/external-secrets/external-secrets/apis/meta/v1"

// AkeylessProvider Configures an store to sync secrets using Akeyless KV.
#AkeylessProvider: {
	// Akeyless GW API Url from which the secrets to be fetched from.
	akeylessGWApiURL?: null | string @go(AkeylessGWApiURL,*string)

	// Auth configures how the operator authenticates with Akeyless.
	authSecretRef?: null | #AkeylessAuth @go(Auth,*AkeylessAuth)

	// PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used
	// if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates
	// are used to validate the TLS connection.
	// +optional
	caBundle?: bytes @go(CABundle,[]byte)

	// The provider for the CA bundle to use to validate Akeyless Gateway certificate.
	// +optional
	caProvider?: null | #CAProvider @go(CAProvider,*CAProvider)
}

#AkeylessAuth: {
	// Reference to a Secret that contains the details
	// to authenticate with Akeyless.
	// +optional
	secretRef?: #AkeylessAuthSecretRef @go(SecretRef)

	// Kubernetes authenticates with Akeyless by passing the ServiceAccount
	// token stored in the named Secret resource.
	// +optional
	kubernetesAuth?: null | #AkeylessKubernetesAuth @go(KubernetesAuth,*AkeylessKubernetesAuth)
}

// AkeylessAuthSecretRef
// AKEYLESS_ACCESS_TYPE_PARAM: AZURE_OBJ_ID OR GCP_AUDIENCE OR ACCESS_KEY OR KUB_CONFIG_NAME.
#AkeylessAuthSecretRef: {
	// The SecretAccessID is used for authentication
	accessID?:        esmeta.#SecretKeySelector @go(AccessID)
	accessType?:      esmeta.#SecretKeySelector @go(AccessType)
	accessTypeParam?: esmeta.#SecretKeySelector @go(AccessTypeParam)
}

// Authenticate with Kubernetes ServiceAccount token stored.
#AkeylessKubernetesAuth: {
	// the Akeyless Kubernetes auth-method access-id
	accessID: string @go(AccessID)

	// Kubernetes-auth configuration name in Akeyless-Gateway
	k8sConfName: string @go(K8sConfName)

	// Optional service account field containing the name of a kubernetes ServiceAccount.
	// If the service account is specified, the service account secret token JWT will be used
	// for authenticating with Akeyless. If the service account selector is not supplied,
	// the secretRef will be used instead.
	// +optional
	serviceAccountRef?: null | esmeta.#ServiceAccountSelector @go(ServiceAccountRef,*esmeta.ServiceAccountSelector)

	// Optional secret field containing a Kubernetes ServiceAccount JWT used
	// for authenticating with Akeyless. If a name is specified without a key,
	// `token` is the default. If one is not specified, the one bound to
	// the controller will be used.
	// +optional
	secretRef?: null | esmeta.#SecretKeySelector @go(SecretRef,*esmeta.SecretKeySelector)
}
