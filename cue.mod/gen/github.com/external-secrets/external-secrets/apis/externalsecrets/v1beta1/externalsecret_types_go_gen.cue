// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.
#SecretStoreRef: {
	// Name of the SecretStore resource
	name: string @go(Name)

	// Kind of the SecretStore resource (SecretStore or ClusterSecretStore)
	// Defaults to `SecretStore`
	// +optional
	kind?: string @go(Kind)
}

// ExternalSecretCreationPolicy defines rules on how to create the resulting Secret.
// +kubebuilder:validation:Enum=Owner;Orphan;Merge;None
#ExternalSecretCreationPolicy: string // #enumExternalSecretCreationPolicy

#enumExternalSecretCreationPolicy:
	#CreatePolicyOwner |
	#CreatePolicyOrphan |
	#CreatePolicyMerge |
	#CreatePolicyNone

// Owner creates the Secret and sets .metadata.ownerReferences to the ExternalSecret resource.
#CreatePolicyOwner: #ExternalSecretCreationPolicy & "Owner"

// Orphan creates the Secret and does not set the ownerReference.
// I.e. it will be orphaned after the deletion of the ExternalSecret.
#CreatePolicyOrphan: #ExternalSecretCreationPolicy & "Orphan"

// Merge does not create the Secret, but merges the data fields to the Secret.
#CreatePolicyMerge: #ExternalSecretCreationPolicy & "Merge"

// None does not create a Secret (future use with injector).
#CreatePolicyNone: #ExternalSecretCreationPolicy & "None"

// ExternalSecretDeletionPolicy defines rules on how to delete the resulting Secret.
// +kubebuilder:validation:Enum=Delete;Merge;Retain
#ExternalSecretDeletionPolicy: string // #enumExternalSecretDeletionPolicy

#enumExternalSecretDeletionPolicy:
	#DeletionPolicyDelete |
	#DeletionPolicyMerge |
	#DeletionPolicyRetain

// Delete deletes the secret if all provider secrets are deleted.
// If a secret gets deleted on the provider side and is not accessible
// anymore this is not considered an error and the ExternalSecret
// does not go into SecretSyncedError status.
#DeletionPolicyDelete: #ExternalSecretDeletionPolicy & "Delete"

// Merge removes keys in the secret, but not the secret itself.
// If a secret gets deleted on the provider side and is not accessible
// anymore this is not considered an error and the ExternalSecret
// does not go into SecretSyncedError status.
#DeletionPolicyMerge: #ExternalSecretDeletionPolicy & "Merge"

// Retain will retain the secret if all provider secrets have been deleted.
// If a provider secret does not exist the ExternalSecret gets into the
// SecretSyncedError status.
#DeletionPolicyRetain: #ExternalSecretDeletionPolicy & "Retain"

// ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.
#ExternalSecretTemplateMetadata: {
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)
}

// ExternalSecretTemplate defines a blueprint for the created Secret resource.
// we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448
#ExternalSecretTemplate: {
	// +optional
	type?: corev1.#SecretType @go(Type)

	// EngineVersion specifies the template engine version
	// that should be used to compile/execute the
	// template specified in .data and .templateFrom[].
	// +kubebuilder:default="v2"
	engineVersion?: #TemplateEngineVersion @go(EngineVersion)

	// +optional
	metadata?: #ExternalSecretTemplateMetadata @go(Metadata)

	// +kubebuilder:default="Replace"
	mergePolicy?: #TemplateMergePolicy @go(MergePolicy)

	// +optional
	data?: {[string]: string} @go(Data,map[string]string)

	// +optional
	templateFrom?: [...#TemplateFrom] @go(TemplateFrom,[]TemplateFrom)
}

// +kubebuilder:validation:Enum=Replace;Merge
#TemplateMergePolicy: string // #enumTemplateMergePolicy

#enumTemplateMergePolicy:
	#MergePolicyReplace |
	#MergePolicyMerge

#MergePolicyReplace: #TemplateMergePolicy & "Replace"
#MergePolicyMerge:   #TemplateMergePolicy & "Merge"

// +kubebuilder:validation:Enum=v1;v2
#TemplateEngineVersion: string // #enumTemplateEngineVersion

#enumTemplateEngineVersion:
	#TemplateEngineV1 |
	#TemplateEngineV2

#TemplateEngineV1: #TemplateEngineVersion & "v1"
#TemplateEngineV2: #TemplateEngineVersion & "v2"

#TemplateFrom: {
	configMap?: null | #TemplateRef @go(ConfigMap,*TemplateRef)
	secret?:    null | #TemplateRef @go(Secret,*TemplateRef)

	// +optional
	// +optional
	// +kubebuilder:default="Data"
	target?: #TemplateTarget @go(Target)

	// +optional
	literal?: null | string @go(Literal,*string)
}

// +kubebuilder:validation:Enum=Values;KeysAndValues
#TemplateScope: string // #enumTemplateScope

#enumTemplateScope:
	#TemplateScopeValues |
	#TemplateScopeKeysAndValues

#TemplateScopeValues:        #TemplateScope & "Values"
#TemplateScopeKeysAndValues: #TemplateScope & "KeysAndValues"

// +kubebuilder:validation:Enum=Data;Annotations;Labels
#TemplateTarget: string // #enumTemplateTarget

#enumTemplateTarget:
	#TemplateTargetData |
	#TemplateTargetAnnotations |
	#TemplateTargetLabels

#TemplateTargetData:        #TemplateTarget & "Data"
#TemplateTargetAnnotations: #TemplateTarget & "Annotations"
#TemplateTargetLabels:      #TemplateTarget & "Labels"

#TemplateRef: {
	name: string @go(Name)
	items: [...#TemplateRefItem] @go(Items,[]TemplateRefItem)
}

#TemplateRefItem: {
	key: string @go(Key)

	// +kubebuilder:default="Values"
	templateAs?: #TemplateScope @go(TemplateAs)
}

// ExternalSecretTarget defines the Kubernetes Secret to be created
// There can be only one target per ExternalSecret.
#ExternalSecretTarget: {
	// Name defines the name of the Secret resource to be managed
	// This field is immutable
	// Defaults to the .metadata.name of the ExternalSecret resource
	// +optional
	name?: string @go(Name)

	// CreationPolicy defines rules on how to create the resulting Secret
	// Defaults to 'Owner'
	// +optional
	// +kubebuilder:default="Owner"
	creationPolicy?: #ExternalSecretCreationPolicy @go(CreationPolicy)

	// DeletionPolicy defines rules on how to delete the resulting Secret
	// Defaults to 'Retain'
	// +optional
	// +kubebuilder:default="Retain"
	deletionPolicy?: #ExternalSecretDeletionPolicy @go(DeletionPolicy)

	// Template defines a blueprint for the created Secret resource.
	// +optional
	template?: null | #ExternalSecretTemplate @go(Template,*ExternalSecretTemplate)

	// Immutable defines if the final secret will be immutable
	// +optional
	immutable?: bool @go(Immutable)
}

// ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.<key>) and the Provider data.
#ExternalSecretData: {
	// SecretKey defines the key in which the controller stores
	// the value. This is the key in the Kind=Secret
	secretKey: string @go(SecretKey)

	// RemoteRef points to the remote secret and defines
	// which secret (version/property/..) to fetch.
	remoteRef: #ExternalSecretDataRemoteRef @go(RemoteRef)

	// SourceRef allows you to override the source
	// from which the value will pulled from.
	sourceRef?: null | #StoreSourceRef @go(SourceRef,*StoreSourceRef)
}

// ExternalSecretDataRemoteRef defines Provider data location.
#ExternalSecretDataRemoteRef: {
	// Key is the key used in the Provider, mandatory
	key: string @go(Key)

	// +optional
	// Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None
	// +kubebuilder:default="None"
	metadataPolicy?: #ExternalSecretMetadataPolicy @go(MetadataPolicy)

	// +optional
	// Used to select a specific property of the Provider value (if a map), if supported
	property?: string @go(Property)

	// +optional
	// Used to select a specific version of the Provider value, if supported
	version?: string @go(Version)

	// +optional
	// Used to define a conversion Strategy
	// +kubebuilder:default="Default"
	conversionStrategy?: #ExternalSecretConversionStrategy @go(ConversionStrategy)

	// +optional
	// Used to define a decoding Strategy
	// +kubebuilder:default="None"
	decodingStrategy?: #ExternalSecretDecodingStrategy @go(DecodingStrategy)
}

// +kubebuilder:validation:Enum=None;Fetch
#ExternalSecretMetadataPolicy: string // #enumExternalSecretMetadataPolicy

#enumExternalSecretMetadataPolicy:
	#ExternalSecretMetadataPolicyNone |
	#ExternalSecretMetadataPolicyFetch

#ExternalSecretMetadataPolicyNone:  #ExternalSecretMetadataPolicy & "None"
#ExternalSecretMetadataPolicyFetch: #ExternalSecretMetadataPolicy & "Fetch"

// +kubebuilder:validation:Enum=Default;Unicode
#ExternalSecretConversionStrategy: string // #enumExternalSecretConversionStrategy

#enumExternalSecretConversionStrategy:
	#ExternalSecretConversionDefault |
	#ExternalSecretConversionUnicode

#ExternalSecretConversionDefault: #ExternalSecretConversionStrategy & "Default"
#ExternalSecretConversionUnicode: #ExternalSecretConversionStrategy & "Unicode"

// +kubebuilder:validation:Enum=Auto;Base64;Base64URL;None
#ExternalSecretDecodingStrategy: string // #enumExternalSecretDecodingStrategy

#enumExternalSecretDecodingStrategy:
	#ExternalSecretDecodeAuto |
	#ExternalSecretDecodeBase64 |
	#ExternalSecretDecodeBase64URL |
	#ExternalSecretDecodeNone

#ExternalSecretDecodeAuto:      #ExternalSecretDecodingStrategy & "Auto"
#ExternalSecretDecodeBase64:    #ExternalSecretDecodingStrategy & "Base64"
#ExternalSecretDecodeBase64URL: #ExternalSecretDecodingStrategy & "Base64URL"
#ExternalSecretDecodeNone:      #ExternalSecretDecodingStrategy & "None"

#ExternalSecretDataFromRemoteRef: {
	// Used to extract multiple key/value pairs from one secret
	// Note: Extract does not support sourceRef.Generator or sourceRef.GeneratorRef.
	// +optional
	extract?: null | #ExternalSecretDataRemoteRef @go(Extract,*ExternalSecretDataRemoteRef)

	// Used to find secrets based on tags or regular expressions
	// Note: Find does not support sourceRef.Generator or sourceRef.GeneratorRef.
	// +optional
	find?: null | #ExternalSecretFind @go(Find,*ExternalSecretFind)

	// Used to rewrite secret Keys after getting them from the secret Provider
	// Multiple Rewrite operations can be provided. They are applied in a layered order (first to last)
	// +optional
	rewrite?: [...#ExternalSecretRewrite] @go(Rewrite,[]ExternalSecretRewrite)

	// SourceRef points to a store or generator
	// which contains secret values ready to use.
	// Use this in combination with Extract or Find pull values out of
	// a specific SecretStore.
	// When sourceRef points to a generator Extract or Find is not supported.
	// The generator returns a static map of values
	sourceRef?: null | #StoreGeneratorSourceRef @go(SourceRef,*StoreGeneratorSourceRef)
}

#ExternalSecretRewrite: {
	// Used to rewrite with regular expressions.
	// The resulting key will be the output of a regexp.ReplaceAll operation.
	// +optional
	regexp?: null | #ExternalSecretRewriteRegexp @go(Regexp,*ExternalSecretRewriteRegexp)

	// Used to apply string transformation on the secrets.
	// The resulting key will be the output of the template applied by the operation.
	// +optional
	transform?: null | #ExtermalSecretRewriteTransform @go(Transform,*ExtermalSecretRewriteTransform)
}

#ExternalSecretRewriteRegexp: {
	// Used to define the regular expression of a re.Compiler.
	source: string @go(Source)

	// Used to define the target pattern of a ReplaceAll operation.
	target: string @go(Target)
}

#ExtermalSecretRewriteTransform: {
	// Used to define the template to apply on the secret name.
	// `.value ` will specify the secret name in the template.
	template: string @go(Template)
}

#ExternalSecretFind: {
	// A root path to start the find operations.
	// +optional
	path?: null | string @go(Path,*string)

	// Finds secrets based on the name.
	// +optional
	name?: null | #FindName @go(Name,*FindName)

	// Find secrets based on tags.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)

	// +optional
	// Used to define a conversion Strategy
	// +kubebuilder:default="Default"
	conversionStrategy?: #ExternalSecretConversionStrategy @go(ConversionStrategy)

	// +optional
	// Used to define a decoding Strategy
	// +kubebuilder:default="None"
	decodingStrategy?: #ExternalSecretDecodingStrategy @go(DecodingStrategy)
}

#FindName: {
	// Finds secrets base
	// +optional
	regexp?: string @go(RegExp)
}

// ExternalSecretSpec defines the desired state of ExternalSecret.
#ExternalSecretSpec: {
	// +optional
	secretStoreRef?: #SecretStoreRef @go(SecretStoreRef)

	// +kubebuilder:default={creationPolicy:Owner,deletionPolicy:Retain}
	// +optional
	target?: #ExternalSecretTarget @go(Target)

	// RefreshInterval is the amount of time before the values are read again from the SecretStore provider
	// Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	// May be set to zero to fetch and create it once. Defaults to 1h.
	// +kubebuilder:default="1h"
	refreshInterval?: null | metav1.#Duration @go(RefreshInterval,*metav1.Duration)

	// Data defines the connection between the Kubernetes Secret keys and the Provider data
	// +optional
	data?: [...#ExternalSecretData] @go(Data,[]ExternalSecretData)

	// DataFrom is used to fetch all properties from a specific Provider data
	// If multiple entries are specified, the Secret keys are merged in the specified order
	// +optional
	dataFrom?: [...#ExternalSecretDataFromRemoteRef] @go(DataFrom,[]ExternalSecretDataFromRemoteRef)
}

// StoreSourceRef allows you to override the SecretStore source
// from which the secret will be pulled from.
// You can define at maximum one property.
// +kubebuilder:validation:MaxProperties=1
#StoreSourceRef: {
	// +optional
	storeRef?: #SecretStoreRef @go(SecretStoreRef)

	// GeneratorRef points to a generator custom resource.
	//
	// Deprecated: The generatorRef is not implemented in .data[].
	// this will be removed with v1.
	generatorRef?: null | #GeneratorRef @go(GeneratorRef,*GeneratorRef)
}

// StoreGeneratorSourceRef allows you to override the source
// from which the secret will be pulled from.
// You can define at maximum one property.
// +kubebuilder:validation:MaxProperties=1
#StoreGeneratorSourceRef: {
	// +optional
	storeRef?: null | #SecretStoreRef @go(SecretStoreRef,*SecretStoreRef)

	// GeneratorRef points to a generator custom resource.
	// +optional
	generatorRef?: null | #GeneratorRef @go(GeneratorRef,*GeneratorRef)
}

// GeneratorRef points to a generator custom resource.
#GeneratorRef: {
	// Specify the apiVersion of the generator resource
	// +kubebuilder:default="generators.external-secrets.io/v1alpha1"
	apiVersion?: string @go(APIVersion)

	// Specify the Kind of the resource, e.g. Password, ACRAccessToken etc.
	kind: string @go(Kind)

	// Specify the name of the generator resource
	name: string @go(Name)
}

#ExternalSecretConditionType: string // #enumExternalSecretConditionType

#enumExternalSecretConditionType:
	#ExternalSecretReady |
	#ExternalSecretDeleted

#ExternalSecretReady:   #ExternalSecretConditionType & "Ready"
#ExternalSecretDeleted: #ExternalSecretConditionType & "Deleted"

#ExternalSecretStatusCondition: {
	type:   #ExternalSecretConditionType @go(Type)
	status: corev1.#ConditionStatus      @go(Status)

	// +optional
	reason?: string @go(Reason)

	// +optional
	message?: string @go(Message)

	// +optional
	lastTransitionTime?: metav1.#Time @go(LastTransitionTime)
}

// ConditionReasonSecretSynced indicates that the secrets was synced.
#ConditionReasonSecretSynced: "SecretSynced"

// ConditionReasonSecretSyncedError indicates that there was an error syncing the secret.
#ConditionReasonSecretSyncedError: "SecretSyncedError"

// ConditionReasonSecretDeleted indicates that the secret has been deleted.
#ConditionReasonSecretDeleted: "SecretDeleted"
#ReasonInvalidStoreRef:        "InvalidStoreRef"
#ReasonUnavailableStore:       "UnavailableStore"
#ReasonProviderClientConfig:   "InvalidProviderClientConfig"
#ReasonUpdateFailed:           "UpdateFailed"
#ReasonDeprecated:             "ParameterDeprecated"
#ReasonUpdated:                "Updated"
#ReasonDeleted:                "Deleted"

#ExternalSecretStatus: {
	// +nullable
	// refreshTime is the time and date the external secret was fetched and
	// the target secret updated
	refreshTime?: metav1.#Time @go(RefreshTime)

	// SyncedResourceVersion keeps track of the last synced version
	syncedResourceVersion?: string @go(SyncedResourceVersion)

	// +optional
	conditions?: [...#ExternalSecretStatusCondition] @go(Conditions,[]ExternalSecretStatusCondition)

	// Binding represents a servicebinding.io Provisioned Service reference to the secret
	binding?: corev1.#LocalObjectReference @go(Binding)
}

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// ExternalSecret is the Schema for the external-secrets API.
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={externalsecrets},shortName=es
// +kubebuilder:printcolumn:name="Store",type=string,JSONPath=`.spec.secretStoreRef.name`
// +kubebuilder:printcolumn:name="Refresh Interval",type=string,JSONPath=`.spec.refreshInterval`
// +kubebuilder:printcolumn:name="Status",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].reason`
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].status`
#ExternalSecret: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec?:     #ExternalSecretSpec   @go(Spec)
	status?:   #ExternalSecretStatus @go(Status)
}

// AnnotationDataHash is used to ensure consistency.
#AnnotationDataHash: "reconcile.external-secrets.io/data-hash"

// LabelOwner points to the owning ExternalSecret resource
//  and is used to manage the lifecycle of a Secret
#LabelOwner: "reconcile.external-secrets.io/created-by"

// ExternalSecretList contains a list of ExternalSecret resources.
#ExternalSecretList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#ExternalSecret] @go(Items,[]ExternalSecret)
}
