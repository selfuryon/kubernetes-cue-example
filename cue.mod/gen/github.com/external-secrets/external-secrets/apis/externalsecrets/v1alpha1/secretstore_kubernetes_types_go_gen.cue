// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/external-secrets/external-secrets/apis/externalsecrets/v1alpha1

package v1alpha1

import esmeta "github.com/external-secrets/external-secrets/apis/meta/v1"

#KubernetesServer: {
	// configures the Kubernetes server Address.
	// +kubebuilder:default=kubernetes.default
	// +optional
	url?: string @go(URL)

	// CABundle is a base64-encoded CA certificate
	// +optional
	caBundle?: bytes @go(CABundle,[]byte)

	// see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider
	// +optional
	caProvider?: null | #CAProvider @go(CAProvider,*CAProvider)
}

// Configures a store to sync secrets with a Kubernetes instance.
#KubernetesProvider: {
	// configures the Kubernetes server Address.
	server?: #KubernetesServer @go(Server)

	// Auth configures how secret-manager authenticates with a Kubernetes instance.
	auth: #KubernetesAuth @go(Auth)

	// Remote namespace to fetch the secrets from
	// +kubebuilder:default= default
	// +optional
	remoteNamespace?: string @go(RemoteNamespace)
}

// +kubebuilder:validation:MinProperties=1
// +kubebuilder:validation:MaxProperties=1
#KubernetesAuth: {
	// has both clientCert and clientKey as secretKeySelector
	// +optional
	cert?: null | #CertAuth @go(Cert,*CertAuth)

	// use static token to authenticate with
	// +optional
	token?: null | #TokenAuth @go(Token,*TokenAuth)

	// points to a service account that should be used for authentication
	// +optional
	serviceAccount?: null | #ServiceAccountAuth @go(ServiceAccount,*ServiceAccountAuth)
}

#CertAuth: {
	clientCert?: esmeta.#SecretKeySelector @go(ClientCert)
	clientKey?:  esmeta.#SecretKeySelector @go(ClientKey)
}

#TokenAuth: {
	bearerToken?: esmeta.#SecretKeySelector @go(BearerToken)
}

#ServiceAccountAuth: {
	serviceAccount?: esmeta.#ServiceAccountSelector @go(ServiceAccountRef)
}
