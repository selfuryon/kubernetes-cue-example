// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/api/core/v1"
)

// Application is a definition of Application resource.
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:path=applications,shortName=app;apps
// +kubebuilder:printcolumn:name="Sync Status",type=string,JSONPath=`.status.sync.status`
// +kubebuilder:printcolumn:name="Health Status",type=string,JSONPath=`.status.health.status`
// +kubebuilder:printcolumn:name="Revision",type=string,JSONPath=`.status.sync.revision`,priority=10
#Application: {
	metav1.#TypeMeta
	metadata:   metav1.#ObjectMeta @go(ObjectMeta) @protobuf(1,bytes,opt)
	spec:       #ApplicationSpec   @go(Spec) @protobuf(2,bytes,opt)
	status?:    #ApplicationStatus @go(Status) @protobuf(3,bytes,opt)
	operation?: null | #Operation  @go(Operation,*Operation) @protobuf(4,bytes,opt)
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
#ApplicationSpec: {
	// Source is a reference to the location of the application's manifests or chart
	source?: null | #ApplicationSource @go(Source,*ApplicationSource) @protobuf(1,bytes,opt)

	// Destination is a reference to the target Kubernetes server and namespace
	destination: #ApplicationDestination @go(Destination) @protobuf(2,bytes)

	// Project is a reference to the project this application belongs to.
	// The empty string means that application belongs to the 'default' project.
	project: string @go(Project) @protobuf(3,bytes)

	// SyncPolicy controls when and how a sync will be performed
	syncPolicy?: null | #SyncPolicy @go(SyncPolicy,*SyncPolicy) @protobuf(4,bytes)

	// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
	ignoreDifferences?: #IgnoreDifferences @go(IgnoreDifferences) @protobuf(5,bytes)

	// Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
	info?: [...#Info] @go(Info,[]Info) @protobuf(6,bytes)

	// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.
	// This should only be changed in exceptional circumstances.
	// Setting to zero will store no history. This will reduce storage used.
	// Increasing will increase the space used to store the history, so we do not recommend increasing it.
	// Default is 10.
	revisionHistoryLimit?: null | int64 @go(RevisionHistoryLimit,*int64) @protobuf(7,bytes)

	// Sources is a reference to the location of the application's manifests or chart
	sources?: #ApplicationSources @go(Sources) @protobuf(8,bytes,opt)
}

#IgnoreDifferences: [...#ResourceIgnoreDifferences]

#TrackingMethod: string

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
#ResourceIgnoreDifferences: {
	group?:     string @go(Group) @protobuf(1,bytes,opt)
	kind:       string @go(Kind) @protobuf(2,bytes,opt)
	name?:      string @go(Name) @protobuf(3,bytes,opt)
	namespace?: string @go(Namespace) @protobuf(4,bytes,opt)
	jsonPointers?: [...string] @go(JSONPointers,[]string) @protobuf(5,bytes,opt)
	jqPathExpressions?: [...string] @go(JQPathExpressions,[]string) @protobuf(6,bytes,opt)

	// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the
	// desired state defined in the SCM and won't be displayed in diffs
	managedFieldsManagers?: [...string] @go(ManagedFieldsManagers,[]string) @protobuf(7,bytes,opt)
}

// EnvEntry represents an entry in the application's environment
#EnvEntry: {
	// Name is the name of the variable, usually expressed in uppercase
	name: string @go(Name) @protobuf(1,bytes,opt)

	// Value is the value of the variable
	value: string @go(Value) @protobuf(2,bytes,opt)
}

// Env is a list of environment variable entries
#Env: [...null | #EnvEntry]

// ApplicationSource contains all required information about the source of an application
#ApplicationSource: {
	// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
	repoURL: string @go(RepoURL) @protobuf(1,bytes,opt)

	// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
	path?: string @go(Path) @protobuf(2,bytes,opt)

	// TargetRevision defines the revision of the source to sync the application to.
	// In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
	// In case of Helm, this is a semver tag for the Chart's version.
	targetRevision?: string @go(TargetRevision) @protobuf(4,bytes,opt)

	// Helm holds helm specific options
	helm?: null | #ApplicationSourceHelm @go(Helm,*ApplicationSourceHelm) @protobuf(7,bytes,opt)

	// Kustomize holds kustomize specific options
	kustomize?: null | #ApplicationSourceKustomize @go(Kustomize,*ApplicationSourceKustomize) @protobuf(8,bytes,opt)

	// Directory holds path/directory specific options
	directory?: null | #ApplicationSourceDirectory @go(Directory,*ApplicationSourceDirectory) @protobuf(10,bytes,opt)

	// Plugin holds config management plugin specific options
	plugin?: null | #ApplicationSourcePlugin @go(Plugin,*ApplicationSourcePlugin) @protobuf(11,bytes,opt)

	// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
	chart?: string @go(Chart) @protobuf(12,bytes,opt)

	// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
	ref?: string @go(Ref) @protobuf(13,bytes,opt)
}

// ApplicationSources contains list of required information about the sources of an application
#ApplicationSources: [...#ApplicationSource]

// ApplicationSourceType specifies the type of the application's source
#ApplicationSourceType: string // #enumApplicationSourceType

#enumApplicationSourceType:
	#ApplicationSourceTypeHelm |
	#ApplicationSourceTypeKustomize |
	#ApplicationSourceTypeDirectory |
	#ApplicationSourceTypePlugin

#ApplicationSourceTypeHelm:      #ApplicationSourceType & "Helm"
#ApplicationSourceTypeKustomize: #ApplicationSourceType & "Kustomize"
#ApplicationSourceTypeDirectory: #ApplicationSourceType & "Directory"
#ApplicationSourceTypePlugin:    #ApplicationSourceType & "Plugin"

// RefreshType specifies how to refresh the sources of a given application
#RefreshType: string // #enumRefreshType

#enumRefreshType:
	#RefreshTypeNormal |
	#RefreshTypeHard

#RefreshTypeNormal: #RefreshType & "normal"
#RefreshTypeHard:   #RefreshType & "hard"

#RefTarget: {
	Repo:           #Repository @protobuf(1,bytes,opt,name=repo)
	TargetRevision: string      @protobuf(2,bytes,opt,name=targetRevision)
	Chart:          string      @protobuf(3,bytes,opt,name=chart)
}

#RefTargetRevisionMapping: [string]: null | #RefTarget

// ApplicationSourceHelm holds helm specific options
#ApplicationSourceHelm: {
	// ValuesFiles is a list of Helm value files to use when generating a template
	valueFiles?: [...string] @go(ValueFiles,[]string) @protobuf(1,bytes,opt)

	// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
	parameters?: [...#HelmParameter] @go(Parameters,[]HelmParameter) @protobuf(2,bytes,opt)

	// ReleaseName is the Helm release name to use. If omitted it will use the application name
	releaseName?: string @go(ReleaseName) @protobuf(3,bytes,opt)

	// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
	// +patchStrategy=replace
	values?: string @go(Values) @protobuf(4,bytes,opt)

	// FileParameters are file parameters to the helm template
	fileParameters?: [...#HelmFileParameter] @go(FileParameters,[]HelmFileParameter) @protobuf(5,bytes,opt)

	// Version is the Helm version to use for templating ("3")
	version?: string @go(Version) @protobuf(6,bytes,opt)

	// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
	passCredentials?: bool @go(PassCredentials) @protobuf(7,bytes,opt)

	// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
	ignoreMissingValueFiles?: bool @go(IgnoreMissingValueFiles) @protobuf(8,bytes,opt)

	// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
	skipCrds?: bool @go(SkipCrds) @protobuf(9,bytes,opt)

	// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
	// +kubebuilder:pruning:PreserveUnknownFields
	valuesObject?: null | runtime.#RawExtension @go(ValuesObject,*runtime.RawExtension) @protobuf(10,bytes,opt)
}

// HelmParameter is a parameter that's passed to helm template during manifest generation
#HelmParameter: {
	// Name is the name of the Helm parameter
	name?: string @go(Name) @protobuf(1,bytes,opt)

	// Value is the value for the Helm parameter
	value?: string @go(Value) @protobuf(2,bytes,opt)

	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	forceString?: bool @go(ForceString) @protobuf(3,bytes,opt)
}

// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#HelmFileParameter: {
	// Name is the name of the Helm parameter
	name?: string @go(Name) @protobuf(1,bytes,opt)

	// Path is the path to the file containing the values for the Helm parameter
	path?: string @go(Path) @protobuf(2,bytes,opt)
}

// KustomizeImage represents a Kustomize image definition in the format [old_image_name=]<image_name>:<image_tag>
#KustomizeImage: string

// KustomizeImages is a list of Kustomize images
#KustomizeImages: [...#KustomizeImage]

// ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize
#ApplicationSourceKustomize: {
	// NamePrefix is a prefix appended to resources for Kustomize apps
	namePrefix?: string @go(NamePrefix) @protobuf(1,bytes,opt)

	// NameSuffix is a suffix appended to resources for Kustomize apps
	nameSuffix?: string @go(NameSuffix) @protobuf(2,bytes,opt)

	// Images is a list of Kustomize image override specifications
	images?: #KustomizeImages @go(Images) @protobuf(3,bytes,opt)

	// CommonLabels is a list of additional labels to add to rendered manifests
	commonLabels?: {[string]: string} @go(CommonLabels,map[string]string) @protobuf(4,bytes,opt)

	// Version controls which version of Kustomize to use for rendering manifests
	version?: string @go(Version) @protobuf(5,bytes,opt)

	// CommonAnnotations is a list of additional annotations to add to rendered manifests
	commonAnnotations?: {[string]: string} @go(CommonAnnotations,map[string]string) @protobuf(6,bytes,opt)

	// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
	forceCommonLabels?: bool @go(ForceCommonLabels) @protobuf(7,bytes,opt)

	// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
	forceCommonAnnotations?: bool @go(ForceCommonAnnotations) @protobuf(8,bytes,opt)

	// Namespace sets the namespace that Kustomize adds to all resources
	namespace?: string @go(Namespace) @protobuf(9,bytes,opt)

	// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
	commonAnnotationsEnvsubst?: bool @go(CommonAnnotationsEnvsubst) @protobuf(10,bytes,opt)

	// Replicas is a list of Kustomize Replicas override specifications
	replicas?: #KustomizeReplicas @go(Replicas) @protobuf(11,bytes,opt)
}

#KustomizeReplica: {
	// Name of Deployment or StatefulSet
	name: string @go(Name) @protobuf(1,bytes)

	// Number of replicas
	count: intstr.#IntOrString @go(Count) @protobuf(2,bytes)
}

#KustomizeReplicas: [...#KustomizeReplica]

// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#JsonnetVar: {
	name:  string @go(Name) @protobuf(1,bytes,opt)
	value: string @go(Value) @protobuf(2,bytes,opt)
	code?: bool   @go(Code) @protobuf(3,bytes,opt)
}

// ApplicationSourceJsonnet holds options specific to applications of type Jsonnet
#ApplicationSourceJsonnet: {
	// ExtVars is a list of Jsonnet External Variables
	extVars?: [...#JsonnetVar] @go(ExtVars,[]JsonnetVar) @protobuf(1,bytes,opt)

	// TLAS is a list of Jsonnet Top-level Arguments
	tlas?: [...#JsonnetVar] @go(TLAs,[]JsonnetVar) @protobuf(2,bytes,opt)

	// Additional library search dirs
	libs?: [...string] @go(Libs,[]string) @protobuf(3,bytes,opt)
}

// ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet
#ApplicationSourceDirectory: {
	// Recurse specifies whether to scan a directory recursively for manifests
	recurse?: bool @go(Recurse) @protobuf(1,bytes,opt)

	// Jsonnet holds options specific to Jsonnet
	jsonnet?: #ApplicationSourceJsonnet @go(Jsonnet) @protobuf(2,bytes,opt)

	// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
	exclude?: string @go(Exclude) @protobuf(3,bytes,opt)

	// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
	include?: string @go(Include) @protobuf(4,bytes,opt)
}

#OptionalMap: {
	// Map is the value of a map type parameter.
	// +optional
	map: {[string]: string} @go(Map,map[string]string) @protobuf(1,bytes,rep)
}

#OptionalArray: {
	// Array is the value of an array type parameter.
	// +optional
	array: [...string] @go(Array,[]string) @protobuf(1,bytes,rep)
}

#ApplicationSourcePluginParameter: _

#ApplicationSourcePluginParameters: [...#ApplicationSourcePluginParameter]

// ApplicationSourcePlugin holds options specific to config management plugins
#ApplicationSourcePlugin: {
	name?:       string                             @go(Name) @protobuf(1,bytes,opt)
	env?:        #Env                               @go(Env) @protobuf(2,bytes,opt)
	parameters?: #ApplicationSourcePluginParameters @go(Parameters) @protobuf(3,bytes,opt)
}

// ApplicationDestination holds information about the application's destination
#ApplicationDestination: _

#ResourceHealthLocation: string

// ApplicationStatus contains status information for the application
#ApplicationStatus: {
	// Resources is a list of Kubernetes resources managed by this application
	resources?: [...#ResourceStatus] @go(Resources,[]ResourceStatus) @protobuf(1,bytes,opt)

	// Sync contains information about the application's current sync status
	sync?: #SyncStatus @go(Sync) @protobuf(2,bytes,opt)

	// Health contains information about the application's current health status
	health?: #HealthStatus @go(Health) @protobuf(3,bytes,opt)

	// History contains information about the application's sync history
	history?: #RevisionHistories @go(History) @protobuf(4,bytes,opt)

	// Conditions is a list of currently observed application conditions
	conditions?: [...#ApplicationCondition] @go(Conditions,[]ApplicationCondition) @protobuf(5,bytes,opt)

	// ReconciledAt indicates when the application state was reconciled using the latest git version
	reconciledAt?: null | metav1.#Time @go(ReconciledAt,*metav1.Time) @protobuf(6,bytes,opt)

	// OperationState contains information about any ongoing operations, such as a sync
	operationState?: null | #OperationState @go(OperationState,*OperationState) @protobuf(7,bytes,opt)

	// ObservedAt indicates when the application state was updated without querying latest git state
	// Deprecated: controller no longer updates ObservedAt field
	observedAt?: null | metav1.#Time @go(ObservedAt,*metav1.Time) @protobuf(8,bytes,opt)

	// SourceType specifies the type of this application
	sourceType?: #ApplicationSourceType @go(SourceType) @protobuf(9,bytes,opt)

	// Summary contains a list of URLs and container images used by this application
	summary?: #ApplicationSummary @go(Summary) @protobuf(10,bytes,opt)

	// ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree
	resourceHealthSource?: #ResourceHealthLocation @go(ResourceHealthSource) @protobuf(11,bytes,opt)

	// SourceTypes specifies the type of the sources included in the application
	sourceTypes?: [...#ApplicationSourceType] @go(SourceTypes,[]ApplicationSourceType) @protobuf(12,bytes,opt)

	// ControllerNamespace indicates the namespace in which the application controller is located
	controllerNamespace?: string @go(ControllerNamespace) @protobuf(13,bytes,opt)
}

// JWTTokens represents a list of JWT tokens
#JWTTokens: {
	items?: [...#JWTToken] @go(Items,[]JWTToken) @protobuf(1,bytes,opt)
}

// OperationInitiator contains information about the initiator of an operation
#OperationInitiator: {
	// Username contains the name of a user who started operation
	username?: string @go(Username) @protobuf(1,bytes,opt)

	// Automated is set to true if operation was initiated automatically by the application controller.
	automated?: bool @go(Automated) @protobuf(2,bytes,opt)
}

// Operation contains information about a requested or running operation
#Operation: {
	// Sync contains parameters for the operation
	sync?: null | #SyncOperation @go(Sync,*SyncOperation) @protobuf(1,bytes,opt)

	// InitiatedBy contains information about who initiated the operations
	initiatedBy?: #OperationInitiator @go(InitiatedBy) @protobuf(2,bytes,opt)

	// Info is a list of informational items for this operation
	info?: [...null | #Info] @go(Info,[]*Info) @protobuf(3,bytes)

	// Retry controls the strategy to apply if a sync fails
	retry?: #RetryStrategy @go(Retry) @protobuf(4,bytes,opt)
}

// SyncOperationResource contains resources to sync.
#SyncOperationResource: {
	group?:     string @go(Group) @protobuf(1,bytes,opt)
	kind:       string @go(Kind) @protobuf(2,bytes,opt)
	name:       string @go(Name) @protobuf(3,bytes,opt)
	namespace?: string @go(Namespace) @protobuf(4,bytes,opt)
}

// RevisionHistories is a array of history, oldest first and newest last
#RevisionHistories: [...#RevisionHistory]

// SyncOperation contains details about a sync operation.
#SyncOperation: {
	// Revision is the revision (Git) or chart version (Helm) which to sync the application to
	// If omitted, will use the revision specified in app spec.
	revision?: string @go(Revision) @protobuf(1,bytes,opt)

	// Prune specifies to delete resources from the cluster that are no longer tracked in git
	prune?: bool @go(Prune) @protobuf(2,bytes,opt)

	// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
	dryRun?: bool @go(DryRun) @protobuf(3,bytes,opt)

	// SyncStrategy describes how to perform the sync
	syncStrategy?: null | #SyncStrategy @go(SyncStrategy,*SyncStrategy) @protobuf(4,bytes,opt)

	// Resources describes which resources shall be part of the sync
	resources?: [...#SyncOperationResource] @go(Resources,[]SyncOperationResource) @protobuf(6,bytes,opt)

	// Source overrides the source definition set in the application.
	// This is typically set in a Rollback operation and is nil during a Sync operation
	source?: null | #ApplicationSource @go(Source,*ApplicationSource) @protobuf(7,bytes,opt)

	// Manifests is an optional field that overrides sync source with a local directory for development
	manifests?: [...string] @go(Manifests,[]string) @protobuf(8,bytes,opt)

	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	syncOptions?: #SyncOptions @go(SyncOptions) @protobuf(9,bytes,opt)

	// Sources overrides the source definition set in the application.
	// This is typically set in a Rollback operation and is nil during a Sync operation
	sources?: #ApplicationSources @go(Sources) @protobuf(10,bytes,opt)

	// Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to
	// If omitted, will use the revision specified in app spec.
	revisions?: [...string] @go(Revisions,[]string) @protobuf(11,bytes,opt)
}

// OperationState contains information about state of a running operation
#OperationState: {
	// Operation is the original requested operation
	operation: #Operation @go(Operation) @protobuf(1,bytes,opt)

	// Message holds any pertinent messages when attempting to perform operation (typically errors).
	message?: string @go(Message) @protobuf(3,bytes,opt)

	// SyncResult is the result of a Sync operation
	syncResult?: null | #SyncOperationResult @go(SyncResult,*SyncOperationResult) @protobuf(4,bytes,opt)

	// StartedAt contains time of operation start
	startedAt: metav1.#Time @go(StartedAt) @protobuf(6,bytes,opt)

	// FinishedAt contains time of operation completion
	finishedAt?: null | metav1.#Time @go(FinishedAt,*metav1.Time) @protobuf(7,bytes,opt)

	// RetryCount contains time of operation retries
	retryCount?: int64 @go(RetryCount) @protobuf(8,bytes,opt)
}

#Info: {
	name:  string @go(Name) @protobuf(1,bytes)
	value: string @go(Value) @protobuf(2,bytes)
}

#SyncOptions: [...string]

#ManagedNamespaceMetadata: {
	labels?: {[string]: string} @go(Labels,map[string]string) @protobuf(1,bytes,opt)
	annotations?: {[string]: string} @go(Annotations,map[string]string) @protobuf(2,bytes,opt)
}

// SyncPolicy controls when a sync will be performed in response to updates in git
#SyncPolicy: {
	// Automated will keep an application synced to the target revision
	automated?: null | #SyncPolicyAutomated @go(Automated,*SyncPolicyAutomated) @protobuf(1,bytes,opt)

	// Options allow you to specify whole app sync-options
	syncOptions?: #SyncOptions @go(SyncOptions) @protobuf(2,bytes,opt)

	// Retry controls failed sync retry behavior
	retry?: null | #RetryStrategy @go(Retry,*RetryStrategy) @protobuf(3,bytes,opt)

	// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
	managedNamespaceMetadata?: null | #ManagedNamespaceMetadata @go(ManagedNamespaceMetadata,*ManagedNamespaceMetadata) @protobuf(4,bytes,opt)
}

// RetryStrategy contains information about the strategy to apply when a sync failed
#RetryStrategy: {
	// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
	limit?: int64 @go(Limit) @protobuf(1,bytes,opt)

	// Backoff controls how to backoff on subsequent retries of failed syncs
	backoff?: null | #Backoff @go(Backoff,*Backoff) @protobuf(2,bytes,opt,casttype=Backoff)
}

// Backoff is the backoff strategy to use on subsequent retries for failing syncs
#Backoff: {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	duration?: string @go(Duration) @protobuf(1,bytes,opt)

	// Factor is a factor to multiply the base duration after each failed retry
	factor?: null | int64 @go(Factor,*int64) @protobuf(2,bytes)

	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	maxDuration?: string @go(MaxDuration) @protobuf(3,bytes,opt)
}

// SyncPolicyAutomated controls the behavior of an automated sync
#SyncPolicyAutomated: {
	// Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
	prune?: bool @go(Prune) @protobuf(1,bytes,opt)

	// SelfHeal specifies whether to revert resources back to their desired state upon modification in the cluster (default: false)
	selfHeal?: bool @go(SelfHeal) @protobuf(2,bytes,opt)

	// AllowEmpty allows apps have zero live resources (default: false)
	allowEmpty?: bool @go(AllowEmpty) @protobuf(3,bytes,opt)
}

// SyncStrategy controls the manner in which a sync is performed
#SyncStrategy: {
	// Apply will perform a `kubectl apply` to perform the sync.
	apply?: null | #SyncStrategyApply @go(Apply,*SyncStrategyApply) @protobuf(1,bytes,opt)

	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	hook?: null | #SyncStrategyHook @go(Hook,*SyncStrategyHook) @protobuf(2,bytes,opt)
}

// SyncStrategyApply uses `kubectl apply` to perform the apply
#SyncStrategyApply: {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`.
	// The --force flag deletes and re-create the resource, when PATCH encounters conflict and has
	// retried for 5 times.
	force?: bool @go(Force) @protobuf(1,bytes,opt)
}

// SyncStrategyHook will perform a sync using hooks annotations.
// If no hook annotation is specified falls back to `kubectl apply`.
#SyncStrategyHook: {
	#SyncStrategyApply
}

// RevisionMetadata contains metadata for a specific revision in a Git repository
#RevisionMetadata: {
	// who authored this revision,
	// typically their name and email, e.g. "John Doe <john_doe@my-company.com>",
	// but might not match this example
	author?: string @go(Author) @protobuf(1,bytes,opt)

	// Date specifies when the revision was authored
	date: metav1.#Time @go(Date) @protobuf(2,bytes,opt)

	// Tags specifies any tags currently attached to the revision
	// Floating tags can move from one revision to another
	tags?: [...string] @go(Tags,[]string) @protobuf(3,bytes,opt)

	// Message contains the message associated with the revision, most likely the commit message.
	message?: string @go(Message) @protobuf(4,bytes,opt)

	// SignatureInfo contains a hint on the signer if the revision was signed with GPG, and signature verification is enabled.
	signatureInfo?: string @go(SignatureInfo) @protobuf(5,bytes,opt)
}

// ChartDetails contains helm chart metadata for a specific version
#ChartDetails: {
	description?: string @go(Description) @protobuf(1,bytes,opt)

	// The URL of this projects home page, e.g. "http://example.com"
	home?: string @go(Home) @protobuf(2,bytes,opt)

	// List of maintainer details, name and email, e.g. ["John Doe <john_doe@my-company.com>"]
	maintainers?: [...string] @go(Maintainers,[]string) @protobuf(3,bytes,opt)
}

// SyncOperationResult represent result of sync operation
#SyncOperationResult: {
	// Resources contains a list of sync result items for each individual resource in a sync operation
	resources?: #ResourceResults @go(Resources) @protobuf(1,bytes,opt)

	// Revision holds the revision this sync operation was performed to
	revision: string @go(Revision) @protobuf(2,bytes,opt)

	// Source records the application source information of the sync, used for comparing auto-sync
	source?: #ApplicationSource @go(Source) @protobuf(3,bytes,opt)

	// Source records the application source information of the sync, used for comparing auto-sync
	sources?: #ApplicationSources @go(Sources) @protobuf(4,bytes,opt)

	// Revisions holds the revision this sync operation was performed for respective indexed source in sources field
	revisions?: [...string] @go(Revisions,[]string) @protobuf(5,bytes,opt)

	// ManagedNamespaceMetadata contains the current sync state of managed namespace metadata
	managedNamespaceMetadata?: null | #ManagedNamespaceMetadata @go(ManagedNamespaceMetadata,*ManagedNamespaceMetadata) @protobuf(6,bytes,opt)
}

// ResourceResult holds the operation result details of a specific resource
#ResourceResult: {
	// Group specifies the API group of the resource
	group: string @go(Group) @protobuf(1,bytes,opt)

	// Version specifies the API version of the resource
	version: string @go(Version) @protobuf(2,bytes,opt)

	// Kind specifies the API kind of the resource
	kind: string @go(Kind) @protobuf(3,bytes,opt)

	// Namespace specifies the target namespace of the resource
	namespace: string @go(Namespace) @protobuf(4,bytes,opt)

	// Name specifies the name of the resource
	name: string @go(Name) @protobuf(5,bytes,opt)

	// Message contains an informational or error message for the last sync OR operation
	message?: string @go(Message) @protobuf(7,bytes,opt)
}

// ResourceResults defines a list of resource results for a given operation
#ResourceResults: [...null | #ResourceResult]

// RevisionHistory contains history information about a previous sync
#RevisionHistory: {
	// Revision holds the revision the sync was performed against
	revision?: string @go(Revision) @protobuf(2,bytes,opt)

	// DeployedAt holds the time the sync operation completed
	deployedAt: metav1.#Time @go(DeployedAt) @protobuf(4,bytes,opt)

	// ID is an auto incrementing identifier of the RevisionHistory
	id: int64 @go(ID) @protobuf(5,bytes,opt)

	// Source is a reference to the application source used for the sync operation
	source?: #ApplicationSource @go(Source) @protobuf(6,bytes,opt)

	// DeployStartedAt holds the time the sync operation started
	deployStartedAt?: null | metav1.#Time @go(DeployStartedAt,*metav1.Time) @protobuf(7,bytes,opt)

	// Sources is a reference to the application sources used for the sync operation
	sources?: #ApplicationSources @go(Sources) @protobuf(8,bytes,opt)

	// Revisions holds the revision of each source in sources field the sync was performed against
	revisions?: [...string] @go(Revisions,[]string) @protobuf(9,bytes,opt)
}

// ApplicationWatchEvent contains information about application change.
#ApplicationWatchEvent: {
	type: watch.#EventType @go(Type) @protobuf(1,bytes,opt,casttype=k8s.io/apimachinery/pkg/watch.EventType)

	// Application is:
	//  * If Type is Added or Modified: the new state of the object.
	//  * If Type is Deleted: the state of the object immediately before deletion.
	//  * If Type is Error: *api.Status is recommended; other types may make sense
	//    depending on context.
	application: #Application @go(Application) @protobuf(2,bytes,opt)
}

// ApplicationList is list of Application resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#ApplicationList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta) @protobuf(1,bytes,opt)
	items: [...#Application] @go(Items,[]Application) @protobuf(2,bytes,rep)
}

// ComponentParameter contains information about component parameter value
#ComponentParameter: {
	component?: string @go(Component) @protobuf(1,bytes,opt)
	name:       string @go(Name) @protobuf(2,bytes,opt)
	value:      string @go(Value) @protobuf(3,bytes,opt)
}

// SyncStatusCode is a type which represents possible comparison results
#SyncStatusCode: string // #enumSyncStatusCode

#enumSyncStatusCode:
	#SyncStatusCodeUnknown |
	#SyncStatusCodeSynced |
	#SyncStatusCodeOutOfSync

// SyncStatusCodeUnknown indicates that the status of a sync could not be reliably determined
#SyncStatusCodeUnknown: #SyncStatusCode & "Unknown"

// SyncStatusCodeOutOfSync indicates that desired and live states match
#SyncStatusCodeSynced: #SyncStatusCode & "Synced"

// SyncStatusCodeOutOfSync indicates that there is a drift between desired and live states
#SyncStatusCodeOutOfSync: #SyncStatusCode & "OutOfSync"

// ApplicationConditionType represents type of application condition. Type name has following convention:
// prefix "Error" means error condition
// prefix "Warning" means warning condition
// prefix "Info" means informational condition
#ApplicationConditionType: string // #enumApplicationConditionType

#enumApplicationConditionType:
	#AnnotationKeyRefresh |
	#ResourcesFinalizerName |
	#ForegroundPropagationPolicyFinalizer

// ApplicationConditionDeletionError indicates that controller failed to delete application
#ApplicationConditionDeletionError: "DeletionError"

// ApplicationConditionInvalidSpecError indicates that application source is invalid
#ApplicationConditionInvalidSpecError: "InvalidSpecError"

// ApplicationConditionComparisonError indicates controller failed to compare application state
#ApplicationConditionComparisonError: "ComparisonError"

// ApplicationConditionSyncError indicates controller failed to automatically sync the application
#ApplicationConditionSyncError: "SyncError"

// ApplicationConditionUnknownError indicates an unknown controller error
#ApplicationConditionUnknownError: "UnknownError"

// ApplicationConditionSharedResourceWarning indicates that controller detected resources which belongs to more than one application
#ApplicationConditionSharedResourceWarning: "SharedResourceWarning"

// ApplicationConditionRepeatedResourceWarning indicates that application source has resource with same Group, Kind, Name, Namespace multiple times
#ApplicationConditionRepeatedResourceWarning: "RepeatedResourceWarning"

// ApplicationConditionExcludedResourceWarning indicates that application has resource which is configured to be excluded
#ApplicationConditionExcludedResourceWarning: "ExcludedResourceWarning"

// ApplicationConditionOrphanedResourceWarning indicates that application has orphaned resources
#ApplicationConditionOrphanedResourceWarning: "OrphanedResourceWarning"

// ApplicationCondition contains details about an application condition, which is usually an error or warning
#ApplicationCondition: {
	// Type is an application condition type
	type: string @go(Type) @protobuf(1,bytes,opt)

	// Message contains human-readable message indicating details about condition
	message: string @go(Message) @protobuf(2,bytes,opt)

	// LastTransitionTime is the time the condition was last observed
	lastTransitionTime?: null | metav1.#Time @go(LastTransitionTime,*metav1.Time) @protobuf(3,bytes,opt)
}

// ComparedTo contains application source and target which was used for resources comparison
#ComparedTo: {
	// Source is a reference to the application's source used for comparison
	source?: #ApplicationSource @go(Source) @protobuf(1,bytes,opt)

	// Destination is a reference to the application's destination used for comparison
	destination: #ApplicationDestination @go(Destination) @protobuf(2,bytes,opt)

	// Sources is a reference to the application's multiple sources used for comparison
	sources?: #ApplicationSources @go(Sources) @protobuf(3,bytes,opt)

	// IgnoreDifferences is a reference to the application's ignored differences used for comparison
	ignoreDifferences?: #IgnoreDifferences @go(IgnoreDifferences) @protobuf(4,bytes,opt)
}

// SyncStatus contains information about the currently observed live and desired states of an application
#SyncStatus: {
	// Status is the sync state of the comparison
	status: #SyncStatusCode @go(Status) @protobuf(1,bytes,opt,casttype=SyncStatusCode)

	// ComparedTo contains information about what has been compared
	comparedTo?: #ComparedTo @go(ComparedTo) @protobuf(2,bytes,opt)

	// Revision contains information about the revision the comparison has been performed to
	revision?: string @go(Revision) @protobuf(3,bytes,opt)

	// Revisions contains information about the revisions of multiple sources the comparison has been performed to
	revisions?: [...string] @go(Revisions,[]string) @protobuf(4,bytes,opt)
}

// HealthStatus contains information about the currently observed health state of an application or resource
#HealthStatus: {
	// Message is a human-readable informational message describing the health status
	message?: string @go(Message) @protobuf(2,bytes,opt)
}

// InfoItem contains arbitrary, human readable information about an application
#InfoItem: {
	// Name is a human readable title for this piece of information.
	name?: string @go(Name) @protobuf(1,bytes,opt)

	// Value is human readable content.
	value?: string @go(Value) @protobuf(2,bytes,opt)
}

// ResourceNetworkingInfo holds networking resource related information
// TODO: describe members of this type
#ResourceNetworkingInfo: {
	targetLabels?: {[string]: string} @go(TargetLabels,map[string]string) @protobuf(1,bytes,opt)
	targetRefs?: [...#ResourceRef] @go(TargetRefs,[]ResourceRef) @protobuf(2,bytes,opt)
	labels?: {[string]: string} @go(Labels,map[string]string) @protobuf(3,bytes,opt)
	ingress?: [...v1.#LoadBalancerIngress] @go(Ingress,[]v1.LoadBalancerIngress) @protobuf(4,bytes,opt)

	// ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.
	externalURLs?: [...string] @go(ExternalURLs,[]string) @protobuf(5,bytes,opt)
}

// TODO: describe this type
#HostResourceInfo: {
	resourceName?:         v1.#ResourceName @go(ResourceName) @protobuf(1,bytes)
	requestedByApp?:       int64            @go(RequestedByApp) @protobuf(2,bytes)
	requestedByNeighbors?: int64            @go(RequestedByNeighbors) @protobuf(3,bytes)
	capacity?:             int64            @go(Capacity) @protobuf(4,bytes)
}

// HostInfo holds host name and resources metrics
// TODO: describe purpose of this type
// TODO: describe members of this type
#HostInfo: {
	name?: string @go(Name) @protobuf(1,bytes)
	resourcesInfo?: [...#HostResourceInfo] @go(ResourcesInfo,[]HostResourceInfo) @protobuf(2,bytes)
	systemInfo?: v1.#NodeSystemInfo @go(SystemInfo) @protobuf(3,bytes,opt)
}

// ApplicationTree holds nodes which belongs to the application
// TODO: describe purpose of this type
#ApplicationTree: {
	// Nodes contains list of nodes which either directly managed by the application and children of directly managed nodes.
	nodes?: [...#ResourceNode] @go(Nodes,[]ResourceNode) @protobuf(1,bytes,rep)

	// OrphanedNodes contains if or orphaned nodes: nodes which are not managed by the app but in the same namespace. List is populated only if orphaned resources enabled in app project.
	orphanedNodes?: [...#ResourceNode] @go(OrphanedNodes,[]ResourceNode) @protobuf(2,bytes,rep)

	// Hosts holds list of Kubernetes nodes that run application related pods
	hosts?: [...#HostInfo] @go(Hosts,[]HostInfo) @protobuf(3,bytes,rep)
}

// ApplicationSummary contains information about URLs and container images used by an application
#ApplicationSummary: {
	// ExternalURLs holds all external URLs of application child resources.
	externalURLs?: [...string] @go(ExternalURLs,[]string) @protobuf(1,bytes,opt)

	// Images holds all images of application child resources.
	images?: [...string] @go(Images,[]string) @protobuf(2,bytes,opt)
}

// ResourceRef includes fields which uniquely identify a resource
#ResourceRef: {
	group?:     string @go(Group) @protobuf(1,bytes,opt)
	version?:   string @go(Version) @protobuf(2,bytes,opt)
	kind?:      string @go(Kind) @protobuf(3,bytes,opt)
	namespace?: string @go(Namespace) @protobuf(4,bytes,opt)
	name?:      string @go(Name) @protobuf(5,bytes,opt)
	uid?:       string @go(UID) @protobuf(6,bytes,opt)
}

// ResourceNode contains information about live resource and its children
// TODO: describe members of this type
#ResourceNode: {
	#ResourceRef
	parentRefs?: [...#ResourceRef] @go(ParentRefs,[]ResourceRef) @protobuf(2,bytes,opt)
	info?: [...#InfoItem] @go(Info,[]InfoItem) @protobuf(3,bytes,opt)
	networkingInfo?:  null | #ResourceNetworkingInfo @go(NetworkingInfo,*ResourceNetworkingInfo) @protobuf(4,bytes,opt)
	resourceVersion?: string                         @go(ResourceVersion) @protobuf(5,bytes,opt)
	images?: [...string] @go(Images,[]string) @protobuf(6,bytes,opt)
	health?:    null | #HealthStatus @go(Health,*HealthStatus) @protobuf(7,bytes,opt)
	createdAt?: null | metav1.#Time  @go(CreatedAt,*metav1.Time) @protobuf(8,bytes,opt)
}

// ResourceStatus holds the current sync and health status of a resource
// TODO: describe members of this type
#ResourceStatus: {
	group?:           string               @go(Group) @protobuf(1,bytes,opt)
	version?:         string               @go(Version) @protobuf(2,bytes,opt)
	kind?:            string               @go(Kind) @protobuf(3,bytes,opt)
	namespace?:       string               @go(Namespace) @protobuf(4,bytes,opt)
	name?:            string               @go(Name) @protobuf(5,bytes,opt)
	status?:          #SyncStatusCode      @go(Status) @protobuf(6,bytes,opt)
	health?:          null | #HealthStatus @go(Health,*HealthStatus) @protobuf(7,bytes,opt)
	hook?:            bool                 @go(Hook) @protobuf(8,bytes,opt)
	requiresPruning?: bool                 @go(RequiresPruning) @protobuf(9,bytes,opt)
	syncWave?:        int64                @go(SyncWave) @protobuf(10,bytes,opt)
}

// ResourceDiff holds the diff of a live and target resource object
// TODO: describe members of this type
#ResourceDiff: {
	group?:     string @go(Group) @protobuf(1,bytes,opt)
	kind?:      string @go(Kind) @protobuf(2,bytes,opt)
	namespace?: string @go(Namespace) @protobuf(3,bytes,opt)
	name?:      string @go(Name) @protobuf(4,bytes,opt)

	// TargetState contains the JSON serialized resource manifest defined in the Git/Helm
	targetState?: string @go(TargetState) @protobuf(5,bytes,opt)

	// TargetState contains the JSON live resource manifest
	liveState?: string @go(LiveState) @protobuf(6,bytes,opt)

	// Diff contains the JSON patch between target and live resource
	// Deprecated: use NormalizedLiveState and PredictedLiveState to render the difference
	diff?: string @go(Diff) @protobuf(7,bytes,opt)
	hook?: bool   @go(Hook) @protobuf(8,bytes,opt)

	// NormalizedLiveState contains JSON serialized live resource state with applied normalizations
	normalizedLiveState?: string @go(NormalizedLiveState) @protobuf(9,bytes,opt)

	// PredictedLiveState contains JSON serialized resource state that is calculated based on normalized and target resource state
	predictedLiveState?: string @go(PredictedLiveState) @protobuf(10,bytes,opt)
	resourceVersion?:    string @go(ResourceVersion) @protobuf(11,bytes,opt)
	modified?:           bool   @go(Modified) @protobuf(12,bytes,opt)
}

// ConnectionStatus represents the status indicator for a connection to a remote resource
#ConnectionStatus: string // #enumConnectionStatus

#enumConnectionStatus:
	#AnnotationKeyRefresh |
	#ResourcesFinalizerName |
	#ForegroundPropagationPolicyFinalizer

// ConnectionStatusSuccessful indicates that a connection has been successfully established
#ConnectionStatusSuccessful: "Successful"

// ConnectionStatusFailed indicates that a connection attempt has failed
#ConnectionStatusFailed: "Failed"

// ConnectionStatusUnknown indicates that the connection status could not be reliably determined
#ConnectionStatusUnknown: "Unknown"

// ConnectionState contains information about remote resource connection state, currently used for clusters and repositories
#ConnectionState: {
	// Status contains the current status indicator for the connection
	status: string @go(Status) @protobuf(1,bytes,opt)

	// Message contains human readable information about the connection status
	message: string @go(Message) @protobuf(2,bytes,opt)

	// ModifiedAt contains the timestamp when this connection status has been determined
	attemptedAt?: null | metav1.#Time @go(ModifiedAt,*metav1.Time) @protobuf(3,bytes,opt)
}

// Cluster is the definition of a cluster resource
#Cluster: {
	// Server is the API server URL of the Kubernetes cluster
	server: string @go(Server) @protobuf(1,bytes,opt)

	// Name of the cluster. If omitted, will use the server address
	name: string @go(Name) @protobuf(2,bytes,opt)

	// Config holds cluster information for connecting to a cluster
	config: #ClusterConfig @go(Config) @protobuf(3,bytes,opt)

	// DEPRECATED: use Info.ConnectionState field instead.
	// ConnectionState contains information about cluster connection state
	connectionState?: #ConnectionState @go(ConnectionState) @protobuf(4,bytes,opt)

	// DEPRECATED: use Info.ServerVersion field instead.
	// The server version
	serverVersion?: string @go(ServerVersion) @protobuf(5,bytes,opt)

	// Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
	namespaces?: [...string] @go(Namespaces,[]string) @protobuf(6,bytes,opt)

	// RefreshRequestedAt holds time when cluster cache refresh has been requested
	refreshRequestedAt?: null | metav1.#Time @go(RefreshRequestedAt,*metav1.Time) @protobuf(7,bytes,opt)

	// Info holds information about cluster cache and state
	info?: #ClusterInfo @go(Info) @protobuf(8,bytes,opt)

	// Shard contains optional shard number. Calculated on the fly by the application controller if not specified.
	shard?: null | int64 @go(Shard,*int64) @protobuf(9,bytes,opt)

	// Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
	clusterResources?: bool @go(ClusterResources) @protobuf(10,bytes,opt)

	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity
	project?: string @go(Project) @protobuf(11,bytes,opt)

	// Labels for cluster secret metadata
	labels?: {[string]: string} @go(Labels,map[string]string) @protobuf(12,bytes,opt)

	// Annotations for cluster secret metadata
	annotations?: {[string]: string} @go(Annotations,map[string]string) @protobuf(13,bytes,opt)
}

// ClusterInfo contains information about the cluster
#ClusterInfo: {
	// ConnectionState contains information about the connection to the cluster
	connectionState?: #ConnectionState @go(ConnectionState) @protobuf(1,bytes,opt)

	// ServerVersion contains information about the Kubernetes version of the cluster
	serverVersion?: string @go(ServerVersion) @protobuf(2,bytes,opt)

	// CacheInfo contains information about the cluster cache
	cacheInfo?: #ClusterCacheInfo @go(CacheInfo) @protobuf(3,bytes,opt)

	// ApplicationsCount is the number of applications managed by Argo CD on the cluster
	applicationsCount: int64 @go(ApplicationsCount) @protobuf(4,bytes,opt)

	// APIVersions contains list of API versions supported by the cluster
	apiVersions?: [...string] @go(APIVersions,[]string) @protobuf(5,bytes,opt)
}

// ClusterCacheInfo contains information about the cluster cache
#ClusterCacheInfo: {
	// ResourcesCount holds number of observed Kubernetes resources
	resourcesCount?: int64 @go(ResourcesCount) @protobuf(1,bytes,opt)

	// APIsCount holds number of observed Kubernetes API count
	apisCount?: int64 @go(APIsCount) @protobuf(2,bytes,opt)

	// LastCacheSyncTime holds time of most recent cache synchronization
	lastCacheSyncTime?: null | metav1.#Time @go(LastCacheSyncTime,*metav1.Time) @protobuf(3,bytes,opt)
}

// ClusterList is a collection of Clusters.
#ClusterList: {
	metadata?: metav1.#ListMeta @go(ListMeta) @protobuf(1,bytes,opt)
	items: [...#Cluster] @go(Items,[]Cluster) @protobuf(2,bytes,rep)
}

// AWSAuthConfig is an AWS IAM authentication configuration
#AWSAuthConfig: {
	// ClusterName contains AWS cluster name
	clusterName?: string @go(ClusterName) @protobuf(1,bytes,opt)

	// RoleARN contains optional role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
	roleARN?: string @go(RoleARN) @protobuf(2,bytes,opt)
}

// ExecProviderConfig is config used to call an external command to perform cluster authentication
// See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig
#ExecProviderConfig: {
	// Command to execute
	command?: string @go(Command) @protobuf(1,bytes,opt)

	// Arguments to pass to the command when executing it
	args?: [...string] @go(Args,[]string) @protobuf(2,bytes,rep)

	// Env defines additional environment variables to expose to the process
	env?: {[string]: string} @go(Env,map[string]string) @protobuf(3,bytes,opt)

	// Preferred input version of the ExecInfo
	apiVersion?: string @go(APIVersion) @protobuf(4,bytes,opt)

	// This text is shown to the user when the executable doesn't seem to be present
	installHint?: string @go(InstallHint) @protobuf(5,bytes,opt)
}

// ClusterConfig is the configuration attributes. This structure is subset of the go-client
// rest.Config with annotations added for marshalling.
#ClusterConfig: {
	// Server requires Basic authentication
	username?: string @go(Username) @protobuf(1,bytes,opt)
	password?: string @go(Password) @protobuf(2,bytes,opt)

	// Server requires Bearer authentication. This client will not attempt to use
	// refresh tokens for an OAuth2 flow.
	// TODO: demonstrate an OAuth2 compatible client.
	bearerToken?: string @go(BearerToken) @protobuf(3,bytes,opt)

	// TLSClientConfig contains settings to enable transport layer security
	tlsClientConfig: #TLSClientConfig @go(TLSClientConfig) @protobuf(4,bytes,opt)

	// AWSAuthConfig contains IAM authentication configuration
	awsAuthConfig?: null | #AWSAuthConfig @go(AWSAuthConfig,*AWSAuthConfig) @protobuf(5,bytes,opt)

	// ExecProviderConfig contains configuration for an exec provider
	execProviderConfig?: null | #ExecProviderConfig @go(ExecProviderConfig,*ExecProviderConfig) @protobuf(6,bytes,opt)
}

// TLSClientConfig contains settings to enable transport layer security
#TLSClientConfig: {
	// Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only.
	insecure: bool @go(Insecure) @protobuf(1,bytes,opt)

	// ServerName is passed to the server for SNI and is used in the client to check server
	// certificates against. If ServerName is empty, the hostname used to contact the
	// server is used.
	serverName?: string @go(ServerName) @protobuf(2,bytes,opt)

	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	// CertData takes precedence over CertFile
	certData?: bytes @go(CertData,[]byte) @protobuf(3,bytes,opt)

	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	// KeyData takes precedence over KeyFile
	keyData?: bytes @go(KeyData,[]byte) @protobuf(4,bytes,opt)

	// CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
	// CAData takes precedence over CAFile
	caData?: bytes @go(CAData,[]byte) @protobuf(5,bytes,opt)
}

// KnownTypeField contains mapping between CRD field and known Kubernetes type.
// This is mainly used for unit conversion in unknown resources (e.g. 0.1 == 100mi)
// TODO: Describe the members of this type
#KnownTypeField: {
	field?: string @go(Field) @protobuf(1,bytes,opt)
	type?:  string @go(Type) @protobuf(2,bytes,opt)
}

// OverrideIgnoreDiff contains configurations about how fields should be ignored during diffs between
// the desired state and live state
#OverrideIgnoreDiff: {
	// JSONPointers is a JSON path list following the format defined in RFC4627 (https://datatracker.ietf.org/doc/html/rfc6902#section-3)
	jsonPointers: [...string] @go(JSONPointers,[]string) @protobuf(1,bytes,rep,name=jSONPointers)

	// JQPathExpressions is a JQ path list that will be evaludated during the diff process
	jqPathExpressions: [...string] @go(JQPathExpressions,[]string) @protobuf(2,bytes,opt)

	// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the
	// desired state defined in the SCM and won't be displayed in diffs
	managedFieldsManagers: [...string] @go(ManagedFieldsManagers,[]string) @protobuf(3,bytes,opt)
}

_#rawResourceOverride: {
	"health.lua"?:             string @go(HealthLua)
	"health.lua.useOpenLibs"?: bool   @go(UseOpenLibs)
	actions?:                  string @go(Actions)
	ignoreDifferences?:        string @go(IgnoreDifferences)
	ignoreResourceUpdates?:    string @go(IgnoreResourceUpdates)
	knownTypeFields?: [...#KnownTypeField] @go(KnownTypeFields,[]KnownTypeField)
}

// ResourceOverride holds configuration to customize resource diffing and health assessment
// TODO: describe the members of this type
#ResourceOverride: _

// TODO: describe this type
// TODO: describe members of this type
#ResourceActions: {
	"discovery.lua"?: string @go(ActionDiscoveryLua) @protobuf(1,bytes,opt,name=actionDiscoveryLua)
	definitions?: [...#ResourceActionDefinition] @go(Definitions,[]ResourceActionDefinition) @protobuf(2,bytes,rep)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceActionDefinition: {
	name:         string @go(Name) @protobuf(1,bytes,opt)
	"action.lua": string @go(ActionLua) @protobuf(2,bytes,opt,name=actionLua)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceAction: {
	name?: string @go(Name) @protobuf(1,bytes,opt)
	params?: [...#ResourceActionParam] @go(Params,[]ResourceActionParam) @protobuf(2,bytes,rep)
	disabled?:    bool   @go(Disabled) @protobuf(3,varint,opt)
	iconClass?:   string @go(IconClass) @protobuf(4,bytes,opt)
	displayName?: string @go(DisplayName) @protobuf(5,bytes,opt)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceActionParam: {
	name?:    string @go(Name) @protobuf(1,bytes,opt)
	value?:   string @go(Value) @protobuf(2,bytes,opt)
	type?:    string @go(Type) @protobuf(3,bytes,opt)
	default?: string @go(Default) @protobuf(4,bytes,opt)
}

// OrphanedResourcesMonitorSettings holds settings of orphaned resources monitoring
#OrphanedResourcesMonitorSettings: {
	// Warn indicates if warning condition should be created for apps which have orphaned resources
	warn?: null | bool @go(Warn,*bool) @protobuf(1,bytes)

	// Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
	ignore?: [...#OrphanedResourceKey] @go(Ignore,[]OrphanedResourceKey) @protobuf(2,bytes,opt)
}

// OrphanedResourceKey is a reference to a resource to be ignored from
#OrphanedResourceKey: {
	group?: string @go(Group) @protobuf(1,bytes,opt)
	kind?:  string @go(Kind) @protobuf(2,bytes,opt)
	name?:  string @go(Name) @protobuf(3,bytes,opt)
}

// SignatureKey is the specification of a key required to verify commit signatures with
#SignatureKey: {
	// The ID of the key in hexadecimal notation
	keyID: string @go(KeyID) @protobuf(1,bytes)
}

// AppProjectSpec is the specification of an AppProject
#AppProjectSpec: {
	// SourceRepos contains list of repository URLs which can be used for deployment
	sourceRepos?: [...string] @go(SourceRepos,[]string) @protobuf(1,bytes)

	// Destinations contains list of destinations available for deployment
	destinations?: [...#ApplicationDestination] @go(Destinations,[]ApplicationDestination) @protobuf(2,bytes,name=destination)

	// Description contains optional project description
	description?: string @go(Description) @protobuf(3,bytes,opt)

	// Roles are user defined RBAC roles associated with this project
	roles?: [...#ProjectRole] @go(Roles,[]ProjectRole) @protobuf(4,bytes,rep)

	// ClusterResourceWhitelist contains list of whitelisted cluster level resources
	clusterResourceWhitelist?: [...metav1.#GroupKind] @go(ClusterResourceWhitelist,[]metav1.GroupKind) @protobuf(5,bytes,opt)

	// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
	namespaceResourceBlacklist?: [...metav1.#GroupKind] @go(NamespaceResourceBlacklist,[]metav1.GroupKind) @protobuf(6,bytes,opt)

	// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
	orphanedResources?: null | #OrphanedResourcesMonitorSettings @go(OrphanedResources,*OrphanedResourcesMonitorSettings) @protobuf(7,bytes,opt)

	// SyncWindows controls when syncs can be run for apps in this project
	syncWindows?: #SyncWindows @go(SyncWindows) @protobuf(8,bytes,opt)

	// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
	namespaceResourceWhitelist?: [...metav1.#GroupKind] @go(NamespaceResourceWhitelist,[]metav1.GroupKind) @protobuf(9,bytes,opt)

	// SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
	signatureKeys?: [...#SignatureKey] @go(SignatureKeys,[]SignatureKey) @protobuf(10,bytes,opt)

	// ClusterResourceBlacklist contains list of blacklisted cluster level resources
	clusterResourceBlacklist?: [...metav1.#GroupKind] @go(ClusterResourceBlacklist,[]metav1.GroupKind) @protobuf(11,bytes,opt)

	// SourceNamespaces defines the namespaces application resources are allowed to be created in
	sourceNamespaces?: [...string] @go(SourceNamespaces,[]string) @protobuf(12,bytes,opt)

	// PermitOnlyProjectScopedClusters determines whether destinations can only reference clusters which are project-scoped
	permitOnlyProjectScopedClusters?: bool @go(PermitOnlyProjectScopedClusters) @protobuf(13,bytes,opt)
}

// SyncWindows is a collection of sync windows in this project
#SyncWindows: [...null | #SyncWindow]

// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
#SyncWindow: {
	// Kind defines if the window allows or blocks syncs
	kind?: string @go(Kind) @protobuf(1,bytes,opt)

	// Schedule is the time the window will begin, specified in cron format
	schedule?: string @go(Schedule) @protobuf(2,bytes,opt)

	// Duration is the amount of time the sync window will be open
	duration?: string @go(Duration) @protobuf(3,bytes,opt)

	// Applications contains a list of applications that the window will apply to
	applications?: [...string] @go(Applications,[]string) @protobuf(4,bytes,opt)

	// Namespaces contains a list of namespaces that the window will apply to
	namespaces?: [...string] @go(Namespaces,[]string) @protobuf(5,bytes,opt)

	// Clusters contains a list of clusters that the window will apply to
	clusters?: [...string] @go(Clusters,[]string) @protobuf(6,bytes,opt)

	// ManualSync enables manual syncs when they would otherwise be blocked
	manualSync?: bool @go(ManualSync) @protobuf(7,bytes,opt)

	// TimeZone of the sync that will be applied to the schedule
	timeZone?: string @go(TimeZone) @protobuf(8,bytes,opt)
}

// ProjectRole represents a role that has access to a project
#ProjectRole: {
	// Name is a name for this role
	name: string @go(Name) @protobuf(1,bytes,opt)

	// Description is a description of the role
	description?: string @go(Description) @protobuf(2,bytes,opt)

	// Policies Stores a list of casbin formatted strings that define access policies for the role in the project
	policies?: [...string] @go(Policies,[]string) @protobuf(3,bytes,rep)

	// JWTTokens are a list of generated JWT tokens bound to this role
	jwtTokens?: [...#JWTToken] @go(JWTTokens,[]JWTToken) @protobuf(4,bytes,rep)

	// Groups are a list of OIDC group claims bound to this role
	groups?: [...string] @go(Groups,[]string) @protobuf(5,bytes,rep)
}

// JWTToken holds the issuedAt and expiresAt values of a token
#JWTToken: {
	iat:  int64  @go(IssuedAt) @protobuf(1,int64,opt)
	exp?: int64  @go(ExpiresAt) @protobuf(2,int64,opt)
	id?:  string @go(ID) @protobuf(3,bytes,opt)
}

// Command holds binary path and arguments list
#Command: {
	command?: [...string] @go(Command,[]string) @protobuf(1,bytes)
	args?: [...string] @go(Args,[]string) @protobuf(2,bytes,rep)
}

// ConfigManagementPlugin contains config management plugin configuration
#ConfigManagementPlugin: {
	name:      string          @go(Name) @protobuf(1,bytes)
	init?:     null | #Command @go(Init,*Command) @protobuf(2,bytes)
	generate:  #Command        @go(Generate) @protobuf(3,bytes)
	lockRepo?: bool            @go(LockRepo) @protobuf(4,bytes)
}

// HelmOptions holds helm options
#HelmOptions: {
	ValuesFileSchemes: [...string] @go(,[]string) @protobuf(1,bytes,opt,name=valuesFileSchemes)
}

// KustomizeOptions are options for kustomize to use when building manifests
#KustomizeOptions: {
	// BuildOptions is a string of build parameters to use when calling `kustomize build`
	BuildOptions: string @protobuf(1,bytes,opt,name=buildOptions)

	// BinaryPath holds optional path to kustomize binary
	BinaryPath: string @protobuf(2,bytes,opt,name=binaryPath)
}
